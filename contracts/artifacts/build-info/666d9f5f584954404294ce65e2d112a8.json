{"id":"666d9f5f584954404294ce65e2d112a8","_format":"hh-sol-build-info-1","solcVersion":"0.8.6","solcLongVersion":"0.8.6+commit.11564f7e","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/extensions/ILayerZeroEndpoint.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"./ILayerZeroUserApplicationConfig.sol\";\r\n\r\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\r\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\r\n    // @param _payload - a custom bytes payload to send to the destination contract\r\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\r\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\r\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\r\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    // @notice used by the messaging library to publish verified payload\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source contract (as bytes) at the source chain\r\n    // @param _dstAddress - the address on destination chain\r\n    // @param _nonce - the unbound message ordering nonce\r\n    // @param _gasLimit - the gas limit for external contract execution\r\n    // @param _payload - verified payload to send to the destination contract\r\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\r\n\r\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\r\n\r\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\r\n    // @param _srcAddress - the source chain contract address\r\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\r\n\r\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    // @param _payload - the custom message to send over LayerZero\r\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\r\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\r\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    // @notice get this Endpoint's immutable source identifier\r\n    function getChainId() external view returns (uint16);\r\n\r\n    // @notice the interface to retry failed message on this Endpoint destination\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    // @param _payload - the payload to be retried\r\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\r\n\r\n    // @notice query if any STORED payload (message blocking) at the endpoint.\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\r\n\r\n    // @notice query if the _libraryAddress is valid for sending msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the _libraryAddress is valid for receiving msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the non-reentrancy guard for send() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isSendingPayload() external view returns (bool);\r\n\r\n    // @notice query if the non-reentrancy guard for receive() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isReceivingPayload() external view returns (bool);\r\n\r\n    // @notice get the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _userApplication - the contract address of the user application\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\r\n\r\n    // @notice get the send() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getSendVersion(address _userApplication) external view returns (uint16);\r\n\r\n    // @notice get the lzReceive() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\r\n}"},"contracts/extensions/ILayerZeroReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ILayerZeroReceiver {\r\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\r\n    // @param _srcChainId - the source endpoint identifier\r\n    // @param _srcAddress - the source sending contract address from the source chain\r\n    // @param _nonce - the ordered message nonce\r\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\r\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\r\n}"},"contracts/extensions/ILayerZeroUserApplicationConfig.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ILayerZeroUserApplicationConfig {\r\n    // @notice set the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    // @param _config - configuration in the bytes. can encode arbitrary content.\r\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\r\n\r\n    // @notice set the send() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setSendVersion(uint16 _version) external;\r\n\r\n    // @notice set the lzReceive() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setReceiveVersion(uint16 _version) external;\r\n\r\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\r\n    // @param _srcChainId - the chainId of the source chain\r\n    // @param _srcAddress - the contract address of the source contract at the source chain\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\r\n}"},"contracts/extensions/IONFT721.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"./IONFT721Core.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n/**\r\n * @dev Interface of the ONFT standard\r\n */\r\ninterface IONFT721 is  IERC721 {\r\n\r\n}"},"contracts/extensions/IONFT721Core.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Interface of the ONFT Core standard\r\n */\r\ninterface IONFT721Core is IERC165 {\r\n    /**\r\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\r\n     * _dstChainId - L0 defined chain id to send tokens too\r\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n     * _tokenId - token Id to transfer\r\n     * _useZro - indicates to use zro to pay L0 fees\r\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\r\n     */\r\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    /**\r\n     * @dev send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from`\r\n     * `_toAddress` can be any size depending on the `dstChainId`.\r\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\r\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\r\n     */\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    /**\r\n     * @dev Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\r\n     * `_nonce` is the outbound nonce from\r\n     */\r\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes indexed _toAddress, uint _tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce.\r\n     */\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _tokenId);\r\n}"},"contracts/extensions/LzApp.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./ILayerZeroReceiver.sol\";\r\nimport \"./ILayerZeroUserApplicationConfig.sol\";\r\nimport \"./ILayerZeroEndpoint.sol\";\r\nimport \"./util/BytesLib.sol\";\r\n\r\n/*\r\n * a generic LzReceiver implementation\r\n */\r\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\r\n    using BytesLib for bytes;\r\n\r\n    ILayerZeroEndpoint public immutable lzEndpoint;\r\n    mapping(uint16 => bytes) public trustedRemoteLookup;\r\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\r\n    address public precrime;\r\n\r\n    event SetPrecrime(address precrime);\r\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\r\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\r\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\r\n\r\n    constructor(address _endpoint) {\r\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\r\n    }\r\n\r\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\r\n        // lzReceive must be called by the endpoint for security\r\n        require(_msgSender() == address(lzEndpoint), \"LzApp: invalid endpoint caller\");\r\n\r\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\r\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\r\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \"LzApp: invalid source sending contract\");\r\n\r\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\r\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\r\n\r\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\r\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\r\n        require(trustedRemote.length != 0, \"LzApp: destination chain is not a trusted source\");\r\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\r\n        uint providedGasLimit = _getGasLimit(_adapterParams);\r\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\r\n        require(minGasLimit > 0, \"LzApp: minGasLimit not set\");\r\n        require(providedGasLimit >= minGasLimit, \"LzApp: gas limit is too low\");\r\n    }\r\n\r\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\r\n        require(_adapterParams.length >= 34, \"LzApp: invalid adapterParams\");\r\n        assembly {\r\n            gasLimit := mload(add(_adapterParams, 34))\r\n        }\r\n    }\r\n\r\n    //---------------------------UserApplication config----------------------------------------\r\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\r\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\r\n    }\r\n\r\n    // generic config for LayerZero user Application\r\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\r\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\r\n    }\r\n\r\n    function setSendVersion(uint16 _version) external override onlyOwner {\r\n        lzEndpoint.setSendVersion(_version);\r\n    }\r\n\r\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\r\n        lzEndpoint.setReceiveVersion(_version);\r\n    }\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\r\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\r\n    }\r\n\r\n    // _path = abi.encodePacked(remoteAddress, localAddress)\r\n    // this function set the trusted path for the cross-chain communication\r\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\r\n        trustedRemoteLookup[_srcChainId] = _path;\r\n        emit SetTrustedRemote(_srcChainId, _path);\r\n    }\r\n\r\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\r\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\r\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\r\n    }\r\n\r\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\r\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\r\n        require(path.length != 0, \"LzApp: no trusted path record\");\r\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\r\n    }\r\n\r\n    function setPrecrime(address _precrime) external onlyOwner {\r\n        precrime = _precrime;\r\n        emit SetPrecrime(_precrime);\r\n    }\r\n\r\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\r\n        require(_minGas > 0, \"LzApp: invalid minGas\");\r\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\r\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\r\n    }\r\n\r\n    //--------------------------- VIEW FUNCTION ----------------------------------------\r\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\r\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\r\n        return keccak256(trustedSource) == keccak256(_srcAddress);\r\n    }\r\n}"},"contracts/extensions/NonblockingLzApp.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./LzApp.sol\";\r\nimport \"./util/ExcessivelySafeCall.sol\";\r\n\r\n/*\r\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\r\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\r\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\r\n */\r\nabstract contract NonblockingLzApp is LzApp {\r\n    using ExcessivelySafeCall for address;\r\n\r\n    constructor(address _endpoint) LzApp(_endpoint) {}\r\n\r\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\r\n\r\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\r\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\r\n\r\n    // overriding the virtual function in LzReceiver\r\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\r\n        // try-catch all errors/exceptions\r\n        if (!success) {\r\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\r\n        }\r\n    }\r\n\r\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\r\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\r\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\r\n    }\r\n\r\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\r\n        // only internal transaction\r\n        require(_msgSender() == address(this), \"NonblockingLzApp: caller must be LzApp\");\r\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    //@notice override this function\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\r\n\r\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\r\n        // assert there is message to retry\r\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\r\n        require(payloadHash != bytes32(0), \"NonblockingLzApp: no stored message\");\r\n        require(keccak256(_payload) == payloadHash, \"NonblockingLzApp: invalid payload\");\r\n        // clear the stored message\r\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\r\n        // execute the message. revert if it fails again\r\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\r\n    }\r\n}"},"contracts/extensions/util/BytesLib.sol":{"content":"// SPDX-License-Identifier: Unlicense\r\n/*\r\n * @title Solidity Bytes Arrays Utils\r\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\r\n *\r\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\r\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\r\n */\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n\r\nlibrary BytesLib {\r\n    function concat(\r\n        bytes memory _preBytes,\r\n        bytes memory _postBytes\r\n    )\r\n    internal\r\n    pure\r\n    returns (bytes memory)\r\n    {\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n        // Get a location of some free memory and store it in tempBytes as\r\n        // Solidity does for memory variables.\r\n            tempBytes := mload(0x40)\r\n\r\n        // Store the length of the first bytes array at the beginning of\r\n        // the memory for tempBytes.\r\n            let length := mload(_preBytes)\r\n            mstore(tempBytes, length)\r\n\r\n        // Maintain a memory counter for the current write location in the\r\n        // temp bytes array by adding the 32 bytes for the array length to\r\n        // the starting location.\r\n            let mc := add(tempBytes, 0x20)\r\n        // Stop copying when the memory counter reaches the length of the\r\n        // first bytes array.\r\n            let end := add(mc, length)\r\n\r\n            for {\r\n            // Initialize a copy counter to the start of the _preBytes data,\r\n            // 32 bytes into its memory.\r\n                let cc := add(_preBytes, 0x20)\r\n            } lt(mc, end) {\r\n            // Increase both counters by 32 bytes each iteration.\r\n                mc := add(mc, 0x20)\r\n                cc := add(cc, 0x20)\r\n            } {\r\n            // Write the _preBytes data into the tempBytes memory 32 bytes\r\n            // at a time.\r\n                mstore(mc, mload(cc))\r\n            }\r\n\r\n        // Add the length of _postBytes to the current length of tempBytes\r\n        // and store it as the new length in the first 32 bytes of the\r\n        // tempBytes memory.\r\n            length := mload(_postBytes)\r\n            mstore(tempBytes, add(length, mload(tempBytes)))\r\n\r\n        // Move the memory counter back from a multiple of 0x20 to the\r\n        // actual end of the _preBytes data.\r\n            mc := end\r\n        // Stop copying when the memory counter reaches the new combined\r\n        // length of the arrays.\r\n            end := add(mc, length)\r\n\r\n            for {\r\n                let cc := add(_postBytes, 0x20)\r\n            } lt(mc, end) {\r\n                mc := add(mc, 0x20)\r\n                cc := add(cc, 0x20)\r\n            } {\r\n                mstore(mc, mload(cc))\r\n            }\r\n\r\n        // Update the free-memory pointer by padding our last write location\r\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\r\n        // next 32 byte block, then round down to the nearest multiple of\r\n        // 32. If the sum of the length of the two arrays is zero then add\r\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\r\n            mstore(0x40, and(\r\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\r\n            not(31) // Round down to the nearest 32 bytes.\r\n            ))\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n\r\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\r\n        assembly {\r\n        // Read the first 32 bytes of _preBytes storage, which is the length\r\n        // of the array. (We don't need to use the offset into the slot\r\n        // because arrays use the entire slot.)\r\n            let fslot := sload(_preBytes.slot)\r\n        // Arrays of 31 bytes or less have an even value in their slot,\r\n        // while longer arrays have an odd value. The actual length is\r\n        // the slot divided by two for odd values, and the lowest order\r\n        // byte divided by two for even values.\r\n        // If the slot is even, bitwise and the slot with 255 and divide by\r\n        // two to get the length. If the slot is odd, bitwise and the slot\r\n        // with -1 and divide by two.\r\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\r\n            let mlength := mload(_postBytes)\r\n            let newlength := add(slength, mlength)\r\n        // slength can contain both the length and contents of the array\r\n        // if length < 32 bytes so let's prepare for that\r\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\r\n            switch add(lt(slength, 32), lt(newlength, 32))\r\n            case 2 {\r\n            // Since the new array still fits in the slot, we just need to\r\n            // update the contents of the slot.\r\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\r\n                sstore(\r\n                _preBytes.slot,\r\n                // all the modifications to the slot are inside this\r\n                // next block\r\n                add(\r\n                // we can just add to the slot contents because the\r\n                // bytes we want to change are the LSBs\r\n                fslot,\r\n                add(\r\n                mul(\r\n                div(\r\n                // load the bytes from memory\r\n                mload(add(_postBytes, 0x20)),\r\n                // zero all bytes to the right\r\n                exp(0x100, sub(32, mlength))\r\n                ),\r\n                // and now shift left the number of bytes to\r\n                // leave space for the length in the slot\r\n                exp(0x100, sub(32, newlength))\r\n                ),\r\n                // increase length by the double of the memory\r\n                // bytes length\r\n                mul(mlength, 2)\r\n                )\r\n                )\r\n                )\r\n            }\r\n            case 1 {\r\n            // The stored value fits in the slot, but the combined value\r\n            // will exceed it.\r\n            // get the keccak hash to get the contents of the array\r\n                mstore(0x0, _preBytes.slot)\r\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\r\n\r\n            // save new length\r\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\r\n\r\n            // The contents of the _postBytes array start 32 bytes into\r\n            // the structure. Our first read should obtain the `submod`\r\n            // bytes that can fit into the unused space in the last word\r\n            // of the stored array. To get this, we read 32 bytes starting\r\n            // from `submod`, so the data we read overlaps with the array\r\n            // contents by `submod` bytes. Masking the lowest-order\r\n            // `submod` bytes allows us to add that value directly to the\r\n            // stored value.\r\n\r\n                let submod := sub(32, slength)\r\n                let mc := add(_postBytes, submod)\r\n                let end := add(_postBytes, mlength)\r\n                let mask := sub(exp(0x100, submod), 1)\r\n\r\n                sstore(\r\n                sc,\r\n                add(\r\n                and(\r\n                fslot,\r\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\r\n                ),\r\n                and(mload(mc), mask)\r\n                )\r\n                )\r\n\r\n                for {\r\n                    mc := add(mc, 0x20)\r\n                    sc := add(sc, 1)\r\n                } lt(mc, end) {\r\n                    sc := add(sc, 1)\r\n                    mc := add(mc, 0x20)\r\n                } {\r\n                    sstore(sc, mload(mc))\r\n                }\r\n\r\n                mask := exp(0x100, sub(mc, end))\r\n\r\n                sstore(sc, mul(div(mload(mc), mask), mask))\r\n            }\r\n            default {\r\n            // get the keccak hash to get the contents of the array\r\n                mstore(0x0, _preBytes.slot)\r\n            // Start copying to the last used word of the stored array.\r\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\r\n\r\n            // save new length\r\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\r\n\r\n            // Copy over the first `submod` bytes of the new data as in\r\n            // case 1 above.\r\n                let slengthmod := mod(slength, 32)\r\n                let mlengthmod := mod(mlength, 32)\r\n                let submod := sub(32, slengthmod)\r\n                let mc := add(_postBytes, submod)\r\n                let end := add(_postBytes, mlength)\r\n                let mask := sub(exp(0x100, submod), 1)\r\n\r\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\r\n\r\n                for {\r\n                    sc := add(sc, 1)\r\n                    mc := add(mc, 0x20)\r\n                } lt(mc, end) {\r\n                    sc := add(sc, 1)\r\n                    mc := add(mc, 0x20)\r\n                } {\r\n                    sstore(sc, mload(mc))\r\n                }\r\n\r\n                mask := exp(0x100, sub(mc, end))\r\n\r\n                sstore(sc, mul(div(mload(mc), mask), mask))\r\n            }\r\n        }\r\n    }\r\n\r\n    function slice(\r\n        bytes memory _bytes,\r\n        uint256 _start,\r\n        uint256 _length\r\n    )\r\n    internal\r\n    pure\r\n    returns (bytes memory)\r\n    {\r\n        require(_length + 31 >= _length, \"slice_overflow\");\r\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\r\n\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            switch iszero(_length)\r\n            case 0 {\r\n            // Get a location of some free memory and store it in tempBytes as\r\n            // Solidity does for memory variables.\r\n                tempBytes := mload(0x40)\r\n\r\n            // The first word of the slice result is potentially a partial\r\n            // word read from the original array. To read it, we calculate\r\n            // the length of that partial word and start copying that many\r\n            // bytes into the array. The first word we copy will start with\r\n            // data we don't care about, but the last `lengthmod` bytes will\r\n            // land at the beginning of the contents of the new array. When\r\n            // we're done copying, we overwrite the full first word with\r\n            // the actual length of the slice.\r\n                let lengthmod := and(_length, 31)\r\n\r\n            // The multiplication in the next line is necessary\r\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\r\n            // the following copy loop was copying the origin's length\r\n            // and then ending prematurely not copying everything it should.\r\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\r\n                let end := add(mc, _length)\r\n\r\n                for {\r\n                // The multiplication in the next line has the same exact purpose\r\n                // as the one above.\r\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\r\n                } lt(mc, end) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                    mstore(mc, mload(cc))\r\n                }\r\n\r\n                mstore(tempBytes, _length)\r\n\r\n            //update free-memory pointer\r\n            //allocating the array padded to 32 bytes like the compiler does now\r\n                mstore(0x40, and(add(mc, 31), not(31)))\r\n            }\r\n            //if we want a zero-length slice let's just return a zero-length array\r\n            default {\r\n                tempBytes := mload(0x40)\r\n            //zero out the 32 bytes slice we are about to return\r\n            //we need to do it because Solidity does not garbage collect\r\n                mstore(tempBytes, 0)\r\n\r\n                mstore(0x40, add(tempBytes, 0x20))\r\n            }\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n\r\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\r\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\r\n        address tempAddress;\r\n\r\n        assembly {\r\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\r\n        }\r\n\r\n        return tempAddress;\r\n    }\r\n\r\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\r\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\r\n        uint8 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x1), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\r\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\r\n        uint16 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x2), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\r\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\r\n        uint32 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x4), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\r\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\r\n        uint64 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x8), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\r\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\r\n        uint96 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0xc), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\r\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\r\n        uint128 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x10), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\r\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\r\n        uint256 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x20), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\r\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\r\n        bytes32 tempBytes32;\r\n\r\n        assembly {\r\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\r\n        }\r\n\r\n        return tempBytes32;\r\n    }\r\n\r\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\r\n        bool success = true;\r\n\r\n        assembly {\r\n            let length := mload(_preBytes)\r\n\r\n        // if lengths don't match the arrays are not equal\r\n            switch eq(length, mload(_postBytes))\r\n            case 1 {\r\n            // cb is a circuit breaker in the for loop since there's\r\n            //  no said feature for inline assembly loops\r\n            // cb = 1 - don't breaker\r\n            // cb = 0 - break\r\n                let cb := 1\r\n\r\n                let mc := add(_preBytes, 0x20)\r\n                let end := add(mc, length)\r\n\r\n                for {\r\n                    let cc := add(_postBytes, 0x20)\r\n                // the next line is the loop condition:\r\n                // while(uint256(mc < end) + cb == 2)\r\n                } eq(add(lt(mc, end), cb), 2) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                // if any of these checks fails then arrays are not equal\r\n                    if iszero(eq(mload(mc), mload(cc))) {\r\n                    // unsuccess:\r\n                        success := 0\r\n                        cb := 0\r\n                    }\r\n                }\r\n            }\r\n            default {\r\n            // unsuccess:\r\n                success := 0\r\n            }\r\n        }\r\n\r\n        return success;\r\n    }\r\n\r\n    function equalStorage(\r\n        bytes storage _preBytes,\r\n        bytes memory _postBytes\r\n    )\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        bool success = true;\r\n\r\n        assembly {\r\n        // we know _preBytes_offset is 0\r\n            let fslot := sload(_preBytes.slot)\r\n        // Decode the length of the stored array like in concatStorage().\r\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\r\n            let mlength := mload(_postBytes)\r\n\r\n        // if lengths don't match the arrays are not equal\r\n            switch eq(slength, mlength)\r\n            case 1 {\r\n            // slength can contain both the length and contents of the array\r\n            // if length < 32 bytes so let's prepare for that\r\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\r\n                if iszero(iszero(slength)) {\r\n                    switch lt(slength, 32)\r\n                    case 1 {\r\n                    // blank the last byte which is the length\r\n                        fslot := mul(div(fslot, 0x100), 0x100)\r\n\r\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\r\n                        // unsuccess:\r\n                            success := 0\r\n                        }\r\n                    }\r\n                    default {\r\n                    // cb is a circuit breaker in the for loop since there's\r\n                    //  no said feature for inline assembly loops\r\n                    // cb = 1 - don't breaker\r\n                    // cb = 0 - break\r\n                        let cb := 1\r\n\r\n                    // get the keccak hash to get the contents of the array\r\n                        mstore(0x0, _preBytes.slot)\r\n                        let sc := keccak256(0x0, 0x20)\r\n\r\n                        let mc := add(_postBytes, 0x20)\r\n                        let end := add(mc, mlength)\r\n\r\n                    // the next line is the loop condition:\r\n                    // while(uint256(mc < end) + cb == 2)\r\n                        for {} eq(add(lt(mc, end), cb), 2) {\r\n                            sc := add(sc, 1)\r\n                            mc := add(mc, 0x20)\r\n                        } {\r\n                            if iszero(eq(sload(sc), mload(mc))) {\r\n                            // unsuccess:\r\n                                success := 0\r\n                                cb := 0\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            default {\r\n            // unsuccess:\r\n                success := 0\r\n            }\r\n        }\r\n\r\n        return success;\r\n    }\r\n}"},"contracts/extensions/util/ExcessivelySafeCall.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\r\npragma solidity >=0.7.6;\r\n\r\nlibrary ExcessivelySafeCall {\r\n    uint256 constant LOW_28_MASK =\r\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n\r\n    /// @notice Use when you _really_ really _really_ don't trust the called\r\n    /// contract. This prevents the called contract from causing reversion of\r\n    /// the caller in as many ways as we can.\r\n    /// @dev The main difference between this and a solidity low-level call is\r\n    /// that we limit the number of bytes that the callee can cause to be\r\n    /// copied to caller memory. This prevents stupid things like malicious\r\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\r\n    /// to memory.\r\n    /// @param _target The address to call\r\n    /// @param _gas The amount of gas to forward to the remote contract\r\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\r\n    /// to memory.\r\n    /// @param _calldata The data to send to the remote contract\r\n    /// @return success and returndata, as `.call()`. Returndata is capped to\r\n    /// `_maxCopy` bytes.\r\n    function excessivelySafeCall(\r\n        address _target,\r\n        uint256 _gas,\r\n        uint16 _maxCopy,\r\n        bytes memory _calldata\r\n    ) internal returns (bool, bytes memory) {\r\n        // set up for assembly call\r\n        uint256 _toCopy;\r\n        bool _success;\r\n        bytes memory _returnData = new bytes(_maxCopy);\r\n        // dispatch message to recipient\r\n        // by assembly calling \"handle\" function\r\n        // we call via assembly to avoid memcopying a very large returndata\r\n        // returned by a malicious contract\r\n        assembly {\r\n            _success := call(\r\n            _gas, // gas\r\n            _target, // recipient\r\n            0, // ether value\r\n            add(_calldata, 0x20), // inloc\r\n            mload(_calldata), // inlen\r\n            0, // outloc\r\n            0 // outlen\r\n            )\r\n        // limit our copy to 256 bytes\r\n            _toCopy := returndatasize()\r\n            if gt(_toCopy, _maxCopy) {\r\n                _toCopy := _maxCopy\r\n            }\r\n        // Store the length of the copied bytes\r\n            mstore(_returnData, _toCopy)\r\n        // copy the bytes from returndata[0:_toCopy]\r\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\r\n        }\r\n        return (_success, _returnData);\r\n    }\r\n\r\n    /// @notice Use when you _really_ really _really_ don't trust the called\r\n    /// contract. This prevents the called contract from causing reversion of\r\n    /// the caller in as many ways as we can.\r\n    /// @dev The main difference between this and a solidity low-level call is\r\n    /// that we limit the number of bytes that the callee can cause to be\r\n    /// copied to caller memory. This prevents stupid things like malicious\r\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\r\n    /// to memory.\r\n    /// @param _target The address to call\r\n    /// @param _gas The amount of gas to forward to the remote contract\r\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\r\n    /// to memory.\r\n    /// @param _calldata The data to send to the remote contract\r\n    /// @return success and returndata, as `.call()`. Returndata is capped to\r\n    /// `_maxCopy` bytes.\r\n    function excessivelySafeStaticCall(\r\n        address _target,\r\n        uint256 _gas,\r\n        uint16 _maxCopy,\r\n        bytes memory _calldata\r\n    ) internal view returns (bool, bytes memory) {\r\n        // set up for assembly call\r\n        uint256 _toCopy;\r\n        bool _success;\r\n        bytes memory _returnData = new bytes(_maxCopy);\r\n        // dispatch message to recipient\r\n        // by assembly calling \"handle\" function\r\n        // we call via assembly to avoid memcopying a very large returndata\r\n        // returned by a malicious contract\r\n        assembly {\r\n            _success := staticcall(\r\n            _gas, // gas\r\n            _target, // recipient\r\n            add(_calldata, 0x20), // inloc\r\n            mload(_calldata), // inlen\r\n            0, // outloc\r\n            0 // outlen\r\n            )\r\n        // limit our copy to 256 bytes\r\n            _toCopy := returndatasize()\r\n            if gt(_toCopy, _maxCopy) {\r\n                _toCopy := _maxCopy\r\n            }\r\n        // Store the length of the copied bytes\r\n            mstore(_returnData, _toCopy)\r\n        // copy the bytes from returndata[0:_toCopy]\r\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\r\n        }\r\n        return (_success, _returnData);\r\n    }\r\n\r\n    /**\r\n     * @notice Swaps function selectors in encoded contract calls\r\n     * @dev Allows reuse of encoded calldata for functions with identical\r\n     * argument types but different names. It simply swaps out the first 4 bytes\r\n     * for the new selector. This function modifies memory in place, and should\r\n     * only be used with caution.\r\n     * @param _newSelector The new 4-byte selector\r\n     * @param _buf The encoded contract args\r\n     */\r\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\r\n    internal\r\n    pure\r\n    {\r\n        require(_buf.length >= 4);\r\n        uint256 _mask = LOW_28_MASK;\r\n        assembly {\r\n        // load the first word of\r\n            let _word := mload(add(_buf, 0x20))\r\n        // mask out the top 4 bytes\r\n        // /x\r\n            _word := and(_word, _mask)\r\n            _word := or(_newSelector, _word)\r\n            mstore(add(_buf, 0x20), _word)\r\n        }\r\n    }\r\n}"},"contracts/GreenDAO.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./extensions/IONFT721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ncontract GreenDAO is ERC721, IONFT721 {\n   \n    constructor(\n        string memory _name,\n        string memory _symbol\n    ) ERC721(_name, _symbol) {}\n\n      struct dao_uri_struct {\n        string dao_wallet;\n        string dao_uri;\n        string finished;\n    }\n    struct goal_uri_struct {\n        uint256 dao_id;\n        string goal_uri;\n    }\n\n    struct ideas_uri_struct {\n        uint256 goal_id;\n        string ideas_uri;\n    }\n\n    struct goal_ideas_votes_struct {\n        uint256 goal_id;\n        uint256 ideas_id;\n        string wallet;\n    }\n\n    uint256 private _dao_ids;\n    uint256 private _goal_ids;\n    uint256 private _ideas_ids;\n    uint256 private _ideas_vote_ids;\n    mapping(uint256 => dao_uri_struct) public _dao_uris;                        //_dao_ids          => (Dao)    Dao Wallet + Dao URI   + Finished\n    mapping(uint256 => goal_uri_struct) private _goal_uris;                     //_goal_ids         => (Goal)   Dao ID + Goal URI\n    mapping(uint256 => ideas_uri_struct) public _ideas_uris;                    //_ideas_ids        => (Ideas)  Goal ID + Ideas URI\n    mapping(uint256 => goal_ideas_votes_struct) public all_goal_ideas_votes;    //_ideas_vote_ids   => (Vote)   Goal ID + Ideas ID + Wallet\n\n    \n\n    //Daos\n    function create_dao(string memory _dao_wallet, string memory _dao_uri)\n        public\n        returns (uint256)\n    {\n        //Create Dao into _dao_uris\n        _dao_uris[_dao_ids] = dao_uri_struct(_dao_wallet, _dao_uri, \"False\");\n        _dao_ids++;\n\n        return _dao_ids;\n    }\n\n    function set_dao(\n        uint256 _dao_id,\n        string memory _dao_wallet,\n        string memory _dao_uri\n    ) public {\n        //Set Dao of wallet and uri\n        _dao_uris[_dao_id].dao_wallet = _dao_wallet;\n        _dao_uris[_dao_id].dao_uri = _dao_uri;\n    }\n\n    function get_all_daos() public view returns (string[] memory) {\n        //Getting all doas\n        string[] memory _StoreInfo = new string[](_dao_ids);\n        for (uint256 i = 0; i < _dao_ids; i++) {\n            _StoreInfo[i] = _dao_uris[i].dao_uri;\n        }\n\n        return _StoreInfo;\n    }\n\n\n    function dao_uri(uint256 _dao_id) public view returns (string memory) {\n        //Getting one dao URI\n        return _dao_uris[_dao_id].dao_uri;\n    }\n\n    //Goals\n    function create_goal(string memory _goal_uri, uint256 _dao_id) public returns (uint256)\n    {\n        //Create goal into _goal_uris\n        _goal_uris[_goal_ids] = goal_uri_struct(_dao_id, _goal_uri);\n        _goal_ids++;\n\n        return _goal_ids;\n    }\n\n    function set_goal(uint256 _goal_id, string memory _goal_uri) public {\n        //Set goal uri\n        _goal_uris[_goal_id].goal_uri = _goal_uri;\n    }\n\n    function get_all_goals() public view returns (string[] memory) {\n        //Getting all goals\n        string[] memory _StoreInfo = new string[](_goal_ids);\n        for (uint256 i = 0; i < _goal_ids; i++) {\n            _StoreInfo[i] = _goal_uris[i].goal_uri;\n        }\n\n        return _StoreInfo;\n    }\n\n    function get_all_goals_by_dao_id(uint256 _dao_id) public view returns (string[] memory) {\n        //Getting all goals by dao id\n        string[] memory _StoreInfo = new string[](_goal_ids);\n        uint256 _store_id;\n        for (uint256 i = 0; i < _goal_ids; i++) {\n          if (_goal_uris[i].dao_id == _dao_id){\n            _StoreInfo[_store_id] = _goal_uris[i].goal_uri;\n            _store_id++;\n          }\n        }\n\n        return _StoreInfo;\n    }\n\n    \n    function get_goal_id_by_goal_uri(string memory _goal_uri) public view returns (uint256) {\n        //Getting goal id by uri\n        for (uint256 i = 0; i < _goal_ids; i++) {\n          if (keccak256(bytes(_goal_uris[i].goal_uri)) == keccak256(bytes(_goal_uri))) return  i;\n        }\n\n        return 0;\n    }\n\n    function goal_uri(uint256 _goal_id) public view returns (string memory) {\n        //Getting one goal URI\n        return _goal_uris[_goal_id].goal_uri;\n    }\n\n\n    //Ideas\n    function create_ideas(string memory _ideas_uri, uint256 _goal_id) public returns (uint256)\n    {\n        //Create ideas into _ideas_uris\n        _ideas_uris[_ideas_ids] = ideas_uri_struct(_goal_id, _ideas_uri);\n        _ideas_ids++;\n\n        return _ideas_ids;\n    }\n\n    function set_ideas(uint256 _ideas_id, string memory _ideas_uri) public {\n        //Set ideas uri\n        _ideas_uris[_ideas_id].ideas_uri = _ideas_uri;\n    }\n\n    function get_all_ideas() public view returns (string[] memory) {\n        //Getting all ideas\n        string[] memory _StoreInfo = new string[](_ideas_ids);\n        for (uint256 i = 0; i < _ideas_ids; i++) {\n            _StoreInfo[i] = _ideas_uris[i].ideas_uri;\n        }\n\n        return _StoreInfo;\n    }\n\n    function get_all_ideas_by_goal_id(uint256 _goal_id) public view returns (string[] memory) {\n        //Getting all ideas by goal id\n        string[] memory _StoreInfo = new string[](_ideas_ids);        \n        uint256 _store_id;\n        for (uint256 i = 0; i < _ideas_ids; i++) {\n          if (_ideas_uris[i].goal_id == _goal_id)\n            _StoreInfo[_store_id] = _ideas_uris[i].ideas_uri;\n            _store_id++;\n        }\n\n        return _StoreInfo;\n    }\n\n    \n    function get_ideas_id_by_ideas_uri(string memory _ideas_uri) public view returns (uint256) {\n        //Getting ideas id by uri\n        for (uint256 i = 0; i < _ideas_ids; i++) {\n          if (keccak256(bytes(_ideas_uris[i].ideas_uri)) == keccak256(bytes(_ideas_uri))) return  i;\n        }\n\n        return 0;\n    }\n\n    function get_goal_id_from_ideas_uri(string memory _ideas_uri) public view returns (uint256) {\n     //Getting ideas id by uri\n     for (uint256 i = 0; i < _ideas_ids; i++) {\n       if (keccak256(bytes(_ideas_uris[i].ideas_uri)) == keccak256(bytes(_ideas_uri))) return  _ideas_uris[i].goal_id;\n     }\n\n     return 0;\n    }\n\n\n    function ideas_uri(uint256 _ideas_id) public view returns (string memory) {\n        //Getting one ideas URI\n        return _ideas_uris[_ideas_id].ideas_uri;\n    }\n\n\n    //Votes\n    function create_goal_ideas_vote(uint256 _goal_id, uint256 _ideas_id,string memory _wallet) public returns (uint256)\n    {\n        //Create votes into all_goal_ideas_votes\n        all_goal_ideas_votes[_ideas_vote_ids] = goal_ideas_votes_struct(_goal_id, _ideas_id,_wallet);\n        _ideas_vote_ids++;\n\n        return _ideas_vote_ids;\n    }\n\n\n   function get_ideas_votes_from_goal(uint256 _goal_id, uint256 _ideas_id) public view returns (string[] memory)\n    {\n        //gets all ideas votes from goal\n        string[] memory _StoreInfo = new string[](_ideas_vote_ids);\n        uint256 _store_id;\n        for (uint256 i = 0; i < _ideas_vote_ids; i++) {\n          if (all_goal_ideas_votes[i].goal_id == _goal_id && all_goal_ideas_votes[i].ideas_id == _ideas_id )\n            _StoreInfo[_store_id] = all_goal_ideas_votes[i].wallet;\n            _store_id++;\n        }\n        return _StoreInfo;\n    }\n\n    function reset_all() public {\n      _dao_ids = 0;\n      _goal_ids = 0;\n      _ideas_ids = 0;\n      _ideas_vote_ids = 0;\n      for (uint256 i = 0; i < _dao_ids; i++)            delete _dao_uris[i];\n      for (uint256 i = 0; i < _goal_ids; i++)           delete _goal_uris[i];\n      for (uint256 i = 0; i < _ideas_ids; i++)          delete _ideas_uris[i];\n      for (uint256 i = 0; i < _ideas_vote_ids; i++)     delete all_goal_ideas_votes[i];    \n\n    }\n\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1570],"Ownable":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":113,"sourceUnit":1571,"src":"127:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":1570,"src":"683:7:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"683:7:0"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"159:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112,1570],"name":"Ownable","nameLocation":"672:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nameLocation":"713:6:0","nodeType":"VariableDeclaration","scope":112,"src":"697:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"id":13,"name":"OwnershipTransferred","nameLocation":"732:20:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:0","nodeType":"VariableDeclaration","scope":13,"src":"753:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:0","nodeType":"VariableDeclaration","scope":13,"src":"784:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:0"},"src":"726:84:0"},{"body":{"id":22,"nodeType":"Block","src":"926:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"955:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"955:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"936:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"936:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21,"nodeType":"ExpressionStatement","src":"936:32:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"816:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":23,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"926:0:0"},"scope":112,"src":"912:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"1084:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1094:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1094:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"ExpressionStatement","src":"1094:13:0"},{"id":29,"nodeType":"PlaceholderStatement","src":"1117:1:0"}]},"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"981:77:0","text":" @dev Throws if called by any account other than the owner."},"id":31,"name":"onlyOwner","nameLocation":"1072:9:0","nodeType":"ModifierDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"1081:2:0"},"src":"1063:62:0","virtual":false,"visibility":"internal"},{"body":{"id":39,"nodeType":"Block","src":"1256:30:0","statements":[{"expression":{"id":37,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1273:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1266:13:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1131:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1215:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1247:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:0"},"scope":112,"src":"1201:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"1404:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":45,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1422:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1422:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":47,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"1433:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1433:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":44,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1414:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1414:68:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1292:62:0","text":" @dev Throws if the sender is not the owner."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:0","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1379:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"1404:0:0"},"scope":112,"src":"1359:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1885:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1922:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1914:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1914:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1914:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":60,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1895:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1895:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1895:30:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1495:331:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":68,"implemented":true,"kind":"function","modifiers":[{"id":58,"kind":"modifierInvocation","modifierName":{"id":57,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1875:9:0"},"nodeType":"ModifierInvocation","src":"1875:9:0"}],"name":"renounceOwnership","nameLocation":"1840:17:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1857:2:0"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1885:0:0"},"scope":112,"src":"1831:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":90,"nodeType":"Block","src":"2151:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2169:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2189:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2181:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"2181:7:0","typeDescriptions":{}}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2181:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2169:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2193:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":76,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2161:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2161:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2161:73:0"},{"expression":{"arguments":[{"id":87,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2263:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2244:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2244:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"2244:28:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1938:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":91,"implemented":true,"kind":"function","modifiers":[{"id":74,"kind":"modifierInvocation","modifierName":{"id":73,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2141:9:0"},"nodeType":"ModifierInvocation","src":"2141:9:0"}],"name":"transferOwnership","nameLocation":"2090:17:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"newOwner","nameLocation":"2116:8:0","nodeType":"VariableDeclaration","scope":91,"src":"2108:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"2108:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2107:18:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"2151:0:0"},"scope":112,"src":"2081:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"2496:124:0","statements":[{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"oldOwner","nameLocation":"2514:8:0","nodeType":"VariableDeclaration","scope":110,"src":"2506:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"2506:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":100,"initialValue":{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2525:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2506:25:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":101,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2541:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2550:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2541:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ExpressionStatement","src":"2541:17:0"},{"eventCall":{"arguments":[{"id":106,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2594:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2604:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":105,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2573:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2573:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"EmitStatement","src":"2568:45:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"2285:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2442:18:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"newOwner","nameLocation":"2469:8:0","nodeType":"VariableDeclaration","scope":111,"src":"2461:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2461:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2460:18:0"},"returnParameters":{"id":96,"nodeType":"ParameterList","parameters":[],"src":"2496:0:0"},"scope":112,"src":"2433:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":113,"src":"654:1968:0","usedErrors":[]}],"src":"102:2521:0"},"id":0},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Address":[1548],"Context":[1570],"ERC165":[1769],"ERC721":[1057],"IERC165":[1781],"IERC721":[1173],"IERC721Metadata":[1218],"IERC721Receiver":[1191],"Math":[2646],"Strings":[1745]},"id":1058,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:1"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":115,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1174,"src":"132:23:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":116,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1192,"src":"156:31:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":117,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1219,"src":"188:42:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":118,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1549,"src":"231:33:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":119,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1571,"src":"265:33:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":120,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1746,"src":"299:33:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":121,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1058,"sourceUnit":1770,"src":"333:46:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":123,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":1570,"src":"647:7:1"},"id":124,"nodeType":"InheritanceSpecifier","src":"647:7:1"},{"baseName":{"id":125,"name":"ERC165","nodeType":"IdentifierPath","referencedDeclaration":1769,"src":"656:6:1"},"id":126,"nodeType":"InheritanceSpecifier","src":"656:6:1"},{"baseName":{"id":127,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":1173,"src":"664:7:1"},"id":128,"nodeType":"InheritanceSpecifier","src":"664:7:1"},{"baseName":{"id":129,"name":"IERC721Metadata","nodeType":"IdentifierPath","referencedDeclaration":1218,"src":"673:15:1"},"id":130,"nodeType":"InheritanceSpecifier","src":"673:15:1"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":122,"nodeType":"StructuredDocumentation","src":"381:246:1","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":1057,"linearizedBaseContracts":[1057,1218,1173,1769,1781,1570],"name":"ERC721","nameLocation":"637:6:1","nodeType":"ContractDefinition","nodes":[{"id":133,"libraryName":{"id":131,"name":"Address","nodeType":"IdentifierPath","referencedDeclaration":1548,"src":"701:7:1"},"nodeType":"UsingForDirective","src":"695:26:1","typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"713:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"id":136,"libraryName":{"id":134,"name":"Strings","nodeType":"IdentifierPath","referencedDeclaration":1745,"src":"732:7:1"},"nodeType":"UsingForDirective","src":"726:26:1","typeName":{"id":135,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":138,"mutability":"mutable","name":"_name","nameLocation":"791:5:1","nodeType":"VariableDeclaration","scope":1057,"src":"776:20:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":137,"name":"string","nodeType":"ElementaryTypeName","src":"776:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":140,"mutability":"mutable","name":"_symbol","nameLocation":"838:7:1","nodeType":"VariableDeclaration","scope":1057,"src":"823:22:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":139,"name":"string","nodeType":"ElementaryTypeName","src":"823:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":144,"mutability":"mutable","name":"_owners","nameLocation":"934:7:1","nodeType":"VariableDeclaration","scope":1057,"src":"898:43:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":143,"keyType":{"id":141,"name":"uint256","nodeType":"ElementaryTypeName","src":"906:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"898:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":142,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":148,"mutability":"mutable","name":"_balances","nameLocation":"1028:9:1","nodeType":"VariableDeclaration","scope":1057,"src":"992:45:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":147,"keyType":{"id":145,"name":"address","nodeType":"ElementaryTypeName","src":"1000:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"992:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":146,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":152,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1129:15:1","nodeType":"VariableDeclaration","scope":1057,"src":"1093:51:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":151,"keyType":{"id":149,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1093:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":150,"name":"address","nodeType":"ElementaryTypeName","src":"1112:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":158,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1252:18:1","nodeType":"VariableDeclaration","scope":1057,"src":"1199:71:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":157,"keyType":{"id":153,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1199:44:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":156,"keyType":{"id":154,"name":"address","nodeType":"ElementaryTypeName","src":"1226:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1218:24:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":155,"name":"bool","nodeType":"ElementaryTypeName","src":"1237:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":174,"nodeType":"Block","src":"1446:57:1","statements":[{"expression":{"id":168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":166,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"1456:5:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":167,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"1464:5:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1456:13:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":169,"nodeType":"ExpressionStatement","src":"1456:13:1"},{"expression":{"id":172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":170,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"1479:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":171,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"1489:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1479:17:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":173,"nodeType":"ExpressionStatement","src":"1479:17:1"}]},"documentation":{"id":159,"nodeType":"StructuredDocumentation","src":"1277:108:1","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":175,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":161,"mutability":"mutable","name":"name_","nameLocation":"1416:5:1","nodeType":"VariableDeclaration","scope":175,"src":"1402:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":160,"name":"string","nodeType":"ElementaryTypeName","src":"1402:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":163,"mutability":"mutable","name":"symbol_","nameLocation":"1437:7:1","nodeType":"VariableDeclaration","scope":175,"src":"1423:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":162,"name":"string","nodeType":"ElementaryTypeName","src":"1423:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1401:44:1"},"returnParameters":{"id":165,"nodeType":"ParameterList","parameters":[],"src":"1446:0:1"},"scope":1057,"src":"1390:113:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1768,1780],"body":{"id":205,"nodeType":"Block","src":"1678:192:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":186,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"1707:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":188,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"1727:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1173_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1173_$","typeString":"type(contract IERC721)"}],"id":187,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1722:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1722:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1173","typeString":"type(contract IERC721)"}},"id":190,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1722:25:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1707:40:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":192,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"1763:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":194,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"1783:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1218_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1218_$","typeString":"type(contract IERC721Metadata)"}],"id":193,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1778:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1778:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1218","typeString":"type(contract IERC721Metadata)"}},"id":196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1778:33:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1763:48:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:104:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":201,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"1851:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":199,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1827:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$1057_$","typeString":"type(contract super ERC721)"}},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1768,"src":"1827:23:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1827:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:156:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":185,"id":204,"nodeType":"Return","src":"1688:175:1"}]},"documentation":{"id":176,"nodeType":"StructuredDocumentation","src":"1509:56:1","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":206,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1579:17:1","nodeType":"FunctionDefinition","overrides":{"id":182,"nodeType":"OverrideSpecifier","overrides":[{"id":180,"name":"ERC165","nodeType":"IdentifierPath","referencedDeclaration":1769,"src":"1646:6:1"},{"id":181,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":1781,"src":"1654:7:1"}],"src":"1637:25:1"},"parameters":{"id":179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":178,"mutability":"mutable","name":"interfaceId","nameLocation":"1604:11:1","nodeType":"VariableDeclaration","scope":206,"src":"1597:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":177,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1597:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1596:20:1"},"returnParameters":{"id":185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":206,"src":"1672:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":183,"name":"bool","nodeType":"ElementaryTypeName","src":"1672:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1671:6:1"},"scope":1057,"src":"1570:300:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1098],"body":{"id":229,"nodeType":"Block","src":"2010:123:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":216,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"2028:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2045:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2037:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":217,"name":"address","nodeType":"ElementaryTypeName","src":"2037:7:1","typeDescriptions":{}}},"id":220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2037:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2028:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2049:43:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":215,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2020:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2020:73:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":224,"nodeType":"ExpressionStatement","src":"2020:73:1"},{"expression":{"baseExpression":{"id":225,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"2110:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":227,"indexExpression":{"id":226,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"2120:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2110:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":214,"id":228,"nodeType":"Return","src":"2103:23:1"}]},"documentation":{"id":207,"nodeType":"StructuredDocumentation","src":"1876:48:1","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":230,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1938:9:1","nodeType":"FunctionDefinition","overrides":{"id":211,"nodeType":"OverrideSpecifier","overrides":[],"src":"1983:8:1"},"parameters":{"id":210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":209,"mutability":"mutable","name":"owner","nameLocation":"1956:5:1","nodeType":"VariableDeclaration","scope":230,"src":"1948:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":208,"name":"address","nodeType":"ElementaryTypeName","src":"1948:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1947:15:1"},"returnParameters":{"id":214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":213,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":230,"src":"2001:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":212,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2000:9:1"},"scope":1057,"src":"1929:204:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1106],"body":{"id":257,"nodeType":"Block","src":"2271:138:1","statements":[{"assignments":[240],"declarations":[{"constant":false,"id":240,"mutability":"mutable","name":"owner","nameLocation":"2289:5:1","nodeType":"VariableDeclaration","scope":257,"src":"2281:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":239,"name":"address","nodeType":"ElementaryTypeName","src":"2281:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":244,"initialValue":{"arguments":[{"id":242,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"2306:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":241,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"2297:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2297:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2281:33:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":246,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"2332:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2341:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":247,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:1","typeDescriptions":{}}},"id":250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2341:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2332:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2353:26:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":245,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2324:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2324:56:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":254,"nodeType":"ExpressionStatement","src":"2324:56:1"},{"expression":{"id":255,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"2397:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":238,"id":256,"nodeType":"Return","src":"2390:12:1"}]},"documentation":{"id":231,"nodeType":"StructuredDocumentation","src":"2139:46:1","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":258,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2199:7:1","nodeType":"FunctionDefinition","overrides":{"id":235,"nodeType":"OverrideSpecifier","overrides":[],"src":"2244:8:1"},"parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":233,"mutability":"mutable","name":"tokenId","nameLocation":"2215:7:1","nodeType":"VariableDeclaration","scope":258,"src":"2207:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":232,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2206:17:1"},"returnParameters":{"id":238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":237,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":258,"src":"2262:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":236,"name":"address","nodeType":"ElementaryTypeName","src":"2262:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2261:9:1"},"scope":1057,"src":"2190:219:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1203],"body":{"id":267,"nodeType":"Block","src":"2540:29:1","statements":[{"expression":{"id":265,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"2557:5:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":264,"id":266,"nodeType":"Return","src":"2550:12:1"}]},"documentation":{"id":259,"nodeType":"StructuredDocumentation","src":"2415:51:1","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":268,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2480:4:1","nodeType":"FunctionDefinition","overrides":{"id":261,"nodeType":"OverrideSpecifier","overrides":[],"src":"2507:8:1"},"parameters":{"id":260,"nodeType":"ParameterList","parameters":[],"src":"2484:2:1"},"returnParameters":{"id":264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":263,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":268,"src":"2525:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":262,"name":"string","nodeType":"ElementaryTypeName","src":"2525:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2524:15:1"},"scope":1057,"src":"2471:98:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1209],"body":{"id":277,"nodeType":"Block","src":"2704:31:1","statements":[{"expression":{"id":275,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"2721:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":274,"id":276,"nodeType":"Return","src":"2714:14:1"}]},"documentation":{"id":269,"nodeType":"StructuredDocumentation","src":"2575:53:1","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":278,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2642:6:1","nodeType":"FunctionDefinition","overrides":{"id":271,"nodeType":"OverrideSpecifier","overrides":[],"src":"2671:8:1"},"parameters":{"id":270,"nodeType":"ParameterList","parameters":[],"src":"2648:2:1"},"returnParameters":{"id":274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":273,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":278,"src":"2689:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":272,"name":"string","nodeType":"ElementaryTypeName","src":"2689:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2688:15:1"},"scope":1057,"src":"2633:102:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1217],"body":{"id":316,"nodeType":"Block","src":"2889:188:1","statements":[{"expression":{"arguments":[{"id":288,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"2914:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":287,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"2899:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2899:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":290,"nodeType":"ExpressionStatement","src":"2899:23:1"},{"assignments":[292],"declarations":[{"constant":false,"id":292,"mutability":"mutable","name":"baseURI","nameLocation":"2947:7:1","nodeType":"VariableDeclaration","scope":316,"src":"2933:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":291,"name":"string","nodeType":"ElementaryTypeName","src":"2933:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":295,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":293,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"2957:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2957:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2933:34:1"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":298,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":292,"src":"2990:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2984:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":296,"name":"bytes","nodeType":"ElementaryTypeName","src":"2984:5:1","typeDescriptions":{}}},"id":299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2984:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2984:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2984:25:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3068:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2984:86:1","trueExpression":{"arguments":[{"arguments":[{"id":307,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":292,"src":"3036:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":308,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"3045:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1628,"src":"3045:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3045:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":305,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3019:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":306,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"3019:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3019:45:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3012:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":303,"name":"string","nodeType":"ElementaryTypeName","src":"3012:6:1","typeDescriptions":{}}},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3012:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":286,"id":315,"nodeType":"Return","src":"2977:93:1"}]},"documentation":{"id":279,"nodeType":"StructuredDocumentation","src":"2741:55:1","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":317,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2810:8:1","nodeType":"FunctionDefinition","overrides":{"id":283,"nodeType":"OverrideSpecifier","overrides":[],"src":"2856:8:1"},"parameters":{"id":282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":281,"mutability":"mutable","name":"tokenId","nameLocation":"2827:7:1","nodeType":"VariableDeclaration","scope":317,"src":"2819:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":280,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2818:17:1"},"returnParameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":317,"src":"2874:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":284,"name":"string","nodeType":"ElementaryTypeName","src":"2874:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2873:15:1"},"scope":1057,"src":"2801:276:1","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":325,"nodeType":"Block","src":"3385:26:1","statements":[{"expression":{"hexValue":"","id":323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3402:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":322,"id":324,"nodeType":"Return","src":"3395:9:1"}]},"documentation":{"id":318,"nodeType":"StructuredDocumentation","src":"3083:231:1","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":326,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3328:8:1","nodeType":"FunctionDefinition","parameters":{"id":319,"nodeType":"ParameterList","parameters":[],"src":"3336:2:1"},"returnParameters":{"id":322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":326,"src":"3370:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":320,"name":"string","nodeType":"ElementaryTypeName","src":"3370:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3369:15:1"},"scope":1057,"src":"3319:92:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1146],"body":{"id":368,"nodeType":"Block","src":"3538:336:1","statements":[{"assignments":[336],"declarations":[{"constant":false,"id":336,"mutability":"mutable","name":"owner","nameLocation":"3556:5:1","nodeType":"VariableDeclaration","scope":368,"src":"3548:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":335,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":341,"initialValue":{"arguments":[{"id":339,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"3579:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":337,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"3564:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"3564:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3564:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3548:39:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":343,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"3605:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":344,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"3611:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3605:11:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3618:35:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":342,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3597:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3597:57:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":348,"nodeType":"ExpressionStatement","src":"3597:57:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":350,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"3686:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3686:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":352,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"3702:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3686:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":355,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"3728:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":356,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"3735:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3735:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":354,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"3711:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3711:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3686:62:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","id":360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3762:63:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""},"value":"ERC721: approve caller is not token owner or approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""}],"id":349,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3665:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3665:170:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":362,"nodeType":"ExpressionStatement","src":"3665:170:1"},{"expression":{"arguments":[{"id":364,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"3855:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":365,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"3859:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":363,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"3846:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3846:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":367,"nodeType":"ExpressionStatement","src":"3846:21:1"}]},"documentation":{"id":327,"nodeType":"StructuredDocumentation","src":"3417:46:1","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":369,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3477:7:1","nodeType":"FunctionDefinition","overrides":{"id":333,"nodeType":"OverrideSpecifier","overrides":[],"src":"3529:8:1"},"parameters":{"id":332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":329,"mutability":"mutable","name":"to","nameLocation":"3493:2:1","nodeType":"VariableDeclaration","scope":369,"src":"3485:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":328,"name":"address","nodeType":"ElementaryTypeName","src":"3485:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":331,"mutability":"mutable","name":"tokenId","nameLocation":"3505:7:1","nodeType":"VariableDeclaration","scope":369,"src":"3497:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":330,"name":"uint256","nodeType":"ElementaryTypeName","src":"3497:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3484:29:1"},"returnParameters":{"id":334,"nodeType":"ParameterList","parameters":[],"src":"3538:0:1"},"scope":1057,"src":"3468:406:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1162],"body":{"id":386,"nodeType":"Block","src":"4020:82:1","statements":[{"expression":{"arguments":[{"id":379,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"4045:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":378,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"4030:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4030:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":381,"nodeType":"ExpressionStatement","src":"4030:23:1"},{"expression":{"baseExpression":{"id":382,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"4071:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":384,"indexExpression":{"id":383,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"4087:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4071:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":377,"id":385,"nodeType":"Return","src":"4064:31:1"}]},"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"3880:50:1","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":387,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3944:11:1","nodeType":"FunctionDefinition","overrides":{"id":374,"nodeType":"OverrideSpecifier","overrides":[],"src":"3993:8:1"},"parameters":{"id":373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":372,"mutability":"mutable","name":"tokenId","nameLocation":"3964:7:1","nodeType":"VariableDeclaration","scope":387,"src":"3956:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":371,"name":"uint256","nodeType":"ElementaryTypeName","src":"3956:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3955:17:1"},"returnParameters":{"id":377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":376,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":387,"src":"4011:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":375,"name":"address","nodeType":"ElementaryTypeName","src":"4011:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4010:9:1"},"scope":1057,"src":"3935:167:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1154],"body":{"id":403,"nodeType":"Block","src":"4253:69:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":397,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"4282:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4282:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":399,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"4296:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":400,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"4306:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":396,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"4263:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4263:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":402,"nodeType":"ExpressionStatement","src":"4263:52:1"}]},"documentation":{"id":388,"nodeType":"StructuredDocumentation","src":"4108:56:1","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":404,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4178:17:1","nodeType":"FunctionDefinition","overrides":{"id":394,"nodeType":"OverrideSpecifier","overrides":[],"src":"4244:8:1"},"parameters":{"id":393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":390,"mutability":"mutable","name":"operator","nameLocation":"4204:8:1","nodeType":"VariableDeclaration","scope":404,"src":"4196:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":389,"name":"address","nodeType":"ElementaryTypeName","src":"4196:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":392,"mutability":"mutable","name":"approved","nameLocation":"4219:8:1","nodeType":"VariableDeclaration","scope":404,"src":"4214:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":391,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4195:33:1"},"returnParameters":{"id":395,"nodeType":"ParameterList","parameters":[],"src":"4253:0:1"},"scope":1057,"src":"4169:153:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1172],"body":{"id":421,"nodeType":"Block","src":"4491:59:1","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":415,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"4508:18:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":417,"indexExpression":{"id":416,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"4527:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:25:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":419,"indexExpression":{"id":418,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"4534:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":414,"id":420,"nodeType":"Return","src":"4501:42:1"}]},"documentation":{"id":405,"nodeType":"StructuredDocumentation","src":"4328:55:1","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":422,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4397:16:1","nodeType":"FunctionDefinition","overrides":{"id":411,"nodeType":"OverrideSpecifier","overrides":[],"src":"4467:8:1"},"parameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":407,"mutability":"mutable","name":"owner","nameLocation":"4422:5:1","nodeType":"VariableDeclaration","scope":422,"src":"4414:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":406,"name":"address","nodeType":"ElementaryTypeName","src":"4414:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":409,"mutability":"mutable","name":"operator","nameLocation":"4437:8:1","nodeType":"VariableDeclaration","scope":422,"src":"4429:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":408,"name":"address","nodeType":"ElementaryTypeName","src":"4429:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4413:33:1"},"returnParameters":{"id":414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":413,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":422,"src":"4485:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":412,"name":"bool","nodeType":"ElementaryTypeName","src":"4485:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4484:6:1"},"scope":1057,"src":"4388:162:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1138],"body":{"id":448,"nodeType":"Block","src":"4731:207:1","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":435,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"4820:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4820:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":437,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"4834:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":434,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"4801:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4801:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4844:47:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":433,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4793:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4793:99:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":441,"nodeType":"ExpressionStatement","src":"4793:99:1"},{"expression":{"arguments":[{"id":443,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"4913:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":444,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"4919:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":445,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"4923:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":442,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"4903:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4903:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":447,"nodeType":"ExpressionStatement","src":"4903:28:1"}]},"documentation":{"id":423,"nodeType":"StructuredDocumentation","src":"4556:51:1","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":449,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4621:12:1","nodeType":"FunctionDefinition","overrides":{"id":431,"nodeType":"OverrideSpecifier","overrides":[],"src":"4722:8:1"},"parameters":{"id":430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"from","nameLocation":"4651:4:1","nodeType":"VariableDeclaration","scope":449,"src":"4643:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":424,"name":"address","nodeType":"ElementaryTypeName","src":"4643:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":427,"mutability":"mutable","name":"to","nameLocation":"4673:2:1","nodeType":"VariableDeclaration","scope":449,"src":"4665:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":426,"name":"address","nodeType":"ElementaryTypeName","src":"4665:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":429,"mutability":"mutable","name":"tokenId","nameLocation":"4693:7:1","nodeType":"VariableDeclaration","scope":449,"src":"4685:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":428,"name":"uint256","nodeType":"ElementaryTypeName","src":"4685:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4633:73:1"},"returnParameters":{"id":432,"nodeType":"ParameterList","parameters":[],"src":"4731:0:1"},"scope":1057,"src":"4612:326:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1128],"body":{"id":467,"nodeType":"Block","src":"5127:56:1","statements":[{"expression":{"arguments":[{"id":461,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"5154:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":462,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"5160:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":463,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"5164:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5173:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":460,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[468,498],"referencedDeclaration":498,"src":"5137:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5137:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":466,"nodeType":"ExpressionStatement","src":"5137:39:1"}]},"documentation":{"id":450,"nodeType":"StructuredDocumentation","src":"4944:55:1","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":468,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5013:16:1","nodeType":"FunctionDefinition","overrides":{"id":458,"nodeType":"OverrideSpecifier","overrides":[],"src":"5118:8:1"},"parameters":{"id":457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":452,"mutability":"mutable","name":"from","nameLocation":"5047:4:1","nodeType":"VariableDeclaration","scope":468,"src":"5039:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":451,"name":"address","nodeType":"ElementaryTypeName","src":"5039:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":454,"mutability":"mutable","name":"to","nameLocation":"5069:2:1","nodeType":"VariableDeclaration","scope":468,"src":"5061:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":453,"name":"address","nodeType":"ElementaryTypeName","src":"5061:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":456,"mutability":"mutable","name":"tokenId","nameLocation":"5089:7:1","nodeType":"VariableDeclaration","scope":468,"src":"5081:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":455,"name":"uint256","nodeType":"ElementaryTypeName","src":"5081:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5029:73:1"},"returnParameters":{"id":459,"nodeType":"ParameterList","parameters":[],"src":"5127:0:1"},"scope":1057,"src":"5004:179:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1118],"body":{"id":497,"nodeType":"Block","src":"5399:164:1","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":483,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"5436:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5436:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":485,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"5450:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":482,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"5417:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5417:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5460:47:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":481,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5409:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5409:99:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":489,"nodeType":"ExpressionStatement","src":"5409:99:1"},{"expression":{"arguments":[{"id":491,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"5532:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":492,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":473,"src":"5538:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":493,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"5542:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":494,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"5551:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":490,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"5518:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5518:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":496,"nodeType":"ExpressionStatement","src":"5518:38:1"}]},"documentation":{"id":469,"nodeType":"StructuredDocumentation","src":"5189:55:1","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":498,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5258:16:1","nodeType":"FunctionDefinition","overrides":{"id":479,"nodeType":"OverrideSpecifier","overrides":[],"src":"5390:8:1"},"parameters":{"id":478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"from","nameLocation":"5292:4:1","nodeType":"VariableDeclaration","scope":498,"src":"5284:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":470,"name":"address","nodeType":"ElementaryTypeName","src":"5284:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":473,"mutability":"mutable","name":"to","nameLocation":"5314:2:1","nodeType":"VariableDeclaration","scope":498,"src":"5306:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":472,"name":"address","nodeType":"ElementaryTypeName","src":"5306:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":475,"mutability":"mutable","name":"tokenId","nameLocation":"5334:7:1","nodeType":"VariableDeclaration","scope":498,"src":"5326:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":474,"name":"uint256","nodeType":"ElementaryTypeName","src":"5326:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":477,"mutability":"mutable","name":"data","nameLocation":"5364:4:1","nodeType":"VariableDeclaration","scope":498,"src":"5351:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":476,"name":"bytes","nodeType":"ElementaryTypeName","src":"5351:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5274:100:1"},"returnParameters":{"id":480,"nodeType":"ParameterList","parameters":[],"src":"5399:0:1"},"scope":1057,"src":"5249:314:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":526,"nodeType":"Block","src":"6564:165:1","statements":[{"expression":{"arguments":[{"id":511,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"6584:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":512,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"6590:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":513,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"6594:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":510,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"6574:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6574:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":515,"nodeType":"ExpressionStatement","src":"6574:28:1"},{"expression":{"arguments":[{"arguments":[{"id":518,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"6643:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":519,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"6649:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":520,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"6653:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":521,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"6662:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":517,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"6620:22:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6620:47:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6669:52:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":516,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6612:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6612:110:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":525,"nodeType":"ExpressionStatement","src":"6612:110:1"}]},"documentation":{"id":499,"nodeType":"StructuredDocumentation","src":"5569:850:1","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":527,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"6433:13:1","nodeType":"FunctionDefinition","parameters":{"id":508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":501,"mutability":"mutable","name":"from","nameLocation":"6464:4:1","nodeType":"VariableDeclaration","scope":527,"src":"6456:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":500,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":503,"mutability":"mutable","name":"to","nameLocation":"6486:2:1","nodeType":"VariableDeclaration","scope":527,"src":"6478:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":502,"name":"address","nodeType":"ElementaryTypeName","src":"6478:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":505,"mutability":"mutable","name":"tokenId","nameLocation":"6506:7:1","nodeType":"VariableDeclaration","scope":527,"src":"6498:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":504,"name":"uint256","nodeType":"ElementaryTypeName","src":"6498:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":507,"mutability":"mutable","name":"data","nameLocation":"6536:4:1","nodeType":"VariableDeclaration","scope":527,"src":"6523:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":506,"name":"bytes","nodeType":"ElementaryTypeName","src":"6523:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6446:100:1"},"returnParameters":{"id":509,"nodeType":"ParameterList","parameters":[],"src":"6564:0:1"},"scope":1057,"src":"6424:305:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":539,"nodeType":"Block","src":"6913:40:1","statements":[{"expression":{"baseExpression":{"id":535,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"6930:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":537,"indexExpression":{"id":536,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"6938:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6930:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":534,"id":538,"nodeType":"Return","src":"6923:23:1"}]},"documentation":{"id":528,"nodeType":"StructuredDocumentation","src":"6735:98:1","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"},"id":540,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"6847:8:1","nodeType":"FunctionDefinition","parameters":{"id":531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":530,"mutability":"mutable","name":"tokenId","nameLocation":"6864:7:1","nodeType":"VariableDeclaration","scope":540,"src":"6856:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":529,"name":"uint256","nodeType":"ElementaryTypeName","src":"6856:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6855:17:1"},"returnParameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":540,"src":"6904:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":532,"name":"address","nodeType":"ElementaryTypeName","src":"6904:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6903:9:1"},"scope":1057,"src":"6838:115:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":557,"nodeType":"Block","src":"7327:55:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":549,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"7353:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":548,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"7344:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7344:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7373:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7365:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":551,"name":"address","nodeType":"ElementaryTypeName","src":"7365:7:1","typeDescriptions":{}}},"id":554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7365:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7344:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":547,"id":556,"nodeType":"Return","src":"7337:38:1"}]},"documentation":{"id":541,"nodeType":"StructuredDocumentation","src":"6959:292:1","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":558,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7265:7:1","nodeType":"FunctionDefinition","parameters":{"id":544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":543,"mutability":"mutable","name":"tokenId","nameLocation":"7281:7:1","nodeType":"VariableDeclaration","scope":558,"src":"7273:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":542,"name":"uint256","nodeType":"ElementaryTypeName","src":"7273:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7272:17:1"},"returnParameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":546,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":558,"src":"7321:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":545,"name":"bool","nodeType":"ElementaryTypeName","src":"7321:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7320:6:1"},"scope":1057,"src":"7256:126:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":591,"nodeType":"Block","src":"7639:162:1","statements":[{"assignments":[569],"declarations":[{"constant":false,"id":569,"mutability":"mutable","name":"owner","nameLocation":"7657:5:1","nodeType":"VariableDeclaration","scope":591,"src":"7649:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":568,"name":"address","nodeType":"ElementaryTypeName","src":"7649:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":574,"initialValue":{"arguments":[{"id":572,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"7680:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":570,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"7665:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"7665:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7665:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7649:39:1"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":575,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"7706:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":576,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"7717:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7706:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":579,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"7743:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":580,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"7750:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":578,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"7726:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7726:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:52:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":584,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"7774:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":583,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"7762:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7762:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":586,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"7786:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7762:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:87:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":589,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7705:89:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":567,"id":590,"nodeType":"Return","src":"7698:96:1"}]},"documentation":{"id":559,"nodeType":"StructuredDocumentation","src":"7388:147:1","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":592,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"7549:18:1","nodeType":"FunctionDefinition","parameters":{"id":564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":561,"mutability":"mutable","name":"spender","nameLocation":"7576:7:1","nodeType":"VariableDeclaration","scope":592,"src":"7568:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":560,"name":"address","nodeType":"ElementaryTypeName","src":"7568:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":563,"mutability":"mutable","name":"tokenId","nameLocation":"7593:7:1","nodeType":"VariableDeclaration","scope":592,"src":"7585:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":562,"name":"uint256","nodeType":"ElementaryTypeName","src":"7585:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7567:34:1"},"returnParameters":{"id":567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":592,"src":"7633:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":565,"name":"bool","nodeType":"ElementaryTypeName","src":"7633:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7632:6:1"},"scope":1057,"src":"7540:261:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":606,"nodeType":"Block","src":"8196:43:1","statements":[{"expression":{"arguments":[{"id":601,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":595,"src":"8216:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":602,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"8220:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8229:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":600,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[607,636],"referencedDeclaration":636,"src":"8206:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8206:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":605,"nodeType":"ExpressionStatement","src":"8206:26:1"}]},"documentation":{"id":593,"nodeType":"StructuredDocumentation","src":"7807:319:1","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":607,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8140:9:1","nodeType":"FunctionDefinition","parameters":{"id":598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":595,"mutability":"mutable","name":"to","nameLocation":"8158:2:1","nodeType":"VariableDeclaration","scope":607,"src":"8150:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":594,"name":"address","nodeType":"ElementaryTypeName","src":"8150:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":597,"mutability":"mutable","name":"tokenId","nameLocation":"8170:7:1","nodeType":"VariableDeclaration","scope":607,"src":"8162:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":596,"name":"uint256","nodeType":"ElementaryTypeName","src":"8162:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8149:29:1"},"returnParameters":{"id":599,"nodeType":"ParameterList","parameters":[],"src":"8196:0:1"},"scope":1057,"src":"8131:108:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":635,"nodeType":"Block","src":"8574:195:1","statements":[{"expression":{"arguments":[{"id":618,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"8590:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":619,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"8594:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":617,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"8584:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8584:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":621,"nodeType":"ExpressionStatement","src":"8584:18:1"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8664:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8656:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":624,"name":"address","nodeType":"ElementaryTypeName","src":"8656:7:1","typeDescriptions":{}}},"id":627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8656:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":628,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"8668:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":629,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"8672:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":630,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"8681:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":623,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"8633:22:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8633:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8700:52:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":622,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8612:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8612:150:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":634,"nodeType":"ExpressionStatement","src":"8612:150:1"}]},"documentation":{"id":608,"nodeType":"StructuredDocumentation","src":"8245:210:1","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":636,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8469:9:1","nodeType":"FunctionDefinition","parameters":{"id":615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":610,"mutability":"mutable","name":"to","nameLocation":"8496:2:1","nodeType":"VariableDeclaration","scope":636,"src":"8488:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":609,"name":"address","nodeType":"ElementaryTypeName","src":"8488:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":612,"mutability":"mutable","name":"tokenId","nameLocation":"8516:7:1","nodeType":"VariableDeclaration","scope":636,"src":"8508:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":611,"name":"uint256","nodeType":"ElementaryTypeName","src":"8508:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":614,"mutability":"mutable","name":"data","nameLocation":"8546:4:1","nodeType":"VariableDeclaration","scope":636,"src":"8533:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":613,"name":"bytes","nodeType":"ElementaryTypeName","src":"8533:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8478:78:1"},"returnParameters":{"id":616,"nodeType":"ParameterList","parameters":[],"src":"8574:0:1"},"scope":1057,"src":"8460:309:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":712,"nodeType":"Block","src":"9152:859:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":645,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9170:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9184:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":647,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9176:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":646,"name":"address","nodeType":"ElementaryTypeName","src":"9176:7:1","typeDescriptions":{}}},"id":649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9176:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9170:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9188:34:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":644,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9162:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9162:61:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":653,"nodeType":"ExpressionStatement","src":"9162:61:1"},{"expression":{"arguments":[{"id":658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9241:17:1","subExpression":{"arguments":[{"id":656,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9250:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":655,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"9242:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9242:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9260:30:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":654,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9233:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9233:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":661,"nodeType":"ExpressionStatement","src":"9233:58:1"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9331:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":664,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9323:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":663,"name":"address","nodeType":"ElementaryTypeName","src":"9323:7:1","typeDescriptions":{}}},"id":666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9323:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":667,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9335:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":668,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9339:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9348:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":662,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"9302:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9302:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":671,"nodeType":"ExpressionStatement","src":"9302:48:1"},{"expression":{"arguments":[{"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9445:17:1","subExpression":{"arguments":[{"id":674,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9454:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":673,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"9446:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9446:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9464:30:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":672,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9437:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9437:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":679,"nodeType":"ExpressionStatement","src":"9437:58:1"},{"id":686,"nodeType":"UncheckedBlock","src":"9506:360:1","statements":[{"expression":{"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":680,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"9837:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":682,"indexExpression":{"id":681,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9847:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9837:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9854:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9837:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":685,"nodeType":"ExpressionStatement","src":"9837:18:1"}]},{"expression":{"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":687,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"9876:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":689,"indexExpression":{"id":688,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9884:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9876:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":690,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9895:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9876:21:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":692,"nodeType":"ExpressionStatement","src":"9876:21:1"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9930:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":695,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9922:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":694,"name":"address","nodeType":"ElementaryTypeName","src":"9922:7:1","typeDescriptions":{}}},"id":697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9922:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":698,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9934:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":699,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9938:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":693,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"9913:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9913:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":701,"nodeType":"EmitStatement","src":"9908:38:1"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9985:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":704,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9977:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":703,"name":"address","nodeType":"ElementaryTypeName","src":"9977:7:1","typeDescriptions":{}}},"id":706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9977:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":707,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9989:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":708,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9993:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":702,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"9957:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9957:47:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":711,"nodeType":"ExpressionStatement","src":"9957:47:1"}]},"documentation":{"id":637,"nodeType":"StructuredDocumentation","src":"8775:311:1","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":713,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9100:5:1","nodeType":"FunctionDefinition","parameters":{"id":642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":639,"mutability":"mutable","name":"to","nameLocation":"9114:2:1","nodeType":"VariableDeclaration","scope":713,"src":"9106:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":638,"name":"address","nodeType":"ElementaryTypeName","src":"9106:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":641,"mutability":"mutable","name":"tokenId","nameLocation":"9126:7:1","nodeType":"VariableDeclaration","scope":713,"src":"9118:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":640,"name":"uint256","nodeType":"ElementaryTypeName","src":"9118:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9105:29:1"},"returnParameters":{"id":643,"nodeType":"ParameterList","parameters":[],"src":"9152:0:1"},"scope":1057,"src":"9091:920:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":779,"nodeType":"Block","src":"10386:713:1","statements":[{"assignments":[720],"declarations":[{"constant":false,"id":720,"mutability":"mutable","name":"owner","nameLocation":"10404:5:1","nodeType":"VariableDeclaration","scope":779,"src":"10396:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":719,"name":"address","nodeType":"ElementaryTypeName","src":"10396:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":725,"initialValue":{"arguments":[{"id":723,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10427:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":721,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"10412:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"10412:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10412:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10396:39:1"},{"expression":{"arguments":[{"id":727,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10467:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":729,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10474:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":728,"name":"address","nodeType":"ElementaryTypeName","src":"10474:7:1","typeDescriptions":{}}},"id":731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10474:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":732,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10486:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10495:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":726,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"10446:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10446:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":735,"nodeType":"ExpressionStatement","src":"10446:51:1"},{"expression":{"id":741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":736,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10599:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":739,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10622:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":737,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"10607:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"10607:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10607:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10599:31:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":742,"nodeType":"ExpressionStatement","src":"10599:31:1"},{"expression":{"id":746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10668:31:1","subExpression":{"baseExpression":{"id":743,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"10675:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":745,"indexExpression":{"id":744,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10691:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10675:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":747,"nodeType":"ExpressionStatement","src":"10668:31:1"},{"id":754,"nodeType":"UncheckedBlock","src":"10710:237:1","statements":[{"expression":{"id":752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":748,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"10915:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":750,"indexExpression":{"id":749,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10925:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10915:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10935:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10915:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":753,"nodeType":"ExpressionStatement","src":"10915:21:1"}]},{"expression":{"id":758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10956:23:1","subExpression":{"baseExpression":{"id":755,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"10963:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":757,"indexExpression":{"id":756,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10971:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10963:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":759,"nodeType":"ExpressionStatement","src":"10956:23:1"},{"eventCall":{"arguments":[{"id":761,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"11004:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11019:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11011:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":762,"name":"address","nodeType":"ElementaryTypeName","src":"11011:7:1","typeDescriptions":{}}},"id":765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11011:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":766,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"11023:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":760,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"10995:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10995:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":768,"nodeType":"EmitStatement","src":"10990:41:1"},{"expression":{"arguments":[{"id":770,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"11062:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11077:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11069:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":771,"name":"address","nodeType":"ElementaryTypeName","src":"11069:7:1","typeDescriptions":{}}},"id":774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11069:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":775,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"11081:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11090:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":769,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"11042:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11042:50:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":778,"nodeType":"ExpressionStatement","src":"11042:50:1"}]},"documentation":{"id":714,"nodeType":"StructuredDocumentation","src":"10017:315:1","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":780,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10346:5:1","nodeType":"FunctionDefinition","parameters":{"id":717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":716,"mutability":"mutable","name":"tokenId","nameLocation":"10360:7:1","nodeType":"VariableDeclaration","scope":780,"src":"10352:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":715,"name":"uint256","nodeType":"ElementaryTypeName","src":"10352:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10351:17:1"},"returnParameters":{"id":718,"nodeType":"ParameterList","parameters":[],"src":"10386:0:1"},"scope":1057,"src":"10337:762:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":864,"nodeType":"Block","src":"11532:1124:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":793,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"11565:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":791,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"11550:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"11550:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11550:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":795,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"11577:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11550:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11583:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":790,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11542:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11542:81:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":799,"nodeType":"ExpressionStatement","src":"11542:81:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":801,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"11641:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11655:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11647:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":802,"name":"address","nodeType":"ElementaryTypeName","src":"11647:7:1","typeDescriptions":{}}},"id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11647:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11641:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11659:38:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":800,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11633:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11633:65:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":809,"nodeType":"ExpressionStatement","src":"11633:65:1"},{"expression":{"arguments":[{"id":811,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"11730:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":812,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"11736:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":813,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"11740:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11749:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":810,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"11709:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11709:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":816,"nodeType":"ExpressionStatement","src":"11709:42:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":820,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"11866:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":818,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"11851:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"11851:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11851:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":822,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"11878:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11851:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11884:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":817,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11843:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11843:81:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":826,"nodeType":"ExpressionStatement","src":"11843:81:1"},{"expression":{"id":830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"11986:31:1","subExpression":{"baseExpression":{"id":827,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"11993:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":829,"indexExpression":{"id":828,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"12009:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11993:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":831,"nodeType":"ExpressionStatement","src":"11986:31:1"},{"id":844,"nodeType":"UncheckedBlock","src":"12028:496:1","statements":[{"expression":{"id":836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":832,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"12461:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":834,"indexExpression":{"id":833,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"12471:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12461:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12480:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12461:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":837,"nodeType":"ExpressionStatement","src":"12461:20:1"},{"expression":{"id":842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":838,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"12495:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":840,"indexExpression":{"id":839,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"12505:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12495:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12512:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12495:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":843,"nodeType":"ExpressionStatement","src":"12495:18:1"}]},{"expression":{"id":849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":845,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"12533:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":847,"indexExpression":{"id":846,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"12541:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12533:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":848,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"12552:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12533:21:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":850,"nodeType":"ExpressionStatement","src":"12533:21:1"},{"eventCall":{"arguments":[{"id":852,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"12579:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":853,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"12585:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":854,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"12589:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":851,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"12570:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12570:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":856,"nodeType":"EmitStatement","src":"12565:32:1"},{"expression":{"arguments":[{"id":858,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"12628:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":859,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"12634:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":860,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"12638:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12647:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":857,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"12608:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12608:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":863,"nodeType":"ExpressionStatement","src":"12608:41:1"}]},"documentation":{"id":781,"nodeType":"StructuredDocumentation","src":"11105:313:1","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":865,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11432:9:1","nodeType":"FunctionDefinition","parameters":{"id":788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":783,"mutability":"mutable","name":"from","nameLocation":"11459:4:1","nodeType":"VariableDeclaration","scope":865,"src":"11451:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":782,"name":"address","nodeType":"ElementaryTypeName","src":"11451:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":785,"mutability":"mutable","name":"to","nameLocation":"11481:2:1","nodeType":"VariableDeclaration","scope":865,"src":"11473:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":784,"name":"address","nodeType":"ElementaryTypeName","src":"11473:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":787,"mutability":"mutable","name":"tokenId","nameLocation":"11501:7:1","nodeType":"VariableDeclaration","scope":865,"src":"11493:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":786,"name":"uint256","nodeType":"ElementaryTypeName","src":"11493:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11441:73:1"},"returnParameters":{"id":789,"nodeType":"ParameterList","parameters":[],"src":"11532:0:1"},"scope":1057,"src":"11423:1233:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":888,"nodeType":"Block","src":"12832:107:1","statements":[{"expression":{"id":877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":873,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"12842:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":875,"indexExpression":{"id":874,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"12858:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12842:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":876,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"12869:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12842:29:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":878,"nodeType":"ExpressionStatement","src":"12842:29:1"},{"eventCall":{"arguments":[{"arguments":[{"id":882,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"12910:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":880,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"12895:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1057_$","typeString":"type(contract ERC721)"}},"id":881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"12895:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12895:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":884,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"12920:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":885,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"12924:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":879,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"12886:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12886:46:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":887,"nodeType":"EmitStatement","src":"12881:51:1"}]},"documentation":{"id":866,"nodeType":"StructuredDocumentation","src":"12662:101:1","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":889,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"12777:8:1","nodeType":"FunctionDefinition","parameters":{"id":871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":868,"mutability":"mutable","name":"to","nameLocation":"12794:2:1","nodeType":"VariableDeclaration","scope":889,"src":"12786:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":867,"name":"address","nodeType":"ElementaryTypeName","src":"12786:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":870,"mutability":"mutable","name":"tokenId","nameLocation":"12806:7:1","nodeType":"VariableDeclaration","scope":889,"src":"12798:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":869,"name":"uint256","nodeType":"ElementaryTypeName","src":"12798:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12785:29:1"},"returnParameters":{"id":872,"nodeType":"ParameterList","parameters":[],"src":"12832:0:1"},"scope":1057,"src":"12768:171:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":920,"nodeType":"Block","src":"13198:184:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":900,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"13216:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":901,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"13225:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13216:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13235:27:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":899,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13208:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13208:55:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":905,"nodeType":"ExpressionStatement","src":"13208:55:1"},{"expression":{"id":912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":906,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"13273:18:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":909,"indexExpression":{"id":907,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"13292:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13273:25:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":910,"indexExpression":{"id":908,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"13299:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13273:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":911,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"13311:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13273:46:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":913,"nodeType":"ExpressionStatement","src":"13273:46:1"},{"eventCall":{"arguments":[{"id":915,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"13349:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":916,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"13356:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":917,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"13366:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":914,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"13334:14:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13334:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":919,"nodeType":"EmitStatement","src":"13329:46:1"}]},"documentation":{"id":890,"nodeType":"StructuredDocumentation","src":"12945:125:1","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":921,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"13084:18:1","nodeType":"FunctionDefinition","parameters":{"id":897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":892,"mutability":"mutable","name":"owner","nameLocation":"13120:5:1","nodeType":"VariableDeclaration","scope":921,"src":"13112:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":891,"name":"address","nodeType":"ElementaryTypeName","src":"13112:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":894,"mutability":"mutable","name":"operator","nameLocation":"13143:8:1","nodeType":"VariableDeclaration","scope":921,"src":"13135:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":893,"name":"address","nodeType":"ElementaryTypeName","src":"13135:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":896,"mutability":"mutable","name":"approved","nameLocation":"13166:8:1","nodeType":"VariableDeclaration","scope":921,"src":"13161:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":895,"name":"bool","nodeType":"ElementaryTypeName","src":"13161:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13102:78:1"},"returnParameters":{"id":898,"nodeType":"ParameterList","parameters":[],"src":"13198:0:1"},"scope":1057,"src":"13075:307:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":934,"nodeType":"Block","src":"13529:70:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":929,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"13555:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":928,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"13547:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13547:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13565:26:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":927,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13539:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13539:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":933,"nodeType":"ExpressionStatement","src":"13539:53:1"}]},"documentation":{"id":922,"nodeType":"StructuredDocumentation","src":"13388:73:1","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":935,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"13475:14:1","nodeType":"FunctionDefinition","parameters":{"id":925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"tokenId","nameLocation":"13498:7:1","nodeType":"VariableDeclaration","scope":935,"src":"13490:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":923,"name":"uint256","nodeType":"ElementaryTypeName","src":"13490:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13489:17:1"},"returnParameters":{"id":926,"nodeType":"ParameterList","parameters":[],"src":"13529:0:1"},"scope":1057,"src":"13466:133:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":996,"nodeType":"Block","src":"14306:676:1","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":949,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"14320:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1236,"src":"14320:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14320:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":994,"nodeType":"Block","src":"14940:36:1","statements":[{"expression":{"hexValue":"74727565","id":992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14961:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":948,"id":993,"nodeType":"Return","src":"14954:11:1"}]},"id":995,"nodeType":"IfStatement","src":"14316:660:1","trueBody":{"id":991,"nodeType":"Block","src":"14337:597:1","statements":[{"clauses":[{"block":{"id":971,"nodeType":"Block","src":"14451:91:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":965,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":963,"src":"14476:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":966,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"14486:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1191_$","typeString":"type(contract IERC721Receiver)"}},"id":967,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1190,"src":"14486:32:1","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":968,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"14486:41:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"14476:51:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":948,"id":970,"nodeType":"Return","src":"14469:58:1"}]},"errorName":"","id":972,"nodeType":"TryCatchClause","parameters":{"id":964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":963,"mutability":"mutable","name":"retval","nameLocation":"14443:6:1","nodeType":"VariableDeclaration","scope":972,"src":"14436:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":962,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14436:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"14435:15:1"},"src":"14427:115:1"},{"block":{"id":988,"nodeType":"Block","src":"14571:353:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":976,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"14593:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"14593:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14610:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14593:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":986,"nodeType":"Block","src":"14720:190:1","statements":[{"AST":{"nodeType":"YulBlock","src":"14806:86:1","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14843:2:1","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"14847:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14839:3:1"},"nodeType":"YulFunctionCall","src":"14839:15:1"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"14862:6:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14856:5:1"},"nodeType":"YulFunctionCall","src":"14856:13:1"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14832:6:1"},"nodeType":"YulFunctionCall","src":"14832:38:1"},"nodeType":"YulExpressionStatement","src":"14832:38:1"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"berlin","externalReferences":[{"declaration":974,"isOffset":false,"isSlot":false,"src":"14847:6:1","valueSize":1},{"declaration":974,"isOffset":false,"isSlot":false,"src":"14862:6:1","valueSize":1}],"id":985,"nodeType":"InlineAssembly","src":"14797:95:1"}]},"id":987,"nodeType":"IfStatement","src":"14589:321:1","trueBody":{"id":984,"nodeType":"Block","src":"14613:101:1","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14642:52:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":980,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"14635:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14635:60:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":983,"nodeType":"ExpressionStatement","src":"14635:60:1"}]}}]},"errorName":"","id":989,"nodeType":"TryCatchClause","parameters":{"id":975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":974,"mutability":"mutable","name":"reason","nameLocation":"14563:6:1","nodeType":"VariableDeclaration","scope":989,"src":"14550:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":973,"name":"bytes","nodeType":"ElementaryTypeName","src":"14550:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14549:21:1"},"src":"14543:381:1"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":956,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"14392:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14392:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":958,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"14406:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":959,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"14412:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":960,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"14421:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":953,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"14371:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":952,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"14355:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1191_$","typeString":"type(contract IERC721Receiver)"}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14355:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1191","typeString":"contract IERC721Receiver"}},"id":955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1190,"src":"14355:36:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14355:71:1","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":990,"nodeType":"TryStatement","src":"14351:573:1"}]}}]},"documentation":{"id":936,"nodeType":"StructuredDocumentation","src":"13605:541:1","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":997,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"14160:22:1","nodeType":"FunctionDefinition","parameters":{"id":945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"mutability":"mutable","name":"from","nameLocation":"14200:4:1","nodeType":"VariableDeclaration","scope":997,"src":"14192:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":937,"name":"address","nodeType":"ElementaryTypeName","src":"14192:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":940,"mutability":"mutable","name":"to","nameLocation":"14222:2:1","nodeType":"VariableDeclaration","scope":997,"src":"14214:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":939,"name":"address","nodeType":"ElementaryTypeName","src":"14214:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":942,"mutability":"mutable","name":"tokenId","nameLocation":"14242:7:1","nodeType":"VariableDeclaration","scope":997,"src":"14234:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":941,"name":"uint256","nodeType":"ElementaryTypeName","src":"14234:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":944,"mutability":"mutable","name":"data","nameLocation":"14272:4:1","nodeType":"VariableDeclaration","scope":997,"src":"14259:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":943,"name":"bytes","nodeType":"ElementaryTypeName","src":"14259:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14182:100:1"},"returnParameters":{"id":948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":947,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":997,"src":"14300:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":946,"name":"bool","nodeType":"ElementaryTypeName","src":"14300:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14299:6:1"},"scope":1057,"src":"14151:831:1","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1042,"nodeType":"Block","src":"15856:238:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1009,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"15870:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15882:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15870:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1041,"nodeType":"IfStatement","src":"15866:222:1","trueBody":{"id":1040,"nodeType":"Block","src":"15885:203:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1012,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"15903:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15919:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1014,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15911:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1013,"name":"address","nodeType":"ElementaryTypeName","src":"15911:7:1","typeDescriptions":{}}},"id":1016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15911:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15903:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1025,"nodeType":"IfStatement","src":"15899:85:1","trueBody":{"id":1024,"nodeType":"Block","src":"15923:61:1","statements":[{"expression":{"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1018,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"15941:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1020,"indexExpression":{"id":1019,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"15951:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15941:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1021,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"15960:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15941:28:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1023,"nodeType":"ExpressionStatement","src":"15941:28:1"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1026,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1002,"src":"16001:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16015:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1028,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16007:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1027,"name":"address","nodeType":"ElementaryTypeName","src":"16007:7:1","typeDescriptions":{}}},"id":1030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16007:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16001:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1039,"nodeType":"IfStatement","src":"15997:81:1","trueBody":{"id":1038,"nodeType":"Block","src":"16019:59:1","statements":[{"expression":{"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1032,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"16037:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1034,"indexExpression":{"id":1033,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1002,"src":"16047:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16037:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1035,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"16054:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16037:26:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1037,"nodeType":"ExpressionStatement","src":"16037:26:1"}]}}]}}]},"documentation":{"id":998,"nodeType":"StructuredDocumentation","src":"14988:705:1","text":" @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1043,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"15707:20:1","nodeType":"FunctionDefinition","parameters":{"id":1007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1000,"mutability":"mutable","name":"from","nameLocation":"15745:4:1","nodeType":"VariableDeclaration","scope":1043,"src":"15737:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"15737:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1002,"mutability":"mutable","name":"to","nameLocation":"15767:2:1","nodeType":"VariableDeclaration","scope":1043,"src":"15759:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1001,"name":"address","nodeType":"ElementaryTypeName","src":"15759:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1004,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1043,"src":"15779:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1003,"name":"uint256","nodeType":"ElementaryTypeName","src":"15779:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1006,"mutability":"mutable","name":"batchSize","nameLocation":"15823:9:1","nodeType":"VariableDeclaration","scope":1043,"src":"15815:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1005,"name":"uint256","nodeType":"ElementaryTypeName","src":"15815:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15727:111:1"},"returnParameters":{"id":1008,"nodeType":"ParameterList","parameters":[],"src":"15856:0:1"},"scope":1057,"src":"15698:396:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1055,"nodeType":"Block","src":"16951:2:1","statements":[]},"documentation":{"id":1044,"nodeType":"StructuredDocumentation","src":"16100:695:1","text":" @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1056,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"16809:19:1","nodeType":"FunctionDefinition","parameters":{"id":1053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1046,"mutability":"mutable","name":"from","nameLocation":"16846:4:1","nodeType":"VariableDeclaration","scope":1056,"src":"16838:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1045,"name":"address","nodeType":"ElementaryTypeName","src":"16838:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1048,"mutability":"mutable","name":"to","nameLocation":"16868:2:1","nodeType":"VariableDeclaration","scope":1056,"src":"16860:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1047,"name":"address","nodeType":"ElementaryTypeName","src":"16860:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1050,"mutability":"mutable","name":"firstTokenId","nameLocation":"16888:12:1","nodeType":"VariableDeclaration","scope":1056,"src":"16880:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1049,"name":"uint256","nodeType":"ElementaryTypeName","src":"16880:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1052,"mutability":"mutable","name":"batchSize","nameLocation":"16918:9:1","nodeType":"VariableDeclaration","scope":1056,"src":"16910:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1051,"name":"uint256","nodeType":"ElementaryTypeName","src":"16910:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16828:105:1"},"returnParameters":{"id":1054,"nodeType":"ParameterList","parameters":[],"src":"16951:0:1"},"scope":1057,"src":"16800:153:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1058,"src":"628:16327:1","usedErrors":[]}],"src":"107:16849:1"},"id":1},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[1781],"IERC721":[1173]},"id":1174,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1059,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:2"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1060,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1174,"sourceUnit":1782,"src":"133:47:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1062,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":1781,"src":"271:7:2"},"id":1063,"nodeType":"InheritanceSpecifier","src":"271:7:2"}],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1061,"nodeType":"StructuredDocumentation","src":"182:67:2","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":1173,"linearizedBaseContracts":[1173,1781],"name":"IERC721","nameLocation":"260:7:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1064,"nodeType":"StructuredDocumentation","src":"285:88:2","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"id":1072,"name":"Transfer","nameLocation":"384:8:2","nodeType":"EventDefinition","parameters":{"id":1071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1066,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:2","nodeType":"VariableDeclaration","scope":1072,"src":"393:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1065,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1068,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:2","nodeType":"VariableDeclaration","scope":1072,"src":"415:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1067,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1070,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:2","nodeType":"VariableDeclaration","scope":1072,"src":"435:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1069,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:2"},"src":"378:82:2"},{"anonymous":false,"documentation":{"id":1073,"nodeType":"StructuredDocumentation","src":"466:94:2","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"id":1081,"name":"Approval","nameLocation":"571:8:2","nodeType":"EventDefinition","parameters":{"id":1080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1075,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:2","nodeType":"VariableDeclaration","scope":1081,"src":"580:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1074,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1077,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:2","nodeType":"VariableDeclaration","scope":1081,"src":"603:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1076,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1079,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:2","nodeType":"VariableDeclaration","scope":1081,"src":"629:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1078,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:2"},"src":"565:89:2"},{"anonymous":false,"documentation":{"id":1082,"nodeType":"StructuredDocumentation","src":"660:117:2","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"id":1090,"name":"ApprovalForAll","nameLocation":"788:14:2","nodeType":"EventDefinition","parameters":{"id":1089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1084,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:2","nodeType":"VariableDeclaration","scope":1090,"src":"803:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1083,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1086,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:2","nodeType":"VariableDeclaration","scope":1090,"src":"826:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1085,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1088,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:2","nodeType":"VariableDeclaration","scope":1090,"src":"852:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1087,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:2"},"src":"782:85:2"},{"documentation":{"id":1091,"nodeType":"StructuredDocumentation","src":"873:76:2","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":1098,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:2","nodeType":"FunctionDefinition","parameters":{"id":1094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1093,"mutability":"mutable","name":"owner","nameLocation":"981:5:2","nodeType":"VariableDeclaration","scope":1098,"src":"973:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1092,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:2"},"returnParameters":{"id":1097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1096,"mutability":"mutable","name":"balance","nameLocation":"1019:7:2","nodeType":"VariableDeclaration","scope":1098,"src":"1011:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1095,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:2"},"scope":1173,"src":"954:74:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1099,"nodeType":"StructuredDocumentation","src":"1034:131:2","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":1106,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:2","nodeType":"FunctionDefinition","parameters":{"id":1102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1101,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:2","nodeType":"VariableDeclaration","scope":1106,"src":"1187:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1100,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:2"},"returnParameters":{"id":1105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1104,"mutability":"mutable","name":"owner","nameLocation":"1235:5:2","nodeType":"VariableDeclaration","scope":1106,"src":"1227:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1103,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:2"},"scope":1173,"src":"1170:72:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1107,"nodeType":"StructuredDocumentation","src":"1248:556:2","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":1118,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:2","nodeType":"FunctionDefinition","parameters":{"id":1116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1109,"mutability":"mutable","name":"from","nameLocation":"1852:4:2","nodeType":"VariableDeclaration","scope":1118,"src":"1844:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1108,"name":"address","nodeType":"ElementaryTypeName","src":"1844:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1111,"mutability":"mutable","name":"to","nameLocation":"1874:2:2","nodeType":"VariableDeclaration","scope":1118,"src":"1866:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1110,"name":"address","nodeType":"ElementaryTypeName","src":"1866:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1113,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:2","nodeType":"VariableDeclaration","scope":1118,"src":"1886:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1112,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1115,"mutability":"mutable","name":"data","nameLocation":"1926:4:2","nodeType":"VariableDeclaration","scope":1118,"src":"1911:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1114,"name":"bytes","nodeType":"ElementaryTypeName","src":"1911:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:102:2"},"returnParameters":{"id":1117,"nodeType":"ParameterList","parameters":[],"src":"1945:0:2"},"scope":1173,"src":"1809:137:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1119,"nodeType":"StructuredDocumentation","src":"1952:687:2","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":1128,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2653:16:2","nodeType":"FunctionDefinition","parameters":{"id":1126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1121,"mutability":"mutable","name":"from","nameLocation":"2687:4:2","nodeType":"VariableDeclaration","scope":1128,"src":"2679:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1120,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1123,"mutability":"mutable","name":"to","nameLocation":"2709:2:2","nodeType":"VariableDeclaration","scope":1128,"src":"2701:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1122,"name":"address","nodeType":"ElementaryTypeName","src":"2701:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1125,"mutability":"mutable","name":"tokenId","nameLocation":"2729:7:2","nodeType":"VariableDeclaration","scope":1128,"src":"2721:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1124,"name":"uint256","nodeType":"ElementaryTypeName","src":"2721:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2669:73:2"},"returnParameters":{"id":1127,"nodeType":"ParameterList","parameters":[],"src":"2751:0:2"},"scope":1173,"src":"2644:108:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1129,"nodeType":"StructuredDocumentation","src":"2758:732:2","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1138,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3504:12:2","nodeType":"FunctionDefinition","parameters":{"id":1136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1131,"mutability":"mutable","name":"from","nameLocation":"3534:4:2","nodeType":"VariableDeclaration","scope":1138,"src":"3526:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1130,"name":"address","nodeType":"ElementaryTypeName","src":"3526:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1133,"mutability":"mutable","name":"to","nameLocation":"3556:2:2","nodeType":"VariableDeclaration","scope":1138,"src":"3548:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1132,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1135,"mutability":"mutable","name":"tokenId","nameLocation":"3576:7:2","nodeType":"VariableDeclaration","scope":1138,"src":"3568:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1134,"name":"uint256","nodeType":"ElementaryTypeName","src":"3568:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3516:73:2"},"returnParameters":{"id":1137,"nodeType":"ParameterList","parameters":[],"src":"3598:0:2"},"scope":1173,"src":"3495:104:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1139,"nodeType":"StructuredDocumentation","src":"3605:452:2","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1146,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4071:7:2","nodeType":"FunctionDefinition","parameters":{"id":1144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1141,"mutability":"mutable","name":"to","nameLocation":"4087:2:2","nodeType":"VariableDeclaration","scope":1146,"src":"4079:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1140,"name":"address","nodeType":"ElementaryTypeName","src":"4079:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1143,"mutability":"mutable","name":"tokenId","nameLocation":"4099:7:2","nodeType":"VariableDeclaration","scope":1146,"src":"4091:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1142,"name":"uint256","nodeType":"ElementaryTypeName","src":"4091:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4078:29:2"},"returnParameters":{"id":1145,"nodeType":"ParameterList","parameters":[],"src":"4116:0:2"},"scope":1173,"src":"4062:55:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1147,"nodeType":"StructuredDocumentation","src":"4123:309:2","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":1154,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4446:17:2","nodeType":"FunctionDefinition","parameters":{"id":1152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1149,"mutability":"mutable","name":"operator","nameLocation":"4472:8:2","nodeType":"VariableDeclaration","scope":1154,"src":"4464:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1148,"name":"address","nodeType":"ElementaryTypeName","src":"4464:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1151,"mutability":"mutable","name":"_approved","nameLocation":"4487:9:2","nodeType":"VariableDeclaration","scope":1154,"src":"4482:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1150,"name":"bool","nodeType":"ElementaryTypeName","src":"4482:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4463:34:2"},"returnParameters":{"id":1153,"nodeType":"ParameterList","parameters":[],"src":"4506:0:2"},"scope":1173,"src":"4437:70:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1155,"nodeType":"StructuredDocumentation","src":"4513:139:2","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":1162,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4666:11:2","nodeType":"FunctionDefinition","parameters":{"id":1158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1157,"mutability":"mutable","name":"tokenId","nameLocation":"4686:7:2","nodeType":"VariableDeclaration","scope":1162,"src":"4678:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1156,"name":"uint256","nodeType":"ElementaryTypeName","src":"4678:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4677:17:2"},"returnParameters":{"id":1161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1160,"mutability":"mutable","name":"operator","nameLocation":"4726:8:2","nodeType":"VariableDeclaration","scope":1162,"src":"4718:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1159,"name":"address","nodeType":"ElementaryTypeName","src":"4718:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4717:18:2"},"scope":1173,"src":"4657:79:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1163,"nodeType":"StructuredDocumentation","src":"4742:138:2","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":1172,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4894:16:2","nodeType":"FunctionDefinition","parameters":{"id":1168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1165,"mutability":"mutable","name":"owner","nameLocation":"4919:5:2","nodeType":"VariableDeclaration","scope":1172,"src":"4911:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1164,"name":"address","nodeType":"ElementaryTypeName","src":"4911:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1167,"mutability":"mutable","name":"operator","nameLocation":"4934:8:2","nodeType":"VariableDeclaration","scope":1172,"src":"4926:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1166,"name":"address","nodeType":"ElementaryTypeName","src":"4926:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4910:33:2"},"returnParameters":{"id":1171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1172,"src":"4967:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1169,"name":"bool","nodeType":"ElementaryTypeName","src":"4967:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4966:6:2"},"scope":1173,"src":"4885:88:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1174,"src":"250:4725:2","usedErrors":[]}],"src":"108:4868:2"},"id":2},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1191]},"id":1192,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1175,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:3"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1176,"nodeType":"StructuredDocumentation","src":"141:152:3","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":1191,"linearizedBaseContracts":[1191],"name":"IERC721Receiver","nameLocation":"304:15:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1177,"nodeType":"StructuredDocumentation","src":"326:493:3","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":1190,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"833:16:3","nodeType":"FunctionDefinition","parameters":{"id":1186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1179,"mutability":"mutable","name":"operator","nameLocation":"867:8:3","nodeType":"VariableDeclaration","scope":1190,"src":"859:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1178,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1181,"mutability":"mutable","name":"from","nameLocation":"893:4:3","nodeType":"VariableDeclaration","scope":1190,"src":"885:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1180,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1183,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:3","nodeType":"VariableDeclaration","scope":1190,"src":"907:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1182,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1185,"mutability":"mutable","name":"data","nameLocation":"947:4:3","nodeType":"VariableDeclaration","scope":1190,"src":"932:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1184,"name":"bytes","nodeType":"ElementaryTypeName","src":"932:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:108:3"},"returnParameters":{"id":1189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1188,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1190,"src":"976:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1187,"name":"bytes4","nodeType":"ElementaryTypeName","src":"976:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"975:8:3"},"scope":1191,"src":"824:160:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1192,"src":"294:692:3","usedErrors":[]}],"src":"116:871:3"},"id":3},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC165":[1781],"IERC721":[1173],"IERC721Metadata":[1218]},"id":1219,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1193,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:4"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":1194,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1219,"sourceUnit":1174,"src":"137:24:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1196,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":1173,"src":"326:7:4"},"id":1197,"nodeType":"InheritanceSpecifier","src":"326:7:4"}],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1195,"nodeType":"StructuredDocumentation","src":"163:133:4","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":1218,"linearizedBaseContracts":[1218,1173,1781],"name":"IERC721Metadata","nameLocation":"307:15:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1198,"nodeType":"StructuredDocumentation","src":"340:58:4","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":1203,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"412:4:4","nodeType":"FunctionDefinition","parameters":{"id":1199,"nodeType":"ParameterList","parameters":[],"src":"416:2:4"},"returnParameters":{"id":1202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1201,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1203,"src":"442:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1200,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"441:15:4"},"scope":1218,"src":"403:54:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1204,"nodeType":"StructuredDocumentation","src":"463:60:4","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":1209,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"537:6:4","nodeType":"FunctionDefinition","parameters":{"id":1205,"nodeType":"ParameterList","parameters":[],"src":"543:2:4"},"returnParameters":{"id":1208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1207,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1209,"src":"569:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1206,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"568:15:4"},"scope":1218,"src":"528:56:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1210,"nodeType":"StructuredDocumentation","src":"590:90:4","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":1217,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"694:8:4","nodeType":"FunctionDefinition","parameters":{"id":1213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1212,"mutability":"mutable","name":"tokenId","nameLocation":"711:7:4","nodeType":"VariableDeclaration","scope":1217,"src":"703:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1211,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"702:17:4"},"returnParameters":{"id":1216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1215,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1217,"src":"743:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1214,"name":"string","nodeType":"ElementaryTypeName","src":"743:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"742:15:4"},"scope":1218,"src":"685:73:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1219,"src":"297:463:4","usedErrors":[]}],"src":"112:649:4"},"id":4},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1548]},"id":1549,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1220,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:5"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1221,"nodeType":"StructuredDocumentation","src":"126:67:5","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1548,"linearizedBaseContracts":[1548],"name":"Address","nameLocation":"202:7:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":1235,"nodeType":"Block","src":"1241:254:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1229,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"1465:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1465:12:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1465:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1228,"id":1234,"nodeType":"Return","src":"1458:30:5"}]},"documentation":{"id":1222,"nodeType":"StructuredDocumentation","src":"216:954:5","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1236,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:5","nodeType":"FunctionDefinition","parameters":{"id":1225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1224,"mutability":"mutable","name":"account","nameLocation":"1203:7:5","nodeType":"VariableDeclaration","scope":1236,"src":"1195:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1223,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:5"},"returnParameters":{"id":1228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1236,"src":"1235:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1226,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:5"},"scope":1548,"src":"1175:320:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1269,"nodeType":"Block","src":"2483:241:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1247,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1548","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1548","typeString":"library Address"}],"id":1246,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1245,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:5","typeDescriptions":{}}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2501:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2501:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1250,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"2526:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1244,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2493:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1254,"nodeType":"ExpressionStatement","src":"2493:73:5"},{"assignments":[1256,null],"declarations":[{"constant":false,"id":1256,"mutability":"mutable","name":"success","nameLocation":"2583:7:5","nodeType":"VariableDeclaration","scope":1269,"src":"2578:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1255,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1263,"initialValue":{"arguments":[{"hexValue":"","id":1261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1257,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"2596:9:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2596:14:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1259,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"2618:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2596:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:5"},{"expression":{"arguments":[{"id":1265,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1256,"src":"2647:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1264,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2639:78:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1268,"nodeType":"ExpressionStatement","src":"2639:78:5"}]},"documentation":{"id":1237,"nodeType":"StructuredDocumentation","src":"1501:906:5","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1270,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:5","nodeType":"FunctionDefinition","parameters":{"id":1242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1239,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:5","nodeType":"VariableDeclaration","scope":1270,"src":"2431:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1238,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1241,"mutability":"mutable","name":"amount","nameLocation":"2466:6:5","nodeType":"VariableDeclaration","scope":1270,"src":"2458:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1240,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:5"},"returnParameters":{"id":1243,"nodeType":"ParameterList","parameters":[],"src":"2483:0:5"},"scope":1548,"src":"2412:312:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1287,"nodeType":"Block","src":"3555:96:5","statements":[{"expression":{"arguments":[{"id":1281,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"3594:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1282,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"3602:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1280,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1328,1372],"referencedDeclaration":1372,"src":"3572:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3572:72:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1279,"id":1286,"nodeType":"Return","src":"3565:79:5"}]},"documentation":{"id":1271,"nodeType":"StructuredDocumentation","src":"2730:731:5","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1288,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:5","nodeType":"FunctionDefinition","parameters":{"id":1276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1273,"mutability":"mutable","name":"target","nameLocation":"3496:6:5","nodeType":"VariableDeclaration","scope":1288,"src":"3488:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1272,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1275,"mutability":"mutable","name":"data","nameLocation":"3517:4:5","nodeType":"VariableDeclaration","scope":1288,"src":"3504:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1274,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:5"},"returnParameters":{"id":1279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1278,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1288,"src":"3541:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1277,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:5"},"scope":1548,"src":"3466:185:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1307,"nodeType":"Block","src":"4020:76:5","statements":[{"expression":{"arguments":[{"id":1301,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"4059:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1302,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"4067:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1304,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"4076:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1300,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1328,1372],"referencedDeclaration":1372,"src":"4037:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4037:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1299,"id":1306,"nodeType":"Return","src":"4030:59:5"}]},"documentation":{"id":1289,"nodeType":"StructuredDocumentation","src":"3657:211:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1308,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:5","nodeType":"FunctionDefinition","parameters":{"id":1296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1291,"mutability":"mutable","name":"target","nameLocation":"3912:6:5","nodeType":"VariableDeclaration","scope":1308,"src":"3904:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1290,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1293,"mutability":"mutable","name":"data","nameLocation":"3941:4:5","nodeType":"VariableDeclaration","scope":1308,"src":"3928:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1292,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1295,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:5","nodeType":"VariableDeclaration","scope":1308,"src":"3955:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1294,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:5"},"returnParameters":{"id":1299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1298,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1308,"src":"4006:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1297,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:5"},"scope":1548,"src":"3873:223:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1327,"nodeType":"Block","src":"4601:111:5","statements":[{"expression":{"arguments":[{"id":1321,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"4640:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1322,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"4648:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1323,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"4654:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1320,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1328,1372],"referencedDeclaration":1372,"src":"4618:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4618:87:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1319,"id":1326,"nodeType":"Return","src":"4611:94:5"}]},"documentation":{"id":1309,"nodeType":"StructuredDocumentation","src":"4102:351:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1328,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:5","nodeType":"FunctionDefinition","parameters":{"id":1316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1311,"mutability":"mutable","name":"target","nameLocation":"4506:6:5","nodeType":"VariableDeclaration","scope":1328,"src":"4498:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1310,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1313,"mutability":"mutable","name":"data","nameLocation":"4535:4:5","nodeType":"VariableDeclaration","scope":1328,"src":"4522:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1312,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1315,"mutability":"mutable","name":"value","nameLocation":"4557:5:5","nodeType":"VariableDeclaration","scope":1328,"src":"4549:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1314,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:5"},"returnParameters":{"id":1319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1318,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1328,"src":"4587:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1317,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:5"},"scope":1548,"src":"4458:254:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1371,"nodeType":"Block","src":"5139:267:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1345,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1548","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1548","typeString":"library Address"}],"id":1344,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1343,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:5","typeDescriptions":{}}},"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5157:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5157:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1348,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1335,"src":"5182:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1342,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5149:81:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1352,"nodeType":"ExpressionStatement","src":"5149:81:5"},{"assignments":[1354,1356],"declarations":[{"constant":false,"id":1354,"mutability":"mutable","name":"success","nameLocation":"5246:7:5","nodeType":"VariableDeclaration","scope":1371,"src":"5241:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1353,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1356,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:5","nodeType":"VariableDeclaration","scope":1371,"src":"5255:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1355,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1363,"initialValue":{"arguments":[{"id":1361,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"5308:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1357,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1331,"src":"5282:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5282:11:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1359,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1335,"src":"5301:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5282:31:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:5"},{"expression":{"arguments":[{"id":1365,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1331,"src":"5357:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1366,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"5365:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1367,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"5374:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1368,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1337,"src":"5386:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1364,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1503,"src":"5330:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5330:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1341,"id":1370,"nodeType":"Return","src":"5323:76:5"}]},"documentation":{"id":1329,"nodeType":"StructuredDocumentation","src":"4718:237:5","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1372,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:5","nodeType":"FunctionDefinition","parameters":{"id":1338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1331,"mutability":"mutable","name":"target","nameLocation":"5008:6:5","nodeType":"VariableDeclaration","scope":1372,"src":"5000:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1330,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1333,"mutability":"mutable","name":"data","nameLocation":"5037:4:5","nodeType":"VariableDeclaration","scope":1372,"src":"5024:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1332,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1335,"mutability":"mutable","name":"value","nameLocation":"5059:5:5","nodeType":"VariableDeclaration","scope":1372,"src":"5051:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1334,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1337,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:5","nodeType":"VariableDeclaration","scope":1372,"src":"5074:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1336,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:5"},"returnParameters":{"id":1341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1340,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1372,"src":"5125:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1339,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:5"},"scope":1548,"src":"4960:446:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1388,"nodeType":"Block","src":"5683:97:5","statements":[{"expression":{"arguments":[{"id":1383,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"5719:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1384,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1377,"src":"5727:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1382,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1389,1418],"referencedDeclaration":1418,"src":"5700:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5700:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1381,"id":1387,"nodeType":"Return","src":"5693:80:5"}]},"documentation":{"id":1373,"nodeType":"StructuredDocumentation","src":"5412:166:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1389,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:5","nodeType":"FunctionDefinition","parameters":{"id":1378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1375,"mutability":"mutable","name":"target","nameLocation":"5619:6:5","nodeType":"VariableDeclaration","scope":1389,"src":"5611:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1374,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1377,"mutability":"mutable","name":"data","nameLocation":"5640:4:5","nodeType":"VariableDeclaration","scope":1389,"src":"5627:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1376,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:5"},"returnParameters":{"id":1381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1389,"src":"5669:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1379,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:5"},"scope":1548,"src":"5583:197:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1417,"nodeType":"Block","src":"6122:168:5","statements":[{"assignments":[1402,1404],"declarations":[{"constant":false,"id":1402,"mutability":"mutable","name":"success","nameLocation":"6138:7:5","nodeType":"VariableDeclaration","scope":1417,"src":"6133:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1401,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1404,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:5","nodeType":"VariableDeclaration","scope":1417,"src":"6147:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1403,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1409,"initialValue":{"arguments":[{"id":1407,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"6192:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1405,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"6174:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:5","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6174:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:5"},{"expression":{"arguments":[{"id":1411,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"6241:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1412,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1402,"src":"6249:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1413,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"6258:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1414,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"6270:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1410,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1503,"src":"6214:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6214:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1400,"id":1416,"nodeType":"Return","src":"6207:76:5"}]},"documentation":{"id":1390,"nodeType":"StructuredDocumentation","src":"5786:173:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1418,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:5","nodeType":"FunctionDefinition","parameters":{"id":1397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1392,"mutability":"mutable","name":"target","nameLocation":"6009:6:5","nodeType":"VariableDeclaration","scope":1418,"src":"6001:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1391,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1394,"mutability":"mutable","name":"data","nameLocation":"6038:4:5","nodeType":"VariableDeclaration","scope":1418,"src":"6025:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1393,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1396,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:5","nodeType":"VariableDeclaration","scope":1418,"src":"6052:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1395,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:5"},"returnParameters":{"id":1400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1399,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1418,"src":"6108:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1398,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:5"},"scope":1548,"src":"5964:326:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1434,"nodeType":"Block","src":"6566:101:5","statements":[{"expression":{"arguments":[{"id":1429,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"6604:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1430,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1423,"src":"6612:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1428,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1435,1464],"referencedDeclaration":1464,"src":"6583:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6583:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1427,"id":1433,"nodeType":"Return","src":"6576:84:5"}]},"documentation":{"id":1419,"nodeType":"StructuredDocumentation","src":"6296:168:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1435,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:5","nodeType":"FunctionDefinition","parameters":{"id":1424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1421,"mutability":"mutable","name":"target","nameLocation":"6507:6:5","nodeType":"VariableDeclaration","scope":1435,"src":"6499:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1420,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1423,"mutability":"mutable","name":"data","nameLocation":"6528:4:5","nodeType":"VariableDeclaration","scope":1435,"src":"6515:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1422,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:5"},"returnParameters":{"id":1427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1426,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1435,"src":"6552:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1425,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:5"},"scope":1548,"src":"6469:198:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1463,"nodeType":"Block","src":"7008:170:5","statements":[{"assignments":[1448,1450],"declarations":[{"constant":false,"id":1448,"mutability":"mutable","name":"success","nameLocation":"7024:7:5","nodeType":"VariableDeclaration","scope":1463,"src":"7019:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1447,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1450,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:5","nodeType":"VariableDeclaration","scope":1463,"src":"7033:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1449,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1455,"initialValue":{"arguments":[{"id":1453,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"7080:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1451,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"7060:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:5","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7060:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:5"},{"expression":{"arguments":[{"id":1457,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"7129:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1458,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"7137:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1459,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"7146:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1460,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"7158:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1456,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1503,"src":"7102:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7102:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1446,"id":1462,"nodeType":"Return","src":"7095:76:5"}]},"documentation":{"id":1436,"nodeType":"StructuredDocumentation","src":"6673:175:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1464,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:5","nodeType":"FunctionDefinition","parameters":{"id":1443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1438,"mutability":"mutable","name":"target","nameLocation":"6900:6:5","nodeType":"VariableDeclaration","scope":1464,"src":"6892:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1437,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1440,"mutability":"mutable","name":"data","nameLocation":"6929:4:5","nodeType":"VariableDeclaration","scope":1464,"src":"6916:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1439,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1442,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:5","nodeType":"VariableDeclaration","scope":1464,"src":"6943:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1441,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:5"},"returnParameters":{"id":1446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1464,"src":"6994:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1444,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:5"},"scope":1548,"src":"6853:325:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1502,"nodeType":"Block","src":"7660:434:5","statements":[{"condition":{"id":1478,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1469,"src":"7674:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1500,"nodeType":"Block","src":"8030:58:5","statements":[{"expression":{"arguments":[{"id":1496,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"8052:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1497,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"8064:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1495,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"8044:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8044:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1499,"nodeType":"ExpressionStatement","src":"8044:33:5"}]},"id":1501,"nodeType":"IfStatement","src":"7670:418:5","trueBody":{"id":1494,"nodeType":"Block","src":"7683:341:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1479,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"7701:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7701:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1491,"nodeType":"IfStatement","src":"7697:286:5","trueBody":{"id":1490,"nodeType":"Block","src":"7725:258:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":1485,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"7927:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1484,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"7916:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7916:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1483,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7908:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1489,"nodeType":"ExpressionStatement","src":"7908:60:5"}]}},{"expression":{"id":1492,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"8003:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1477,"id":1493,"nodeType":"Return","src":"7996:17:5"}]}}]},"documentation":{"id":1465,"nodeType":"StructuredDocumentation","src":"7184:277:5","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1503,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:5","nodeType":"FunctionDefinition","parameters":{"id":1474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1467,"mutability":"mutable","name":"target","nameLocation":"7519:6:5","nodeType":"VariableDeclaration","scope":1503,"src":"7511:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1466,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1469,"mutability":"mutable","name":"success","nameLocation":"7540:7:5","nodeType":"VariableDeclaration","scope":1503,"src":"7535:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1468,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1471,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:5","nodeType":"VariableDeclaration","scope":1503,"src":"7557:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1470,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1473,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:5","nodeType":"VariableDeclaration","scope":1503,"src":"7590:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1472,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:5"},"returnParameters":{"id":1477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1503,"src":"7646:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1475,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:5"},"scope":1548,"src":"7466:628:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1526,"nodeType":"Block","src":"8475:135:5","statements":[{"condition":{"id":1515,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"8489:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1524,"nodeType":"Block","src":"8546:58:5","statements":[{"expression":{"arguments":[{"id":1520,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"8568:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1521,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"8580:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1519,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"8560:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8560:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1523,"nodeType":"ExpressionStatement","src":"8560:33:5"}]},"id":1525,"nodeType":"IfStatement","src":"8485:119:5","trueBody":{"id":1518,"nodeType":"Block","src":"8498:42:5","statements":[{"expression":{"id":1516,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"8519:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1514,"id":1517,"nodeType":"Return","src":"8512:17:5"}]}}]},"documentation":{"id":1504,"nodeType":"StructuredDocumentation","src":"8100:210:5","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1527,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:5","nodeType":"FunctionDefinition","parameters":{"id":1511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1506,"mutability":"mutable","name":"success","nameLocation":"8355:7:5","nodeType":"VariableDeclaration","scope":1527,"src":"8350:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1505,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1508,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:5","nodeType":"VariableDeclaration","scope":1527,"src":"8372:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1507,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1510,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:5","nodeType":"VariableDeclaration","scope":1527,"src":"8405:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1509,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:5"},"returnParameters":{"id":1514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1513,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1527,"src":"8461:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1512,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:5"},"scope":1548,"src":"8315:295:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1546,"nodeType":"Block","src":"8699:457:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1534,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"8775:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8775:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1544,"nodeType":"Block","src":"9105:45:5","statements":[{"expression":{"arguments":[{"id":1541,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"9126:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1540,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9119:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1543,"nodeType":"ExpressionStatement","src":"9119:20:5"}]},"id":1545,"nodeType":"IfStatement","src":"8771:379:5","trueBody":{"id":1539,"nodeType":"Block","src":"8798:301:5","statements":[{"AST":{"nodeType":"YulBlock","src":"8956:133:5","statements":[{"nodeType":"YulVariableDeclaration","src":"8974:40:5","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9003:10:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8997:5:5"},"nodeType":"YulFunctionCall","src":"8997:17:5"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8978:15:5","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9042:2:5","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9046:10:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9038:3:5"},"nodeType":"YulFunctionCall","src":"9038:19:5"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9059:15:5"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9031:6:5"},"nodeType":"YulFunctionCall","src":"9031:44:5"},"nodeType":"YulExpressionStatement","src":"9031:44:5"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"berlin","externalReferences":[{"declaration":1529,"isOffset":false,"isSlot":false,"src":"9003:10:5","valueSize":1},{"declaration":1529,"isOffset":false,"isSlot":false,"src":"9046:10:5","valueSize":1}],"id":1538,"nodeType":"InlineAssembly","src":"8947:142:5"}]}}]},"id":1547,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:5","nodeType":"FunctionDefinition","parameters":{"id":1532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1529,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:5","nodeType":"VariableDeclaration","scope":1547,"src":"8633:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1528,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1531,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:5","nodeType":"VariableDeclaration","scope":1547,"src":"8658:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1530,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:5"},"returnParameters":{"id":1533,"nodeType":"ParameterList","parameters":[],"src":"8699:0:5"},"scope":1548,"src":"8616:540:5","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1549,"src":"194:8964:5","usedErrors":[]}],"src":"101:9058:5"},"id":5},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1570]},"id":1571,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1550,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:6"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1551,"nodeType":"StructuredDocumentation","src":"111:496:6","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1570,"linearizedBaseContracts":[1570],"name":"Context","nameLocation":"626:7:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":1559,"nodeType":"Block","src":"702:34:6","statements":[{"expression":{"expression":{"id":1556,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"719:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1555,"id":1558,"nodeType":"Return","src":"712:17:6"}]},"id":1560,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:6","nodeType":"FunctionDefinition","parameters":{"id":1552,"nodeType":"ParameterList","parameters":[],"src":"659:2:6"},"returnParameters":{"id":1555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1554,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1560,"src":"693:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1553,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:6"},"scope":1570,"src":"640:96:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1568,"nodeType":"Block","src":"809:32:6","statements":[{"expression":{"expression":{"id":1565,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"826:8:6","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1564,"id":1567,"nodeType":"Return","src":"819:15:6"}]},"id":1569,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:6","nodeType":"FunctionDefinition","parameters":{"id":1561,"nodeType":"ParameterList","parameters":[],"src":"759:2:6"},"returnParameters":{"id":1564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1563,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1569,"src":"793:14:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1562,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:6"},"scope":1570,"src":"742:99:6","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1571,"src":"608:235:6","usedErrors":[]}],"src":"86:758:6"},"id":6},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[2646],"Strings":[1745]},"id":1746,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1572,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:7"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1573,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1746,"sourceUnit":2647,"src":"126:25:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1574,"nodeType":"StructuredDocumentation","src":"153:34:7","text":" @dev String operations."},"fullyImplemented":true,"id":1745,"linearizedBaseContracts":[1745],"name":"Strings","nameLocation":"196:7:7","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1577,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:7","nodeType":"VariableDeclaration","scope":1745,"src":"210:54:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1575,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:7","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1580,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:7","nodeType":"VariableDeclaration","scope":1745,"src":"270:43:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1578,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:7","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1627,"nodeType":"Block","src":"486:625:7","statements":[{"id":1626,"nodeType":"UncheckedBlock","src":"496:609:7","statements":[{"assignments":[1589],"declarations":[{"constant":false,"id":1589,"mutability":"mutable","name":"length","nameLocation":"528:6:7","nodeType":"VariableDeclaration","scope":1626,"src":"520:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1588,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1596,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1592,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"548:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1590,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"537:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2646_$","typeString":"type(library Math)"}},"id":1591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2483,"src":"537:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"537:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:7"},{"assignments":[1598],"declarations":[{"constant":false,"id":1598,"mutability":"mutable","name":"buffer","nameLocation":"586:6:7","nodeType":"VariableDeclaration","scope":1626,"src":"572:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1597,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1603,"initialValue":{"arguments":[{"id":1601,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"606:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1600,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1599,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"595:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:7"},{"assignments":[1605],"declarations":[{"constant":false,"id":1605,"mutability":"mutable","name":"ptr","nameLocation":"635:3:7","nodeType":"VariableDeclaration","scope":1626,"src":"627:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1604,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1606,"nodeType":"VariableDeclarationStatement","src":"627:11:7"},{"AST":{"nodeType":"YulBlock","src":"708:67:7","statements":[{"nodeType":"YulAssignment","src":"726:35:7","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"737:6:7"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:2:7","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"753:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:7"},"nodeType":"YulFunctionCall","src":"745:15:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"733:3:7"},"nodeType":"YulFunctionCall","src":"733:28:7"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"726:3:7"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"berlin","externalReferences":[{"declaration":1598,"isOffset":false,"isSlot":false,"src":"737:6:7","valueSize":1},{"declaration":1589,"isOffset":false,"isSlot":false,"src":"753:6:7","valueSize":1},{"declaration":1605,"isOffset":false,"isSlot":false,"src":"726:3:7","valueSize":1}],"id":1607,"nodeType":"InlineAssembly","src":"699:76:7"},{"body":{"id":1622,"nodeType":"Block","src":"801:267:7","statements":[{"expression":{"id":1610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:7","subExpression":{"id":1609,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"819:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1611,"nodeType":"ExpressionStatement","src":"819:5:7"},{"AST":{"nodeType":"YulBlock","src":"902:84:7","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"932:3:7"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"946:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:7","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"942:3:7"},"nodeType":"YulFunctionCall","src":"942:14:7"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"958:8:7"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"937:4:7"},"nodeType":"YulFunctionCall","src":"937:30:7"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"924:7:7"},"nodeType":"YulFunctionCall","src":"924:44:7"},"nodeType":"YulExpressionStatement","src":"924:44:7"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"berlin","externalReferences":[{"declaration":1577,"isOffset":false,"isSlot":false,"src":"958:8:7","valueSize":1},{"declaration":1605,"isOffset":false,"isSlot":false,"src":"932:3:7","valueSize":1},{"declaration":1583,"isOffset":false,"isSlot":false,"src":"946:5:7","valueSize":1}],"id":1612,"nodeType":"InlineAssembly","src":"893:93:7"},{"expression":{"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1613,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"1003:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1616,"nodeType":"ExpressionStatement","src":"1003:11:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1617,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"1036:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1621,"nodeType":"IfStatement","src":"1032:21:7","trueBody":{"id":1620,"nodeType":"Break","src":"1048:5:7"}}]},"condition":{"hexValue":"74727565","id":1608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1623,"nodeType":"WhileStatement","src":"788:280:7"},{"expression":{"id":1624,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"1088:6:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1587,"id":1625,"nodeType":"Return","src":"1081:13:7"}]}]},"documentation":{"id":1581,"nodeType":"StructuredDocumentation","src":"320:90:7","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1628,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:7","nodeType":"FunctionDefinition","parameters":{"id":1584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1583,"mutability":"mutable","name":"value","nameLocation":"441:5:7","nodeType":"VariableDeclaration","scope":1628,"src":"433:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1582,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:7"},"returnParameters":{"id":1587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1586,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1628,"src":"471:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1585,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:7"},"scope":1745,"src":"415:696:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1647,"nodeType":"Block","src":"1290:100:7","statements":[{"id":1646,"nodeType":"UncheckedBlock","src":"1300:84:7","statements":[{"expression":{"arguments":[{"id":1637,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"1343:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1640,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"1362:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1638,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"1350:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2646_$","typeString":"type(library Math)"}},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2606,"src":"1350:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1350:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1636,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1648,1724,1744],"referencedDeclaration":1724,"src":"1331:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1331:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1635,"id":1645,"nodeType":"Return","src":"1324:49:7"}]}]},"documentation":{"id":1629,"nodeType":"StructuredDocumentation","src":"1117:94:7","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1648,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:7","nodeType":"FunctionDefinition","parameters":{"id":1632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1631,"mutability":"mutable","name":"value","nameLocation":"1245:5:7","nodeType":"VariableDeclaration","scope":1648,"src":"1237:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1630,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:7"},"returnParameters":{"id":1635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1634,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1648,"src":"1275:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1633,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:7"},"scope":1745,"src":"1216:174:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1723,"nodeType":"Block","src":"1603:347:7","statements":[{"assignments":[1659],"declarations":[{"constant":false,"id":1659,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:7","nodeType":"VariableDeclaration","scope":1723,"src":"1613:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1658,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1668,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1663,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"1649:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1660,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1635:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:7"},{"expression":{"id":1673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1669,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"1670:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1671,"indexExpression":{"hexValue":"30","id":1670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1674,"nodeType":"ExpressionStatement","src":"1670:15:7"},{"expression":{"id":1679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1675,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"1695:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1677,"indexExpression":{"hexValue":"31","id":1676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1680,"nodeType":"ExpressionStatement","src":"1695:15:7"},{"body":{"id":1709,"nodeType":"Block","src":"1765:83:7","statements":[{"expression":{"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1695,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"1779:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1697,"indexExpression":{"id":1696,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"1786:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1698,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1577,"src":"1791:8:7","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1702,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1699,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"1800:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:7","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1704,"nodeType":"ExpressionStatement","src":"1779:33:7"},{"expression":{"id":1707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1705,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"1826:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1708,"nodeType":"ExpressionStatement","src":"1826:11:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1689,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"1753:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1710,"initializationExpression":{"assignments":[1682],"declarations":[{"constant":false,"id":1682,"mutability":"mutable","name":"i","nameLocation":"1733:1:7","nodeType":"VariableDeclaration","scope":1710,"src":"1725:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1681,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1688,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1684,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"1741:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:7"},"loopExpression":{"expression":{"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:7","subExpression":{"id":1692,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"1762:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1694,"nodeType":"ExpressionStatement","src":"1760:3:7"},"nodeType":"ForStatement","src":"1720:128:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1712,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"1865:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1711,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1857:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1857:55:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1717,"nodeType":"ExpressionStatement","src":"1857:55:7"},{"expression":{"arguments":[{"id":1720,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"1936:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1719,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1718,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:7","typeDescriptions":{}}},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1929:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1657,"id":1722,"nodeType":"Return","src":"1922:21:7"}]},"documentation":{"id":1649,"nodeType":"StructuredDocumentation","src":"1396:112:7","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1724,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:7","nodeType":"FunctionDefinition","parameters":{"id":1654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1651,"mutability":"mutable","name":"value","nameLocation":"1542:5:7","nodeType":"VariableDeclaration","scope":1724,"src":"1534:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1650,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1653,"mutability":"mutable","name":"length","nameLocation":"1557:6:7","nodeType":"VariableDeclaration","scope":1724,"src":"1549:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1652,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:7"},"returnParameters":{"id":1657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1656,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1724,"src":"1588:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1655,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:7"},"scope":1745,"src":"1513:437:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1743,"nodeType":"Block","src":"2175:76:7","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1737,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"2220:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1736,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1735,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:7","typeDescriptions":{}}},"id":1738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2212:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1734,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1733,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:7","typeDescriptions":{}}},"id":1739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2204:22:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1740,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"2228:15:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1732,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1648,1724,1744],"referencedDeclaration":1724,"src":"2192:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2192:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1731,"id":1742,"nodeType":"Return","src":"2185:59:7"}]},"documentation":{"id":1725,"nodeType":"StructuredDocumentation","src":"1956:141:7","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1744,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:7","nodeType":"FunctionDefinition","parameters":{"id":1728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1727,"mutability":"mutable","name":"addr","nameLocation":"2131:4:7","nodeType":"VariableDeclaration","scope":1744,"src":"2123:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1726,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:7"},"returnParameters":{"id":1731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1730,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1744,"src":"2160:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1729,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:7"},"scope":1745,"src":"2102:149:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1746,"src":"188:2065:7","usedErrors":[]}],"src":"101:2153:7"},"id":7},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[1769],"IERC165":[1781]},"id":1770,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1747,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:8"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":1748,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1770,"sourceUnit":1782,"src":"124:23:8","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1750,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":1781,"src":"754:7:8"},"id":1751,"nodeType":"InheritanceSpecifier","src":"754:7:8"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1749,"nodeType":"StructuredDocumentation","src":"149:576:8","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":1769,"linearizedBaseContracts":[1769,1781],"name":"ERC165","nameLocation":"744:6:8","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1780],"body":{"id":1767,"nodeType":"Block","src":"920:64:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1760,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"937:11:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1762,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1781,"src":"957:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$1781_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$1781_$","typeString":"type(contract IERC165)"}],"id":1761,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"952:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$1781","typeString":"type(contract IERC165)"}},"id":1764,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1759,"id":1766,"nodeType":"Return","src":"930:47:8"}]},"documentation":{"id":1752,"nodeType":"StructuredDocumentation","src":"768:56:8","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1768,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:8","nodeType":"FunctionDefinition","overrides":{"id":1756,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:8"},"parameters":{"id":1755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1754,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:8","nodeType":"VariableDeclaration","scope":1768,"src":"856:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1753,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:8"},"returnParameters":{"id":1759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1758,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1768,"src":"914:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1757,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:8"},"scope":1769,"src":"829:155:8","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":1770,"src":"726:260:8","usedErrors":[]}],"src":"99:888:8"},"id":8},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[1781]},"id":1782,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1771,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:9"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1772,"nodeType":"StructuredDocumentation","src":"125:279:9","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1781,"linearizedBaseContracts":[1781],"name":"IERC165","nameLocation":"415:7:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1773,"nodeType":"StructuredDocumentation","src":"429:340:9","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1780,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:9","nodeType":"FunctionDefinition","parameters":{"id":1776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1775,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:9","nodeType":"VariableDeclaration","scope":1780,"src":"801:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1774,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:9"},"returnParameters":{"id":1779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1778,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1780,"src":"844:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1777,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:9"},"scope":1781,"src":"774:76:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1782,"src":"405:447:9","usedErrors":[]}],"src":"100:753:9"},"id":9},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2646]},"id":2647,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1783,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:10"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1784,"nodeType":"StructuredDocumentation","src":"128:73:10","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2646,"linearizedBaseContracts":[2646],"name":"Math","nameLocation":"210:4:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":1788,"members":[{"id":1785,"name":"Down","nameLocation":"245:4:10","nodeType":"EnumValue","src":"245:4:10"},{"id":1786,"name":"Up","nameLocation":"287:2:10","nodeType":"EnumValue","src":"287:2:10"},{"id":1787,"name":"Zero","nameLocation":"318:4:10","nodeType":"EnumValue","src":"318:4:10"}],"name":"Rounding","nameLocation":"226:8:10","nodeType":"EnumDefinition","src":"221:122:10"},{"body":{"id":1805,"nodeType":"Block","src":"480:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1798,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"497:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1799,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"501:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1802,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"509:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:10","trueExpression":{"id":1801,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"505:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1797,"id":1804,"nodeType":"Return","src":"490:20:10"}]},"documentation":{"id":1789,"nodeType":"StructuredDocumentation","src":"349:59:10","text":" @dev Returns the largest of two numbers."},"id":1806,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:10","nodeType":"FunctionDefinition","parameters":{"id":1794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1791,"mutability":"mutable","name":"a","nameLocation":"434:1:10","nodeType":"VariableDeclaration","scope":1806,"src":"426:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1790,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1793,"mutability":"mutable","name":"b","nameLocation":"445:1:10","nodeType":"VariableDeclaration","scope":1806,"src":"437:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1792,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:10"},"returnParameters":{"id":1797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1796,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1806,"src":"471:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1795,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:10"},"scope":2646,"src":"413:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1823,"nodeType":"Block","src":"655:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1816,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"672:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1817,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"676:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1820,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"684:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:10","trueExpression":{"id":1819,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"680:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1815,"id":1822,"nodeType":"Return","src":"665:20:10"}]},"documentation":{"id":1807,"nodeType":"StructuredDocumentation","src":"523:60:10","text":" @dev Returns the smallest of two numbers."},"id":1824,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:10","nodeType":"FunctionDefinition","parameters":{"id":1812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1809,"mutability":"mutable","name":"a","nameLocation":"609:1:10","nodeType":"VariableDeclaration","scope":1824,"src":"601:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1808,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1811,"mutability":"mutable","name":"b","nameLocation":"620:1:10","nodeType":"VariableDeclaration","scope":1824,"src":"612:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1810,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:10"},"returnParameters":{"id":1815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1814,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1824,"src":"646:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1813,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:10"},"scope":2646,"src":"588:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1846,"nodeType":"Block","src":"876:82:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1834,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"931:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1835,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"935:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1837,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1838,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"941:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1839,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"945:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1841,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1833,"id":1845,"nodeType":"Return","src":"923:28:10"}]},"documentation":{"id":1825,"nodeType":"StructuredDocumentation","src":"698:102:10","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1847,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:10","nodeType":"FunctionDefinition","parameters":{"id":1830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1827,"mutability":"mutable","name":"a","nameLocation":"830:1:10","nodeType":"VariableDeclaration","scope":1847,"src":"822:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1826,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1829,"mutability":"mutable","name":"b","nameLocation":"841:1:10","nodeType":"VariableDeclaration","scope":1847,"src":"833:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1828,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:10"},"returnParameters":{"id":1833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1832,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1847,"src":"867:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1831,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:10"},"scope":2646,"src":"805:153:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1871,"nodeType":"Block","src":"1228:123:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1857,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"1316:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1861,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"1330:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1864,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1865,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"1339:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:10","trueExpression":{"hexValue":"30","id":1860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1856,"id":1870,"nodeType":"Return","src":"1309:35:10"}]},"documentation":{"id":1848,"nodeType":"StructuredDocumentation","src":"964:188:10","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1872,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:10","nodeType":"FunctionDefinition","parameters":{"id":1853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1850,"mutability":"mutable","name":"a","nameLocation":"1182:1:10","nodeType":"VariableDeclaration","scope":1872,"src":"1174:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1849,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1852,"mutability":"mutable","name":"b","nameLocation":"1193:1:10","nodeType":"VariableDeclaration","scope":1872,"src":"1185:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1851,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:10"},"returnParameters":{"id":1856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1855,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1872,"src":"1219:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1854,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:10"},"scope":2646,"src":"1157:194:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1993,"nodeType":"Block","src":"1795:3797:10","statements":[{"id":1992,"nodeType":"UncheckedBlock","src":"1805:3781:10","statements":[{"assignments":[1885],"declarations":[{"constant":false,"id":1885,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:10","nodeType":"VariableDeclaration","scope":1992,"src":"2126:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1884,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1886,"nodeType":"VariableDeclarationStatement","src":"2126:13:10"},{"assignments":[1888],"declarations":[{"constant":false,"id":1888,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:10","nodeType":"VariableDeclaration","scope":1992,"src":"2198:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1887,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1889,"nodeType":"VariableDeclarationStatement","src":"2198:13:10"},{"AST":{"nodeType":"YulBlock","src":"2278:157:10","statements":[{"nodeType":"YulVariableDeclaration","src":"2296:30:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2313:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"2316:1:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2323:1:10","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2319:3:10"},"nodeType":"YulFunctionCall","src":"2319:6:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2306:6:10"},"nodeType":"YulFunctionCall","src":"2306:20:10"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2300:2:10","type":""}]},{"nodeType":"YulAssignment","src":"2343:18:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2356:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"2359:1:10"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2352:3:10"},"nodeType":"YulFunctionCall","src":"2352:9:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2343:5:10"}]},{"nodeType":"YulAssignment","src":"2378:43:10","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2395:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"2399:5:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:10"},"nodeType":"YulFunctionCall","src":"2391:14:10"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2410:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"2414:5:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2407:2:10"},"nodeType":"YulFunctionCall","src":"2407:13:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:10"},"nodeType":"YulFunctionCall","src":"2387:34:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2378:5:10"}]}]},"evmVersion":"berlin","externalReferences":[{"declaration":1885,"isOffset":false,"isSlot":false,"src":"2343:5:10","valueSize":1},{"declaration":1885,"isOffset":false,"isSlot":false,"src":"2399:5:10","valueSize":1},{"declaration":1885,"isOffset":false,"isSlot":false,"src":"2414:5:10","valueSize":1},{"declaration":1888,"isOffset":false,"isSlot":false,"src":"2378:5:10","valueSize":1},{"declaration":1875,"isOffset":false,"isSlot":false,"src":"2313:1:10","valueSize":1},{"declaration":1875,"isOffset":false,"isSlot":false,"src":"2356:1:10","valueSize":1},{"declaration":1877,"isOffset":false,"isSlot":false,"src":"2316:1:10","valueSize":1},{"declaration":1877,"isOffset":false,"isSlot":false,"src":"2359:1:10","valueSize":1}],"id":1890,"nodeType":"InlineAssembly","src":"2269:166:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1891,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"2516:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1899,"nodeType":"IfStatement","src":"2512:75:10","trueBody":{"id":1898,"nodeType":"Block","src":"2528:59:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1894,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"2553:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1895,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"2561:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1883,"id":1897,"nodeType":"Return","src":"2546:26:10"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1901,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"2697:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1902,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"2711:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1900,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2689:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2689:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1905,"nodeType":"ExpressionStatement","src":"2689:28:10"},{"assignments":[1907],"declarations":[{"constant":false,"id":1907,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:10","nodeType":"VariableDeclaration","scope":1992,"src":"2973:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1906,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1908,"nodeType":"VariableDeclarationStatement","src":"2973:17:10"},{"AST":{"nodeType":"YulBlock","src":"3013:291:10","statements":[{"nodeType":"YulAssignment","src":"3082:38:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3102:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"3105:1:10"},{"name":"denominator","nodeType":"YulIdentifier","src":"3108:11:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3095:6:10"},"nodeType":"YulFunctionCall","src":"3095:25:10"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3082:9:10"}]},{"nodeType":"YulAssignment","src":"3202:41:10","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3215:5:10"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3225:9:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"3236:5:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3222:2:10"},"nodeType":"YulFunctionCall","src":"3222:20:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3211:3:10"},"nodeType":"YulFunctionCall","src":"3211:32:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3202:5:10"}]},{"nodeType":"YulAssignment","src":"3260:30:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3273:5:10"},{"name":"remainder","nodeType":"YulIdentifier","src":"3280:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3269:3:10"},"nodeType":"YulFunctionCall","src":"3269:21:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3260:5:10"}]}]},"evmVersion":"berlin","externalReferences":[{"declaration":1879,"isOffset":false,"isSlot":false,"src":"3108:11:10","valueSize":1},{"declaration":1885,"isOffset":false,"isSlot":false,"src":"3236:5:10","valueSize":1},{"declaration":1885,"isOffset":false,"isSlot":false,"src":"3260:5:10","valueSize":1},{"declaration":1885,"isOffset":false,"isSlot":false,"src":"3273:5:10","valueSize":1},{"declaration":1888,"isOffset":false,"isSlot":false,"src":"3202:5:10","valueSize":1},{"declaration":1888,"isOffset":false,"isSlot":false,"src":"3215:5:10","valueSize":1},{"declaration":1907,"isOffset":false,"isSlot":false,"src":"3082:9:10","valueSize":1},{"declaration":1907,"isOffset":false,"isSlot":false,"src":"3225:9:10","valueSize":1},{"declaration":1907,"isOffset":false,"isSlot":false,"src":"3280:9:10","valueSize":1},{"declaration":1875,"isOffset":false,"isSlot":false,"src":"3102:1:10","valueSize":1},{"declaration":1877,"isOffset":false,"isSlot":false,"src":"3105:1:10","valueSize":1}],"id":1909,"nodeType":"InlineAssembly","src":"3004:300:10"},{"assignments":[1911],"declarations":[{"constant":false,"id":1911,"mutability":"mutable","name":"twos","nameLocation":"3619:4:10","nodeType":"VariableDeclaration","scope":1992,"src":"3611:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1910,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1919,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1912,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"3626:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:10","subExpression":{"id":1913,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"3642:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1917,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:10"},{"AST":{"nodeType":"YulBlock","src":"3681:362:10","statements":[{"nodeType":"YulAssignment","src":"3746:37:10","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3765:11:10"},{"name":"twos","nodeType":"YulIdentifier","src":"3778:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3761:3:10"},"nodeType":"YulFunctionCall","src":"3761:22:10"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3746:11:10"}]},{"nodeType":"YulAssignment","src":"3850:25:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3863:5:10"},{"name":"twos","nodeType":"YulIdentifier","src":"3870:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3859:3:10"},"nodeType":"YulFunctionCall","src":"3859:16:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3850:5:10"}]},{"nodeType":"YulAssignment","src":"3990:39:10","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:10","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4013:4:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4006:3:10"},"nodeType":"YulFunctionCall","src":"4006:12:10"},{"name":"twos","nodeType":"YulIdentifier","src":"4020:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4002:3:10"},"nodeType":"YulFunctionCall","src":"4002:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"4027:1:10","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:10"},"nodeType":"YulFunctionCall","src":"3998:31:10"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3990:4:10"}]}]},"evmVersion":"berlin","externalReferences":[{"declaration":1879,"isOffset":false,"isSlot":false,"src":"3746:11:10","valueSize":1},{"declaration":1879,"isOffset":false,"isSlot":false,"src":"3765:11:10","valueSize":1},{"declaration":1885,"isOffset":false,"isSlot":false,"src":"3850:5:10","valueSize":1},{"declaration":1885,"isOffset":false,"isSlot":false,"src":"3863:5:10","valueSize":1},{"declaration":1911,"isOffset":false,"isSlot":false,"src":"3778:4:10","valueSize":1},{"declaration":1911,"isOffset":false,"isSlot":false,"src":"3870:4:10","valueSize":1},{"declaration":1911,"isOffset":false,"isSlot":false,"src":"3990:4:10","valueSize":1},{"declaration":1911,"isOffset":false,"isSlot":false,"src":"4013:4:10","valueSize":1},{"declaration":1911,"isOffset":false,"isSlot":false,"src":"4020:4:10","valueSize":1}],"id":1920,"nodeType":"InlineAssembly","src":"3672:371:10"},{"expression":{"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1921,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"4109:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1922,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"4118:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1923,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1911,"src":"4126:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1926,"nodeType":"ExpressionStatement","src":"4109:21:10"},{"assignments":[1928],"declarations":[{"constant":false,"id":1928,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:10","nodeType":"VariableDeclaration","scope":1992,"src":"4448:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1927,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1935,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1930,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4471:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1932,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:10"},{"expression":{"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1936,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"4704:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1938,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4719:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1939,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"4733:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1943,"nodeType":"ExpressionStatement","src":"4704:36:10"},{"expression":{"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1944,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"4773:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1946,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4788:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1947,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"4802:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1951,"nodeType":"ExpressionStatement","src":"4773:36:10"},{"expression":{"id":1958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1952,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"4843:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1954,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4858:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1955,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"4872:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1959,"nodeType":"ExpressionStatement","src":"4843:36:10"},{"expression":{"id":1966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1960,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"4913:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1962,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4928:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1963,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"4942:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1967,"nodeType":"ExpressionStatement","src":"4913:36:10"},{"expression":{"id":1974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1968,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"4983:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1970,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4998:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1971,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"5012:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1975,"nodeType":"ExpressionStatement","src":"4983:36:10"},{"expression":{"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1976,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"5054:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1978,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"5069:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1979,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"5083:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1983,"nodeType":"ExpressionStatement","src":"5054:36:10"},{"expression":{"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1984,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"5524:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1985,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"5533:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1986,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"5541:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1989,"nodeType":"ExpressionStatement","src":"5524:24:10"},{"expression":{"id":1990,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"5569:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1883,"id":1991,"nodeType":"Return","src":"5562:13:10"}]}]},"documentation":{"id":1873,"nodeType":"StructuredDocumentation","src":"1357:305:10","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":1994,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:10","nodeType":"FunctionDefinition","parameters":{"id":1880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1875,"mutability":"mutable","name":"x","nameLocation":"1700:1:10","nodeType":"VariableDeclaration","scope":1994,"src":"1692:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1874,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1877,"mutability":"mutable","name":"y","nameLocation":"1719:1:10","nodeType":"VariableDeclaration","scope":1994,"src":"1711:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1876,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1879,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:10","nodeType":"VariableDeclaration","scope":1994,"src":"1730:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1878,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:10"},"returnParameters":{"id":1883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1882,"mutability":"mutable","name":"result","nameLocation":"1787:6:10","nodeType":"VariableDeclaration","scope":1994,"src":"1779:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1881,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:10"},"scope":2646,"src":"1667:3925:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2037,"nodeType":"Block","src":"5872:189:10","statements":[{"assignments":[2010],"declarations":[{"constant":false,"id":2010,"mutability":"mutable","name":"result","nameLocation":"5890:6:10","nodeType":"VariableDeclaration","scope":2037,"src":"5882:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2009,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2016,"initialValue":{"arguments":[{"id":2012,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"5906:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2013,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"5909:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2014,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"5912:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2011,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[1994,2038],"referencedDeclaration":1994,"src":"5899:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5899:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:10"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"},"id":2020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2017,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"5938:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2018,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"5950:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1788_$","typeString":"type(enum Math.Rounding)"}},"id":2019,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1786,"src":"5950:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"src":"5938:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2022,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"5972:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2023,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"5975:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2024,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"5978:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2021,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5965:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2034,"nodeType":"IfStatement","src":"5934:98:10","trueBody":{"id":2033,"nodeType":"Block","src":"5996:36:10","statements":[{"expression":{"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2029,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2010,"src":"6010:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2032,"nodeType":"ExpressionStatement","src":"6010:11:10"}]}},{"expression":{"id":2035,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2010,"src":"6048:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2008,"id":2036,"nodeType":"Return","src":"6041:13:10"}]},"documentation":{"id":1995,"nodeType":"StructuredDocumentation","src":"5598:121:10","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2038,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:10","nodeType":"FunctionDefinition","parameters":{"id":2005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1997,"mutability":"mutable","name":"x","nameLocation":"5757:1:10","nodeType":"VariableDeclaration","scope":2038,"src":"5749:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1996,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1999,"mutability":"mutable","name":"y","nameLocation":"5776:1:10","nodeType":"VariableDeclaration","scope":2038,"src":"5768:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1998,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2001,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:10","nodeType":"VariableDeclaration","scope":2038,"src":"5787:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2000,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2004,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:10","nodeType":"VariableDeclaration","scope":2038,"src":"5816:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"},"typeName":{"id":2003,"nodeType":"UserDefinedTypeName","pathNode":{"id":2002,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":1788,"src":"5816:8:10"},"referencedDeclaration":1788,"src":"5816:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:10"},"returnParameters":{"id":2008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2007,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2038,"src":"5863:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2006,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:10"},"scope":2646,"src":"5724:337:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2149,"nodeType":"Block","src":"6337:1585:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2046,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"6351:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2052,"nodeType":"IfStatement","src":"6347:45:10","trueBody":{"id":2051,"nodeType":"Block","src":"6359:33:10","statements":[{"expression":{"hexValue":"30","id":2049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2045,"id":2050,"nodeType":"Return","src":"6373:8:10"}]}},{"assignments":[2054],"declarations":[{"constant":false,"id":2054,"mutability":"mutable","name":"result","nameLocation":"7079:6:10","nodeType":"VariableDeclaration","scope":2149,"src":"7071:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2053,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2063,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2057,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"7099:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2056,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2318,2354],"referencedDeclaration":2318,"src":"7094:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7094:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2061,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:10"},{"id":2148,"nodeType":"UncheckedBlock","src":"7508:408:10","statements":[{"expression":{"id":2073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2064,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7532:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2065,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7542:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2066,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"7551:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2067,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7555:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2070,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2074,"nodeType":"ExpressionStatement","src":"7532:35:10"},{"expression":{"id":2084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2075,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7581:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2076,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7591:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2077,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"7600:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2078,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7604:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2081,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2085,"nodeType":"ExpressionStatement","src":"7581:35:10"},{"expression":{"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2086,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7630:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2087,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7640:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2088,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"7649:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2089,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7653:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2092,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2096,"nodeType":"ExpressionStatement","src":"7630:35:10"},{"expression":{"id":2106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2097,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7679:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2098,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7689:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2099,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"7698:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2100,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7702:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2103,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2107,"nodeType":"ExpressionStatement","src":"7679:35:10"},{"expression":{"id":2117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2108,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7728:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2109,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7738:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2110,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"7747:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2111,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7751:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2114,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2118,"nodeType":"ExpressionStatement","src":"7728:35:10"},{"expression":{"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2119,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7777:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2120,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7787:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2121,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"7796:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2122,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7800:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2125,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2129,"nodeType":"ExpressionStatement","src":"7777:35:10"},{"expression":{"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2130,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7826:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2131,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7836:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2132,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"7845:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2133,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7849:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2136,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2140,"nodeType":"ExpressionStatement","src":"7826:35:10"},{"expression":{"arguments":[{"id":2142,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7886:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2143,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"7894:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2144,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"7898:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2141,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"7882:3:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7882:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2045,"id":2147,"nodeType":"Return","src":"7875:30:10"}]}]},"documentation":{"id":2039,"nodeType":"StructuredDocumentation","src":"6067:208:10","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2150,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:10","nodeType":"FunctionDefinition","parameters":{"id":2042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2041,"mutability":"mutable","name":"a","nameLocation":"6302:1:10","nodeType":"VariableDeclaration","scope":2150,"src":"6294:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2040,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:10"},"returnParameters":{"id":2045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2044,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2150,"src":"6328:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2043,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:10"},"scope":2646,"src":"6280:1642:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2185,"nodeType":"Block","src":"8098:161:10","statements":[{"id":2184,"nodeType":"UncheckedBlock","src":"8108:145:10","statements":[{"assignments":[2162],"declarations":[{"constant":false,"id":2162,"mutability":"mutable","name":"result","nameLocation":"8140:6:10","nodeType":"VariableDeclaration","scope":2184,"src":"8132:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2161,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2166,"initialValue":{"arguments":[{"id":2164,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"8154:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2163,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2150,2186],"referencedDeclaration":2150,"src":"8149:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8149:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2167,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"8177:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"},"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2168,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"8187:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2169,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"8199:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1788_$","typeString":"type(enum Math.Rounding)"}},"id":2170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1786,"src":"8199:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"src":"8187:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2172,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"8214:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2173,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"8223:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2175,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"8232:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:10","trueExpression":{"hexValue":"31","id":2178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2181,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2160,"id":2183,"nodeType":"Return","src":"8170:72:10"}]}]},"documentation":{"id":2151,"nodeType":"StructuredDocumentation","src":"7928:89:10","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2186,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:10","nodeType":"FunctionDefinition","parameters":{"id":2157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2153,"mutability":"mutable","name":"a","nameLocation":"8044:1:10","nodeType":"VariableDeclaration","scope":2186,"src":"8036:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2152,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2156,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:10","nodeType":"VariableDeclaration","scope":2186,"src":"8047:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"},"typeName":{"id":2155,"nodeType":"UserDefinedTypeName","pathNode":{"id":2154,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":1788,"src":"8047:8:10"},"referencedDeclaration":1788,"src":"8047:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:10"},"returnParameters":{"id":2160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2159,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2186,"src":"8089:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2158,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:10"},"scope":2646,"src":"8022:237:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2317,"nodeType":"Block","src":"8444:922:10","statements":[{"assignments":[2195],"declarations":[{"constant":false,"id":2195,"mutability":"mutable","name":"result","nameLocation":"8462:6:10","nodeType":"VariableDeclaration","scope":2317,"src":"8454:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2194,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2197,"initialValue":{"hexValue":"30","id":2196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:10"},{"id":2314,"nodeType":"UncheckedBlock","src":"8482:855:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2198,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"8510:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2212,"nodeType":"IfStatement","src":"8506:99:10","trueBody":{"id":2211,"nodeType":"Block","src":"8528:77:10","statements":[{"expression":{"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2203,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"8546:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2206,"nodeType":"ExpressionStatement","src":"8546:13:10"},{"expression":{"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2207,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"8577:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2210,"nodeType":"ExpressionStatement","src":"8577:13:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2213,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"8622:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2227,"nodeType":"IfStatement","src":"8618:96:10","trueBody":{"id":2226,"nodeType":"Block","src":"8639:75:10","statements":[{"expression":{"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2218,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"8657:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2221,"nodeType":"ExpressionStatement","src":"8657:12:10"},{"expression":{"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2222,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"8687:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2225,"nodeType":"ExpressionStatement","src":"8687:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2228,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"8731:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2242,"nodeType":"IfStatement","src":"8727:96:10","trueBody":{"id":2241,"nodeType":"Block","src":"8748:75:10","statements":[{"expression":{"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2233,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"8766:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2236,"nodeType":"ExpressionStatement","src":"8766:12:10"},{"expression":{"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2237,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"8796:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2240,"nodeType":"ExpressionStatement","src":"8796:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2243,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"8840:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2257,"nodeType":"IfStatement","src":"8836:96:10","trueBody":{"id":2256,"nodeType":"Block","src":"8857:75:10","statements":[{"expression":{"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2248,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"8875:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2251,"nodeType":"ExpressionStatement","src":"8875:12:10"},{"expression":{"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2252,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"8905:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2255,"nodeType":"ExpressionStatement","src":"8905:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2258,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"8949:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2272,"nodeType":"IfStatement","src":"8945:93:10","trueBody":{"id":2271,"nodeType":"Block","src":"8965:73:10","statements":[{"expression":{"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2263,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"8983:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2266,"nodeType":"ExpressionStatement","src":"8983:11:10"},{"expression":{"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2267,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"9012:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2270,"nodeType":"ExpressionStatement","src":"9012:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2273,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"9055:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2287,"nodeType":"IfStatement","src":"9051:93:10","trueBody":{"id":2286,"nodeType":"Block","src":"9071:73:10","statements":[{"expression":{"id":2280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2278,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"9089:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2281,"nodeType":"ExpressionStatement","src":"9089:11:10"},{"expression":{"id":2284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2282,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"9118:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2285,"nodeType":"ExpressionStatement","src":"9118:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2288,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"9161:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2302,"nodeType":"IfStatement","src":"9157:93:10","trueBody":{"id":2301,"nodeType":"Block","src":"9177:73:10","statements":[{"expression":{"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2293,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"9195:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2296,"nodeType":"ExpressionStatement","src":"9195:11:10"},{"expression":{"id":2299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2297,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"9224:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2300,"nodeType":"ExpressionStatement","src":"9224:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2303,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"9267:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2313,"nodeType":"IfStatement","src":"9263:64:10","trueBody":{"id":2312,"nodeType":"Block","src":"9283:44:10","statements":[{"expression":{"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2308,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"9301:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2311,"nodeType":"ExpressionStatement","src":"9301:11:10"}]}}]},{"expression":{"id":2315,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"9353:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2193,"id":2316,"nodeType":"Return","src":"9346:13:10"}]},"documentation":{"id":2187,"nodeType":"StructuredDocumentation","src":"8265:113:10","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2318,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:10","nodeType":"FunctionDefinition","parameters":{"id":2190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2189,"mutability":"mutable","name":"value","nameLocation":"8405:5:10","nodeType":"VariableDeclaration","scope":2318,"src":"8397:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2188,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:10"},"returnParameters":{"id":2193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2318,"src":"8435:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2191,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:10"},"scope":2646,"src":"8383:983:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2353,"nodeType":"Block","src":"9599:165:10","statements":[{"id":2352,"nodeType":"UncheckedBlock","src":"9609:149:10","statements":[{"assignments":[2330],"declarations":[{"constant":false,"id":2330,"mutability":"mutable","name":"result","nameLocation":"9641:6:10","nodeType":"VariableDeclaration","scope":2352,"src":"9633:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2329,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2334,"initialValue":{"arguments":[{"id":2332,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"9655:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2331,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2318,2354],"referencedDeclaration":2318,"src":"9650:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9650:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2335,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2330,"src":"9682:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"},"id":2339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2336,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"9692:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2337,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"9704:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1788_$","typeString":"type(enum Math.Rounding)"}},"id":2338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1786,"src":"9704:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"src":"9692:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2341,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2330,"src":"9724:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2343,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"9733:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:10","trueExpression":{"hexValue":"31","id":2346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2349,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2328,"id":2351,"nodeType":"Return","src":"9675:72:10"}]}]},"documentation":{"id":2319,"nodeType":"StructuredDocumentation","src":"9372:142:10","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2354,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:10","nodeType":"FunctionDefinition","parameters":{"id":2325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2321,"mutability":"mutable","name":"value","nameLocation":"9541:5:10","nodeType":"VariableDeclaration","scope":2354,"src":"9533:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2320,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2324,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:10","nodeType":"VariableDeclaration","scope":2354,"src":"9548:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"},"typeName":{"id":2323,"nodeType":"UserDefinedTypeName","pathNode":{"id":2322,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":1788,"src":"9548:8:10"},"referencedDeclaration":1788,"src":"9548:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:10"},"returnParameters":{"id":2328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2354,"src":"9590:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2326,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:10"},"scope":2646,"src":"9519:245:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2482,"nodeType":"Block","src":"9951:828:10","statements":[{"assignments":[2363],"declarations":[{"constant":false,"id":2363,"mutability":"mutable","name":"result","nameLocation":"9969:6:10","nodeType":"VariableDeclaration","scope":2482,"src":"9961:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2362,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2365,"initialValue":{"hexValue":"30","id":2364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:10"},{"id":2479,"nodeType":"UncheckedBlock","src":"9989:761:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2366,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"10017:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2369,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2382,"nodeType":"IfStatement","src":"10013:99:10","trueBody":{"id":2381,"nodeType":"Block","src":"10034:78:10","statements":[{"expression":{"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2371,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"10052:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2374,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2376,"nodeType":"ExpressionStatement","src":"10052:15:10"},{"expression":{"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2377,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"10085:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2380,"nodeType":"ExpressionStatement","src":"10085:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2383,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"10129:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2386,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2399,"nodeType":"IfStatement","src":"10125:99:10","trueBody":{"id":2398,"nodeType":"Block","src":"10146:78:10","statements":[{"expression":{"id":2392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2388,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"10164:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2391,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2393,"nodeType":"ExpressionStatement","src":"10164:15:10"},{"expression":{"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2394,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"10197:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2397,"nodeType":"ExpressionStatement","src":"10197:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2400,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"10241:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2403,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2416,"nodeType":"IfStatement","src":"10237:99:10","trueBody":{"id":2415,"nodeType":"Block","src":"10258:78:10","statements":[{"expression":{"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2405,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"10276:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2408,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2410,"nodeType":"ExpressionStatement","src":"10276:15:10"},{"expression":{"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2411,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"10309:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2414,"nodeType":"ExpressionStatement","src":"10309:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2417,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"10353:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2420,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2433,"nodeType":"IfStatement","src":"10349:96:10","trueBody":{"id":2432,"nodeType":"Block","src":"10369:76:10","statements":[{"expression":{"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2422,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"10387:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2425,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2427,"nodeType":"ExpressionStatement","src":"10387:14:10"},{"expression":{"id":2430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2428,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"10419:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2431,"nodeType":"ExpressionStatement","src":"10419:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2434,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"10462:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2437,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2450,"nodeType":"IfStatement","src":"10458:96:10","trueBody":{"id":2449,"nodeType":"Block","src":"10478:76:10","statements":[{"expression":{"id":2443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2439,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"10496:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2442,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2444,"nodeType":"ExpressionStatement","src":"10496:14:10"},{"expression":{"id":2447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2445,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"10528:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2448,"nodeType":"ExpressionStatement","src":"10528:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2451,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"10571:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2454,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2467,"nodeType":"IfStatement","src":"10567:96:10","trueBody":{"id":2466,"nodeType":"Block","src":"10587:76:10","statements":[{"expression":{"id":2460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2456,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"10605:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2459,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2461,"nodeType":"ExpressionStatement","src":"10605:14:10"},{"expression":{"id":2464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2462,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"10637:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2465,"nodeType":"ExpressionStatement","src":"10637:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2468,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"10680:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2471,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2478,"nodeType":"IfStatement","src":"10676:64:10","trueBody":{"id":2477,"nodeType":"Block","src":"10696:44:10","statements":[{"expression":{"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2473,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"10714:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2476,"nodeType":"ExpressionStatement","src":"10714:11:10"}]}}]},{"expression":{"id":2480,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"10766:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2361,"id":2481,"nodeType":"Return","src":"10759:13:10"}]},"documentation":{"id":2355,"nodeType":"StructuredDocumentation","src":"9770:114:10","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2483,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:10","nodeType":"FunctionDefinition","parameters":{"id":2358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2357,"mutability":"mutable","name":"value","nameLocation":"9912:5:10","nodeType":"VariableDeclaration","scope":2483,"src":"9904:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2356,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:10"},"returnParameters":{"id":2361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2360,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2483,"src":"9942:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2359,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:10"},"scope":2646,"src":"9889:890:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2518,"nodeType":"Block","src":"11014:165:10","statements":[{"id":2517,"nodeType":"UncheckedBlock","src":"11024:149:10","statements":[{"assignments":[2495],"declarations":[{"constant":false,"id":2495,"mutability":"mutable","name":"result","nameLocation":"11056:6:10","nodeType":"VariableDeclaration","scope":2517,"src":"11048:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2494,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2499,"initialValue":{"arguments":[{"id":2497,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"11071:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2496,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2483,2519],"referencedDeclaration":2483,"src":"11065:5:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11065:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2500,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2495,"src":"11098:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"},"id":2504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2501,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"11108:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2502,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"11120:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1788_$","typeString":"type(enum Math.Rounding)"}},"id":2503,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1786,"src":"11120:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"src":"11108:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2506,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2495,"src":"11139:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2508,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"11148:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:10","trueExpression":{"hexValue":"31","id":2511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2514,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2493,"id":2516,"nodeType":"Return","src":"11091:71:10"}]}]},"documentation":{"id":2484,"nodeType":"StructuredDocumentation","src":"10785:143:10","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2519,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:10","nodeType":"FunctionDefinition","parameters":{"id":2490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2486,"mutability":"mutable","name":"value","nameLocation":"10956:5:10","nodeType":"VariableDeclaration","scope":2519,"src":"10948:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2485,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2489,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:10","nodeType":"VariableDeclaration","scope":2519,"src":"10963:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"},"typeName":{"id":2488,"nodeType":"UserDefinedTypeName","pathNode":{"id":2487,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":1788,"src":"10963:8:10"},"referencedDeclaration":1788,"src":"10963:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:10"},"returnParameters":{"id":2493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2492,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2519,"src":"11005:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2491,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:10"},"scope":2646,"src":"10933:246:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2605,"nodeType":"Block","src":"11493:600:10","statements":[{"assignments":[2528],"declarations":[{"constant":false,"id":2528,"mutability":"mutable","name":"result","nameLocation":"11511:6:10","nodeType":"VariableDeclaration","scope":2605,"src":"11503:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2527,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2530,"initialValue":{"hexValue":"30","id":2529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:10"},{"id":2602,"nodeType":"UncheckedBlock","src":"11531:533:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2531,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"11559:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2545,"nodeType":"IfStatement","src":"11555:98:10","trueBody":{"id":2544,"nodeType":"Block","src":"11577:76:10","statements":[{"expression":{"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2536,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"11595:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2539,"nodeType":"ExpressionStatement","src":"11595:13:10"},{"expression":{"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2540,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"11626:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2543,"nodeType":"ExpressionStatement","src":"11626:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2546,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"11670:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2560,"nodeType":"IfStatement","src":"11666:95:10","trueBody":{"id":2559,"nodeType":"Block","src":"11687:74:10","statements":[{"expression":{"id":2553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2551,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"11705:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2554,"nodeType":"ExpressionStatement","src":"11705:12:10"},{"expression":{"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2555,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"11735:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2558,"nodeType":"ExpressionStatement","src":"11735:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2561,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"11778:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2575,"nodeType":"IfStatement","src":"11774:95:10","trueBody":{"id":2574,"nodeType":"Block","src":"11795:74:10","statements":[{"expression":{"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2566,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"11813:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2569,"nodeType":"ExpressionStatement","src":"11813:12:10"},{"expression":{"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2570,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"11843:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2573,"nodeType":"ExpressionStatement","src":"11843:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2576,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"11886:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2590,"nodeType":"IfStatement","src":"11882:95:10","trueBody":{"id":2589,"nodeType":"Block","src":"11903:74:10","statements":[{"expression":{"id":2583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2581,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"11921:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2584,"nodeType":"ExpressionStatement","src":"11921:12:10"},{"expression":{"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2585,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"11951:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2588,"nodeType":"ExpressionStatement","src":"11951:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2591,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"11994:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2601,"nodeType":"IfStatement","src":"11990:64:10","trueBody":{"id":2600,"nodeType":"Block","src":"12010:44:10","statements":[{"expression":{"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2596,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"12028:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2599,"nodeType":"ExpressionStatement","src":"12028:11:10"}]}}]},{"expression":{"id":2603,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"12080:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2526,"id":2604,"nodeType":"Return","src":"12073:13:10"}]},"documentation":{"id":2520,"nodeType":"StructuredDocumentation","src":"11185:240:10","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2606,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:10","nodeType":"FunctionDefinition","parameters":{"id":2523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2522,"mutability":"mutable","name":"value","nameLocation":"11454:5:10","nodeType":"VariableDeclaration","scope":2606,"src":"11446:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2521,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:10"},"returnParameters":{"id":2526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2525,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2606,"src":"11484:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2524,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:10"},"scope":2646,"src":"11430:663:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2644,"nodeType":"Block","src":"12329:173:10","statements":[{"id":2643,"nodeType":"UncheckedBlock","src":"12339:157:10","statements":[{"assignments":[2618],"declarations":[{"constant":false,"id":2618,"mutability":"mutable","name":"result","nameLocation":"12371:6:10","nodeType":"VariableDeclaration","scope":2643,"src":"12363:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2617,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2622,"initialValue":{"arguments":[{"id":2620,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"12387:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2619,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2606,2645],"referencedDeclaration":2606,"src":"12380:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12380:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2623,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"12414:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"},"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2624,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2612,"src":"12424:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2625,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"12436:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1788_$","typeString":"type(enum Math.Rounding)"}},"id":2626,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1786,"src":"12436:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"src":"12424:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2629,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"12457:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":2630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2632,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2634,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"12471:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:10","trueExpression":{"hexValue":"31","id":2637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2640,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2616,"id":2642,"nodeType":"Return","src":"12407:78:10"}]}]},"documentation":{"id":2607,"nodeType":"StructuredDocumentation","src":"12099:143:10","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2645,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:10","nodeType":"FunctionDefinition","parameters":{"id":2613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2609,"mutability":"mutable","name":"value","nameLocation":"12271:5:10","nodeType":"VariableDeclaration","scope":2645,"src":"12263:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2608,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2612,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:10","nodeType":"VariableDeclaration","scope":2645,"src":"12278:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"},"typeName":{"id":2611,"nodeType":"UserDefinedTypeName","pathNode":{"id":2610,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":1788,"src":"12278:8:10"},"referencedDeclaration":1788,"src":"12278:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:10"},"returnParameters":{"id":2616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2615,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2645,"src":"12320:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2614,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:10"},"scope":2646,"src":"12247:255:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2647,"src":"202:12302:10","usedErrors":[]}],"src":"103:12402:10"},"id":10},"contracts/GreenDAO.sol":{"ast":{"absolutePath":"contracts/GreenDAO.sol","exportedSymbols":{"Address":[1548],"Context":[1570],"ERC165":[1769],"ERC721":[1057],"GreenDAO":[3424],"IERC165":[1781],"IERC721":[1173],"IERC721Metadata":[1218],"IERC721Receiver":[1191],"IONFT721":[3622],"IONFT721Core":[3687],"Math":[2646],"Strings":[1745]},"id":3425,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2648,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:11"},{"absolutePath":"contracts/extensions/IONFT721.sol","file":"./extensions/IONFT721.sol","id":2649,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3425,"sourceUnit":3623,"src":"57:35:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":2650,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3425,"sourceUnit":1058,"src":"93:57:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":2651,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3425,"sourceUnit":1746,"src":"151:51:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2652,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1057,"src":"225:6:11"},"id":2653,"nodeType":"InheritanceSpecifier","src":"225:6:11"},{"baseName":{"id":2654,"name":"IONFT721","nodeType":"IdentifierPath","referencedDeclaration":3622,"src":"233:8:11"},"id":2655,"nodeType":"InheritanceSpecifier","src":"233:8:11"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3424,"linearizedBaseContracts":[3424,3622,1057,1218,1173,1769,1781,1570],"name":"GreenDAO","nameLocation":"213:8:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":2666,"nodeType":"Block","src":"353:2:11","statements":[]},"id":2667,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2662,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"337:5:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2663,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2659,"src":"344:7:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":2664,"kind":"baseConstructorSpecifier","modifierName":{"id":2661,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1057,"src":"330:6:11"},"nodeType":"ModifierInvocation","src":"330:22:11"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2657,"mutability":"mutable","name":"_name","nameLocation":"287:5:11","nodeType":"VariableDeclaration","scope":2667,"src":"273:19:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2656,"name":"string","nodeType":"ElementaryTypeName","src":"273:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2659,"mutability":"mutable","name":"_symbol","nameLocation":"316:7:11","nodeType":"VariableDeclaration","scope":2667,"src":"302:21:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2658,"name":"string","nodeType":"ElementaryTypeName","src":"302:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"263:66:11"},"returnParameters":{"id":2665,"nodeType":"ParameterList","parameters":[],"src":"353:0:11"},"scope":3424,"src":"252:103:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"canonicalName":"GreenDAO.dao_uri_struct","id":2674,"members":[{"constant":false,"id":2669,"mutability":"mutable","name":"dao_wallet","nameLocation":"402:10:11","nodeType":"VariableDeclaration","scope":2674,"src":"395:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2668,"name":"string","nodeType":"ElementaryTypeName","src":"395:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2671,"mutability":"mutable","name":"dao_uri","nameLocation":"429:7:11","nodeType":"VariableDeclaration","scope":2674,"src":"422:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2670,"name":"string","nodeType":"ElementaryTypeName","src":"422:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2673,"mutability":"mutable","name":"finished","nameLocation":"453:8:11","nodeType":"VariableDeclaration","scope":2674,"src":"446:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2672,"name":"string","nodeType":"ElementaryTypeName","src":"446:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"dao_uri_struct","nameLocation":"370:14:11","nodeType":"StructDefinition","scope":3424,"src":"363:105:11","visibility":"public"},{"canonicalName":"GreenDAO.goal_uri_struct","id":2679,"members":[{"constant":false,"id":2676,"mutability":"mutable","name":"dao_id","nameLocation":"514:6:11","nodeType":"VariableDeclaration","scope":2679,"src":"506:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2675,"name":"uint256","nodeType":"ElementaryTypeName","src":"506:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2678,"mutability":"mutable","name":"goal_uri","nameLocation":"537:8:11","nodeType":"VariableDeclaration","scope":2679,"src":"530:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2677,"name":"string","nodeType":"ElementaryTypeName","src":"530:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"goal_uri_struct","nameLocation":"480:15:11","nodeType":"StructDefinition","scope":3424,"src":"473:79:11","visibility":"public"},{"canonicalName":"GreenDAO.ideas_uri_struct","id":2684,"members":[{"constant":false,"id":2681,"mutability":"mutable","name":"goal_id","nameLocation":"600:7:11","nodeType":"VariableDeclaration","scope":2684,"src":"592:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2680,"name":"uint256","nodeType":"ElementaryTypeName","src":"592:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2683,"mutability":"mutable","name":"ideas_uri","nameLocation":"624:9:11","nodeType":"VariableDeclaration","scope":2684,"src":"617:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2682,"name":"string","nodeType":"ElementaryTypeName","src":"617:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"ideas_uri_struct","nameLocation":"565:16:11","nodeType":"StructDefinition","scope":3424,"src":"558:82:11","visibility":"public"},{"canonicalName":"GreenDAO.goal_ideas_votes_struct","id":2691,"members":[{"constant":false,"id":2686,"mutability":"mutable","name":"goal_id","nameLocation":"695:7:11","nodeType":"VariableDeclaration","scope":2691,"src":"687:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2685,"name":"uint256","nodeType":"ElementaryTypeName","src":"687:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2688,"mutability":"mutable","name":"ideas_id","nameLocation":"720:8:11","nodeType":"VariableDeclaration","scope":2691,"src":"712:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2687,"name":"uint256","nodeType":"ElementaryTypeName","src":"712:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2690,"mutability":"mutable","name":"wallet","nameLocation":"745:6:11","nodeType":"VariableDeclaration","scope":2691,"src":"738:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2689,"name":"string","nodeType":"ElementaryTypeName","src":"738:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"goal_ideas_votes_struct","nameLocation":"653:23:11","nodeType":"StructDefinition","scope":3424,"src":"646:112:11","visibility":"public"},{"constant":false,"id":2693,"mutability":"mutable","name":"_dao_ids","nameLocation":"780:8:11","nodeType":"VariableDeclaration","scope":3424,"src":"764:24:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2692,"name":"uint256","nodeType":"ElementaryTypeName","src":"764:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2695,"mutability":"mutable","name":"_goal_ids","nameLocation":"810:9:11","nodeType":"VariableDeclaration","scope":3424,"src":"794:25:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2694,"name":"uint256","nodeType":"ElementaryTypeName","src":"794:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2697,"mutability":"mutable","name":"_ideas_ids","nameLocation":"841:10:11","nodeType":"VariableDeclaration","scope":3424,"src":"825:26:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2696,"name":"uint256","nodeType":"ElementaryTypeName","src":"825:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2699,"mutability":"mutable","name":"_ideas_vote_ids","nameLocation":"873:15:11","nodeType":"VariableDeclaration","scope":3424,"src":"857:31:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2698,"name":"uint256","nodeType":"ElementaryTypeName","src":"857:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"functionSelector":"27a568b9","id":2704,"mutability":"mutable","name":"_dao_uris","nameLocation":"936:9:11","nodeType":"VariableDeclaration","scope":3424,"src":"894:51:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_dao_uri_struct_$2674_storage_$","typeString":"mapping(uint256 => struct GreenDAO.dao_uri_struct)"},"typeName":{"id":2703,"keyType":{"id":2700,"name":"uint256","nodeType":"ElementaryTypeName","src":"902:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"894:34:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_dao_uri_struct_$2674_storage_$","typeString":"mapping(uint256 => struct GreenDAO.dao_uri_struct)"},"valueType":{"id":2702,"nodeType":"UserDefinedTypeName","pathNode":{"id":2701,"name":"dao_uri_struct","nodeType":"IdentifierPath","referencedDeclaration":2674,"src":"913:14:11"},"referencedDeclaration":2674,"src":"913:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_dao_uri_struct_$2674_storage_ptr","typeString":"struct GreenDAO.dao_uri_struct"}}},"visibility":"public"},{"constant":false,"id":2709,"mutability":"mutable","name":"_goal_uris","nameLocation":"1084:10:11","nodeType":"VariableDeclaration","scope":3424,"src":"1040:54:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_goal_uri_struct_$2679_storage_$","typeString":"mapping(uint256 => struct GreenDAO.goal_uri_struct)"},"typeName":{"id":2708,"keyType":{"id":2705,"name":"uint256","nodeType":"ElementaryTypeName","src":"1048:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1040:35:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_goal_uri_struct_$2679_storage_$","typeString":"mapping(uint256 => struct GreenDAO.goal_uri_struct)"},"valueType":{"id":2707,"nodeType":"UserDefinedTypeName","pathNode":{"id":2706,"name":"goal_uri_struct","nodeType":"IdentifierPath","referencedDeclaration":2679,"src":"1059:15:11"},"referencedDeclaration":2679,"src":"1059:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_goal_uri_struct_$2679_storage_ptr","typeString":"struct GreenDAO.goal_uri_struct"}}},"visibility":"private"},{"constant":false,"functionSelector":"468d0c80","id":2714,"mutability":"mutable","name":"_ideas_uris","nameLocation":"1214:11:11","nodeType":"VariableDeclaration","scope":3424,"src":"1170:55:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ideas_uri_struct_$2684_storage_$","typeString":"mapping(uint256 => struct GreenDAO.ideas_uri_struct)"},"typeName":{"id":2713,"keyType":{"id":2710,"name":"uint256","nodeType":"ElementaryTypeName","src":"1178:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1170:36:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ideas_uri_struct_$2684_storage_$","typeString":"mapping(uint256 => struct GreenDAO.ideas_uri_struct)"},"valueType":{"id":2712,"nodeType":"UserDefinedTypeName","pathNode":{"id":2711,"name":"ideas_uri_struct","nodeType":"IdentifierPath","referencedDeclaration":2684,"src":"1189:16:11"},"referencedDeclaration":2684,"src":"1189:16:11","typeDescriptions":{"typeIdentifier":"t_struct$_ideas_uri_struct_$2684_storage_ptr","typeString":"struct GreenDAO.ideas_uri_struct"}}},"visibility":"public"},{"constant":false,"functionSelector":"1ba44c4c","id":2719,"mutability":"mutable","name":"all_goal_ideas_votes","nameLocation":"1353:20:11","nodeType":"VariableDeclaration","scope":3424,"src":"1302:71:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_goal_ideas_votes_struct_$2691_storage_$","typeString":"mapping(uint256 => struct GreenDAO.goal_ideas_votes_struct)"},"typeName":{"id":2718,"keyType":{"id":2715,"name":"uint256","nodeType":"ElementaryTypeName","src":"1310:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1302:43:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_goal_ideas_votes_struct_$2691_storage_$","typeString":"mapping(uint256 => struct GreenDAO.goal_ideas_votes_struct)"},"valueType":{"id":2717,"nodeType":"UserDefinedTypeName","pathNode":{"id":2716,"name":"goal_ideas_votes_struct","nodeType":"IdentifierPath","referencedDeclaration":2691,"src":"1321:23:11"},"referencedDeclaration":2691,"src":"1321:23:11","typeDescriptions":{"typeIdentifier":"t_struct$_goal_ideas_votes_struct_$2691_storage_ptr","typeString":"struct GreenDAO.goal_ideas_votes_struct"}}},"visibility":"public"},{"body":{"id":2743,"nodeType":"Block","src":"1576:167:11","statements":[{"expression":{"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2728,"name":"_dao_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"1622:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_dao_uri_struct_$2674_storage_$","typeString":"mapping(uint256 => struct GreenDAO.dao_uri_struct storage ref)"}},"id":2730,"indexExpression":{"id":2729,"name":"_dao_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2693,"src":"1632:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1622:19:11","typeDescriptions":{"typeIdentifier":"t_struct$_dao_uri_struct_$2674_storage","typeString":"struct GreenDAO.dao_uri_struct storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2732,"name":"_dao_wallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"1659:11:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2733,"name":"_dao_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"1672:8:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"46616c7365","id":2734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:7:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_a2dad57cc42b2b0635f411233812e479f7896335ae3219ac4ef034f5a34c3f0b","typeString":"literal_string \"False\""},"value":"False"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_a2dad57cc42b2b0635f411233812e479f7896335ae3219ac4ef034f5a34c3f0b","typeString":"literal_string \"False\""}],"id":2731,"name":"dao_uri_struct","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"1644:14:11","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_dao_uri_struct_$2674_storage_ptr_$","typeString":"type(struct GreenDAO.dao_uri_struct storage pointer)"}},"id":2735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1644:46:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_dao_uri_struct_$2674_memory_ptr","typeString":"struct GreenDAO.dao_uri_struct memory"}},"src":"1622:68:11","typeDescriptions":{"typeIdentifier":"t_struct$_dao_uri_struct_$2674_storage","typeString":"struct GreenDAO.dao_uri_struct storage ref"}},"id":2737,"nodeType":"ExpressionStatement","src":"1622:68:11"},{"expression":{"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1700:10:11","subExpression":{"id":2738,"name":"_dao_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2693,"src":"1700:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2740,"nodeType":"ExpressionStatement","src":"1700:10:11"},{"expression":{"id":2741,"name":"_dao_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2693,"src":"1728:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2727,"id":2742,"nodeType":"Return","src":"1721:15:11"}]},"functionSelector":"c4c2e364","id":2744,"implemented":true,"kind":"function","modifiers":[],"name":"create_dao","nameLocation":"1469:10:11","nodeType":"FunctionDefinition","parameters":{"id":2724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2721,"mutability":"mutable","name":"_dao_wallet","nameLocation":"1494:11:11","nodeType":"VariableDeclaration","scope":2744,"src":"1480:25:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2720,"name":"string","nodeType":"ElementaryTypeName","src":"1480:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2723,"mutability":"mutable","name":"_dao_uri","nameLocation":"1521:8:11","nodeType":"VariableDeclaration","scope":2744,"src":"1507:22:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2722,"name":"string","nodeType":"ElementaryTypeName","src":"1507:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1479:51:11"},"returnParameters":{"id":2727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2726,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2744,"src":"1563:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2725,"name":"uint256","nodeType":"ElementaryTypeName","src":"1563:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1562:9:11"},"scope":3424,"src":"1460:283:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2767,"nodeType":"Block","src":"1871:143:11","statements":[{"expression":{"id":2758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":2753,"name":"_dao_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"1917:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_dao_uri_struct_$2674_storage_$","typeString":"mapping(uint256 => struct GreenDAO.dao_uri_struct storage ref)"}},"id":2755,"indexExpression":{"id":2754,"name":"_dao_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2746,"src":"1927:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1917:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_dao_uri_struct_$2674_storage","typeString":"struct GreenDAO.dao_uri_struct storage ref"}},"id":2756,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"dao_wallet","nodeType":"MemberAccess","referencedDeclaration":2669,"src":"1917:29:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2757,"name":"_dao_wallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"1949:11:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1917:43:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2759,"nodeType":"ExpressionStatement","src":"1917:43:11"},{"expression":{"id":2765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":2760,"name":"_dao_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"1970:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_dao_uri_struct_$2674_storage_$","typeString":"mapping(uint256 => struct GreenDAO.dao_uri_struct storage ref)"}},"id":2762,"indexExpression":{"id":2761,"name":"_dao_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2746,"src":"1980:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1970:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_dao_uri_struct_$2674_storage","typeString":"struct GreenDAO.dao_uri_struct storage ref"}},"id":2763,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"dao_uri","nodeType":"MemberAccess","referencedDeclaration":2671,"src":"1970:26:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2764,"name":"_dao_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2750,"src":"1999:8:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1970:37:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2766,"nodeType":"ExpressionStatement","src":"1970:37:11"}]},"functionSelector":"881de858","id":2768,"implemented":true,"kind":"function","modifiers":[],"name":"set_dao","nameLocation":"1758:7:11","nodeType":"FunctionDefinition","parameters":{"id":2751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2746,"mutability":"mutable","name":"_dao_id","nameLocation":"1783:7:11","nodeType":"VariableDeclaration","scope":2768,"src":"1775:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2745,"name":"uint256","nodeType":"ElementaryTypeName","src":"1775:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2748,"mutability":"mutable","name":"_dao_wallet","nameLocation":"1814:11:11","nodeType":"VariableDeclaration","scope":2768,"src":"1800:25:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2747,"name":"string","nodeType":"ElementaryTypeName","src":"1800:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2750,"mutability":"mutable","name":"_dao_uri","nameLocation":"1849:8:11","nodeType":"VariableDeclaration","scope":2768,"src":"1835:22:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2749,"name":"string","nodeType":"ElementaryTypeName","src":"1835:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1765:98:11"},"returnParameters":{"id":2752,"nodeType":"ParameterList","parameters":[],"src":"1871:0:11"},"scope":3424,"src":"1749:265:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2808,"nodeType":"Block","src":"2082:232:11","statements":[{"assignments":[2778],"declarations":[{"constant":false,"id":2778,"mutability":"mutable","name":"_StoreInfo","nameLocation":"2135:10:11","nodeType":"VariableDeclaration","scope":2808,"src":"2119:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":2776,"name":"string","nodeType":"ElementaryTypeName","src":"2119:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":2777,"nodeType":"ArrayTypeName","src":"2119:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"id":2784,"initialValue":{"arguments":[{"id":2782,"name":"_dao_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2693,"src":"2161:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2781,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2148:12:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (string memory[] memory)"},"typeName":{"baseType":{"id":2779,"name":"string","nodeType":"ElementaryTypeName","src":"2152:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":2780,"nodeType":"ArrayTypeName","src":"2152:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}}},"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2148:22:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"2119:51:11"},{"body":{"id":2804,"nodeType":"Block","src":"2219:61:11","statements":[{"expression":{"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2795,"name":"_StoreInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"2233:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":2797,"indexExpression":{"id":2796,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2786,"src":"2244:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2233:13:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"id":2798,"name":"_dao_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"2249:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_dao_uri_struct_$2674_storage_$","typeString":"mapping(uint256 => struct GreenDAO.dao_uri_struct storage ref)"}},"id":2800,"indexExpression":{"id":2799,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2786,"src":"2259:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2249:12:11","typeDescriptions":{"typeIdentifier":"t_struct$_dao_uri_struct_$2674_storage","typeString":"struct GreenDAO.dao_uri_struct storage ref"}},"id":2801,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"dao_uri","nodeType":"MemberAccess","referencedDeclaration":2671,"src":"2249:20:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"src":"2233:36:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":2803,"nodeType":"ExpressionStatement","src":"2233:36:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2789,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2786,"src":"2200:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2790,"name":"_dao_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2693,"src":"2204:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2200:12:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2805,"initializationExpression":{"assignments":[2786],"declarations":[{"constant":false,"id":2786,"mutability":"mutable","name":"i","nameLocation":"2193:1:11","nodeType":"VariableDeclaration","scope":2805,"src":"2185:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2785,"name":"uint256","nodeType":"ElementaryTypeName","src":"2185:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2788,"initialValue":{"hexValue":"30","id":2787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2197:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2185:13:11"},"loopExpression":{"expression":{"id":2793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2214:3:11","subExpression":{"id":2792,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2786,"src":"2214:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2794,"nodeType":"ExpressionStatement","src":"2214:3:11"},"nodeType":"ForStatement","src":"2180:100:11"},{"expression":{"id":2806,"name":"_StoreInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"2297:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"functionReturnParameters":2773,"id":2807,"nodeType":"Return","src":"2290:17:11"}]},"functionSelector":"c04fe978","id":2809,"implemented":true,"kind":"function","modifiers":[],"name":"get_all_daos","nameLocation":"2029:12:11","nodeType":"FunctionDefinition","parameters":{"id":2769,"nodeType":"ParameterList","parameters":[],"src":"2041:2:11"},"returnParameters":{"id":2773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2772,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2809,"src":"2065:15:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":2770,"name":"string","nodeType":"ElementaryTypeName","src":"2065:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":2771,"nodeType":"ArrayTypeName","src":"2065:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"2064:17:11"},"scope":3424,"src":"2020:294:11","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2821,"nodeType":"Block","src":"2391:80:11","statements":[{"expression":{"expression":{"baseExpression":{"id":2816,"name":"_dao_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"2438:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_dao_uri_struct_$2674_storage_$","typeString":"mapping(uint256 => struct GreenDAO.dao_uri_struct storage ref)"}},"id":2818,"indexExpression":{"id":2817,"name":"_dao_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"2448:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2438:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_dao_uri_struct_$2674_storage","typeString":"struct GreenDAO.dao_uri_struct storage ref"}},"id":2819,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"dao_uri","nodeType":"MemberAccess","referencedDeclaration":2671,"src":"2438:26:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2815,"id":2820,"nodeType":"Return","src":"2431:33:11"}]},"functionSelector":"5d907da1","id":2822,"implemented":true,"kind":"function","modifiers":[],"name":"dao_uri","nameLocation":"2330:7:11","nodeType":"FunctionDefinition","parameters":{"id":2812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2811,"mutability":"mutable","name":"_dao_id","nameLocation":"2346:7:11","nodeType":"VariableDeclaration","scope":2822,"src":"2338:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2810,"name":"uint256","nodeType":"ElementaryTypeName","src":"2338:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2337:17:11"},"returnParameters":{"id":2815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2814,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2822,"src":"2376:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2813,"name":"string","nodeType":"ElementaryTypeName","src":"2376:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2375:15:11"},"scope":3424,"src":"2321:150:11","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2845,"nodeType":"Block","src":"2581:162:11","statements":[{"expression":{"id":2838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2831,"name":"_goal_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"2629:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_goal_uri_struct_$2679_storage_$","typeString":"mapping(uint256 => struct GreenDAO.goal_uri_struct storage ref)"}},"id":2833,"indexExpression":{"id":2832,"name":"_goal_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"2640:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2629:21:11","typeDescriptions":{"typeIdentifier":"t_struct$_goal_uri_struct_$2679_storage","typeString":"struct GreenDAO.goal_uri_struct storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2835,"name":"_dao_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2826,"src":"2669:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2836,"name":"_goal_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2824,"src":"2678:9:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2834,"name":"goal_uri_struct","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"2653:15:11","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_goal_uri_struct_$2679_storage_ptr_$","typeString":"type(struct GreenDAO.goal_uri_struct storage pointer)"}},"id":2837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2653:35:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_goal_uri_struct_$2679_memory_ptr","typeString":"struct GreenDAO.goal_uri_struct memory"}},"src":"2629:59:11","typeDescriptions":{"typeIdentifier":"t_struct$_goal_uri_struct_$2679_storage","typeString":"struct GreenDAO.goal_uri_struct storage ref"}},"id":2839,"nodeType":"ExpressionStatement","src":"2629:59:11"},{"expression":{"id":2841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2698:11:11","subExpression":{"id":2840,"name":"_goal_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"2698:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2842,"nodeType":"ExpressionStatement","src":"2698:11:11"},{"expression":{"id":2843,"name":"_goal_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"2727:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2830,"id":2844,"nodeType":"Return","src":"2720:16:11"}]},"functionSelector":"71085cab","id":2846,"implemented":true,"kind":"function","modifiers":[],"name":"create_goal","nameLocation":"2498:11:11","nodeType":"FunctionDefinition","parameters":{"id":2827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2824,"mutability":"mutable","name":"_goal_uri","nameLocation":"2524:9:11","nodeType":"VariableDeclaration","scope":2846,"src":"2510:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2823,"name":"string","nodeType":"ElementaryTypeName","src":"2510:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2826,"mutability":"mutable","name":"_dao_id","nameLocation":"2543:7:11","nodeType":"VariableDeclaration","scope":2846,"src":"2535:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2825,"name":"uint256","nodeType":"ElementaryTypeName","src":"2535:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2509:42:11"},"returnParameters":{"id":2830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2829,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2846,"src":"2568:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2828,"name":"uint256","nodeType":"ElementaryTypeName","src":"2568:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2567:9:11"},"scope":3424,"src":"2489:254:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2860,"nodeType":"Block","src":"2817:81:11","statements":[{"expression":{"id":2858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":2853,"name":"_goal_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"2850:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_goal_uri_struct_$2679_storage_$","typeString":"mapping(uint256 => struct GreenDAO.goal_uri_struct storage ref)"}},"id":2855,"indexExpression":{"id":2854,"name":"_goal_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2848,"src":"2861:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2850:20:11","typeDescriptions":{"typeIdentifier":"t_struct$_goal_uri_struct_$2679_storage","typeString":"struct GreenDAO.goal_uri_struct storage ref"}},"id":2856,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"goal_uri","nodeType":"MemberAccess","referencedDeclaration":2678,"src":"2850:29:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2857,"name":"_goal_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"2882:9:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2850:41:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2859,"nodeType":"ExpressionStatement","src":"2850:41:11"}]},"functionSelector":"c29595c5","id":2861,"implemented":true,"kind":"function","modifiers":[],"name":"set_goal","nameLocation":"2758:8:11","nodeType":"FunctionDefinition","parameters":{"id":2851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2848,"mutability":"mutable","name":"_goal_id","nameLocation":"2775:8:11","nodeType":"VariableDeclaration","scope":2861,"src":"2767:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2847,"name":"uint256","nodeType":"ElementaryTypeName","src":"2767:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2850,"mutability":"mutable","name":"_goal_uri","nameLocation":"2799:9:11","nodeType":"VariableDeclaration","scope":2861,"src":"2785:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2849,"name":"string","nodeType":"ElementaryTypeName","src":"2785:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2766:43:11"},"returnParameters":{"id":2852,"nodeType":"ParameterList","parameters":[],"src":"2817:0:11"},"scope":3424,"src":"2749:149:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2901,"nodeType":"Block","src":"2967:237:11","statements":[{"assignments":[2871],"declarations":[{"constant":false,"id":2871,"mutability":"mutable","name":"_StoreInfo","nameLocation":"3021:10:11","nodeType":"VariableDeclaration","scope":2901,"src":"3005:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":2869,"name":"string","nodeType":"ElementaryTypeName","src":"3005:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":2870,"nodeType":"ArrayTypeName","src":"3005:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"id":2877,"initialValue":{"arguments":[{"id":2875,"name":"_goal_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"3047:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2874,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3034:12:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (string memory[] memory)"},"typeName":{"baseType":{"id":2872,"name":"string","nodeType":"ElementaryTypeName","src":"3038:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":2873,"nodeType":"ArrayTypeName","src":"3038:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}}},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3034:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"3005:52:11"},{"body":{"id":2897,"nodeType":"Block","src":"3107:63:11","statements":[{"expression":{"id":2895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2888,"name":"_StoreInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"3121:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":2890,"indexExpression":{"id":2889,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"3132:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3121:13:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"id":2891,"name":"_goal_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"3137:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_goal_uri_struct_$2679_storage_$","typeString":"mapping(uint256 => struct GreenDAO.goal_uri_struct storage ref)"}},"id":2893,"indexExpression":{"id":2892,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"3148:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3137:13:11","typeDescriptions":{"typeIdentifier":"t_struct$_goal_uri_struct_$2679_storage","typeString":"struct GreenDAO.goal_uri_struct storage ref"}},"id":2894,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"goal_uri","nodeType":"MemberAccess","referencedDeclaration":2678,"src":"3137:22:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"src":"3121:38:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":2896,"nodeType":"ExpressionStatement","src":"3121:38:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2882,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"3087:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2883,"name":"_goal_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"3091:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3087:13:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2898,"initializationExpression":{"assignments":[2879],"declarations":[{"constant":false,"id":2879,"mutability":"mutable","name":"i","nameLocation":"3080:1:11","nodeType":"VariableDeclaration","scope":2898,"src":"3072:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2878,"name":"uint256","nodeType":"ElementaryTypeName","src":"3072:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2881,"initialValue":{"hexValue":"30","id":2880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3084:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3072:13:11"},"loopExpression":{"expression":{"id":2886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3102:3:11","subExpression":{"id":2885,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"3102:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2887,"nodeType":"ExpressionStatement","src":"3102:3:11"},"nodeType":"ForStatement","src":"3067:103:11"},{"expression":{"id":2899,"name":"_StoreInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"3187:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"functionReturnParameters":2866,"id":2900,"nodeType":"Return","src":"3180:17:11"}]},"functionSelector":"29b56f60","id":2902,"implemented":true,"kind":"function","modifiers":[],"name":"get_all_goals","nameLocation":"2913:13:11","nodeType":"FunctionDefinition","parameters":{"id":2862,"nodeType":"ParameterList","parameters":[],"src":"2926:2:11"},"returnParameters":{"id":2866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2865,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2902,"src":"2950:15:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":2863,"name":"string","nodeType":"ElementaryTypeName","src":"2950:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":2864,"nodeType":"ArrayTypeName","src":"2950:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"2949:17:11"},"scope":3424,"src":"2904:300:11","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2958,"nodeType":"Block","src":"3298:367:11","statements":[{"assignments":[2914],"declarations":[{"constant":false,"id":2914,"mutability":"mutable","name":"_StoreInfo","nameLocation":"3362:10:11","nodeType":"VariableDeclaration","scope":2958,"src":"3346:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":2912,"name":"string","nodeType":"ElementaryTypeName","src":"3346:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":2913,"nodeType":"ArrayTypeName","src":"3346:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"id":2920,"initialValue":{"arguments":[{"id":2918,"name":"_goal_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"3388:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3375:12:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (string memory[] memory)"},"typeName":{"baseType":{"id":2915,"name":"string","nodeType":"ElementaryTypeName","src":"3379:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":2916,"nodeType":"ArrayTypeName","src":"3379:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}}},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3375:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"3346:52:11"},{"assignments":[2922],"declarations":[{"constant":false,"id":2922,"mutability":"mutable","name":"_store_id","nameLocation":"3416:9:11","nodeType":"VariableDeclaration","scope":2958,"src":"3408:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2921,"name":"uint256","nodeType":"ElementaryTypeName","src":"3408:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2923,"nodeType":"VariableDeclarationStatement","src":"3408:17:11"},{"body":{"id":2954,"nodeType":"Block","src":"3475:156:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":2934,"name":"_goal_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"3491:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_goal_uri_struct_$2679_storage_$","typeString":"mapping(uint256 => struct GreenDAO.goal_uri_struct storage ref)"}},"id":2936,"indexExpression":{"id":2935,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"3502:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3491:13:11","typeDescriptions":{"typeIdentifier":"t_struct$_goal_uri_struct_$2679_storage","typeString":"struct GreenDAO.goal_uri_struct storage ref"}},"id":2937,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"dao_id","nodeType":"MemberAccess","referencedDeclaration":2676,"src":"3491:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2938,"name":"_dao_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"3515:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3491:31:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2953,"nodeType":"IfStatement","src":"3487:134:11","trueBody":{"id":2952,"nodeType":"Block","src":"3523:98:11","statements":[{"expression":{"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2940,"name":"_StoreInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"3537:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":2942,"indexExpression":{"id":2941,"name":"_store_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"3548:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3537:21:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"id":2943,"name":"_goal_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"3561:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_goal_uri_struct_$2679_storage_$","typeString":"mapping(uint256 => struct GreenDAO.goal_uri_struct storage ref)"}},"id":2945,"indexExpression":{"id":2944,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"3572:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3561:13:11","typeDescriptions":{"typeIdentifier":"t_struct$_goal_uri_struct_$2679_storage","typeString":"struct GreenDAO.goal_uri_struct storage ref"}},"id":2946,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"goal_uri","nodeType":"MemberAccess","referencedDeclaration":2678,"src":"3561:22:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"src":"3537:46:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":2948,"nodeType":"ExpressionStatement","src":"3537:46:11"},{"expression":{"id":2950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3597:11:11","subExpression":{"id":2949,"name":"_store_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"3597:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2951,"nodeType":"ExpressionStatement","src":"3597:11:11"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2928,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"3455:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2929,"name":"_goal_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"3459:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3455:13:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2955,"initializationExpression":{"assignments":[2925],"declarations":[{"constant":false,"id":2925,"mutability":"mutable","name":"i","nameLocation":"3448:1:11","nodeType":"VariableDeclaration","scope":2955,"src":"3440:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2924,"name":"uint256","nodeType":"ElementaryTypeName","src":"3440:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2927,"initialValue":{"hexValue":"30","id":2926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3440:13:11"},"loopExpression":{"expression":{"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3470:3:11","subExpression":{"id":2931,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"3470:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2933,"nodeType":"ExpressionStatement","src":"3470:3:11"},"nodeType":"ForStatement","src":"3435:196:11"},{"expression":{"id":2956,"name":"_StoreInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"3648:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"functionReturnParameters":2909,"id":2957,"nodeType":"Return","src":"3641:17:11"}]},"functionSelector":"109ac970","id":2959,"implemented":true,"kind":"function","modifiers":[],"name":"get_all_goals_by_dao_id","nameLocation":"3219:23:11","nodeType":"FunctionDefinition","parameters":{"id":2905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2904,"mutability":"mutable","name":"_dao_id","nameLocation":"3251:7:11","nodeType":"VariableDeclaration","scope":2959,"src":"3243:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2903,"name":"uint256","nodeType":"ElementaryTypeName","src":"3243:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3242:17:11"},"returnParameters":{"id":2909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2908,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2959,"src":"3281:15:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":2906,"name":"string","nodeType":"ElementaryTypeName","src":"3281:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":2907,"nodeType":"ArrayTypeName","src":"3281:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"3280:17:11"},"scope":3424,"src":"3210:455:11","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2999,"nodeType":"Block","src":"3764:217:11","statements":[{"body":{"id":2995,"nodeType":"Block","src":"3847:109:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"expression":{"baseExpression":{"id":2979,"name":"_goal_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"3879:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_goal_uri_struct_$2679_storage_$","typeString":"mapping(uint256 => struct GreenDAO.goal_uri_struct storage ref)"}},"id":2981,"indexExpression":{"id":2980,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2967,"src":"3890:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3879:13:11","typeDescriptions":{"typeIdentifier":"t_struct$_goal_uri_struct_$2679_storage","typeString":"struct GreenDAO.goal_uri_struct storage ref"}},"id":2982,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"goal_uri","nodeType":"MemberAccess","referencedDeclaration":2678,"src":"3879:22:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":2978,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3873:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2977,"name":"bytes","nodeType":"ElementaryTypeName","src":"3873:5:11","typeDescriptions":{}}},"id":2983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3873:29:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}],"id":2976,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3863:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3863:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":2988,"name":"_goal_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2961,"src":"3923:9:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2987,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3917:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2986,"name":"bytes","nodeType":"ElementaryTypeName","src":"3917:5:11","typeDescriptions":{}}},"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3917:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2985,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3907:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3907:27:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3863:71:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2994,"nodeType":"IfStatement","src":"3859:86:11","trueBody":{"expression":{"id":2992,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2967,"src":"3944:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2965,"id":2993,"nodeType":"Return","src":"3936:9:11"}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2970,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2967,"src":"3827:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2971,"name":"_goal_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"3831:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3827:13:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2996,"initializationExpression":{"assignments":[2967],"declarations":[{"constant":false,"id":2967,"mutability":"mutable","name":"i","nameLocation":"3820:1:11","nodeType":"VariableDeclaration","scope":2996,"src":"3812:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2966,"name":"uint256","nodeType":"ElementaryTypeName","src":"3812:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2969,"initialValue":{"hexValue":"30","id":2968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3824:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3812:13:11"},"loopExpression":{"expression":{"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3842:3:11","subExpression":{"id":2973,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2967,"src":"3842:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2975,"nodeType":"ExpressionStatement","src":"3842:3:11"},"nodeType":"ForStatement","src":"3807:149:11"},{"expression":{"hexValue":"30","id":2997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3973:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2965,"id":2998,"nodeType":"Return","src":"3966:8:11"}]},"functionSelector":"1e9ac9f5","id":3000,"implemented":true,"kind":"function","modifiers":[],"name":"get_goal_id_by_goal_uri","nameLocation":"3685:23:11","nodeType":"FunctionDefinition","parameters":{"id":2962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2961,"mutability":"mutable","name":"_goal_uri","nameLocation":"3723:9:11","nodeType":"VariableDeclaration","scope":3000,"src":"3709:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2960,"name":"string","nodeType":"ElementaryTypeName","src":"3709:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3708:25:11"},"returnParameters":{"id":2965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2964,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3000,"src":"3755:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2963,"name":"uint256","nodeType":"ElementaryTypeName","src":"3755:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3754:9:11"},"scope":3424,"src":"3676:305:11","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3012,"nodeType":"Block","src":"4059:84:11","statements":[{"expression":{"expression":{"baseExpression":{"id":3007,"name":"_goal_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"4107:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_goal_uri_struct_$2679_storage_$","typeString":"mapping(uint256 => struct GreenDAO.goal_uri_struct storage ref)"}},"id":3009,"indexExpression":{"id":3008,"name":"_goal_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3002,"src":"4118:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4107:20:11","typeDescriptions":{"typeIdentifier":"t_struct$_goal_uri_struct_$2679_storage","typeString":"struct GreenDAO.goal_uri_struct storage ref"}},"id":3010,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"goal_uri","nodeType":"MemberAccess","referencedDeclaration":2678,"src":"4107:29:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":3006,"id":3011,"nodeType":"Return","src":"4100:36:11"}]},"functionSelector":"e32acc1a","id":3013,"implemented":true,"kind":"function","modifiers":[],"name":"goal_uri","nameLocation":"3996:8:11","nodeType":"FunctionDefinition","parameters":{"id":3003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3002,"mutability":"mutable","name":"_goal_id","nameLocation":"4013:8:11","nodeType":"VariableDeclaration","scope":3013,"src":"4005:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3001,"name":"uint256","nodeType":"ElementaryTypeName","src":"4005:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4004:18:11"},"returnParameters":{"id":3006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3005,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3013,"src":"4044:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3004,"name":"string","nodeType":"ElementaryTypeName","src":"4044:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4043:15:11"},"scope":3424,"src":"3987:156:11","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3036,"nodeType":"Block","src":"4257:171:11","statements":[{"expression":{"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3022,"name":"_ideas_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2714,"src":"4307:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ideas_uri_struct_$2684_storage_$","typeString":"mapping(uint256 => struct GreenDAO.ideas_uri_struct storage ref)"}},"id":3024,"indexExpression":{"id":3023,"name":"_ideas_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"4319:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4307:23:11","typeDescriptions":{"typeIdentifier":"t_struct$_ideas_uri_struct_$2684_storage","typeString":"struct GreenDAO.ideas_uri_struct storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3026,"name":"_goal_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3017,"src":"4350:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3027,"name":"_ideas_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"4360:10:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3025,"name":"ideas_uri_struct","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2684,"src":"4333:16:11","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ideas_uri_struct_$2684_storage_ptr_$","typeString":"type(struct GreenDAO.ideas_uri_struct storage pointer)"}},"id":3028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4333:38:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ideas_uri_struct_$2684_memory_ptr","typeString":"struct GreenDAO.ideas_uri_struct memory"}},"src":"4307:64:11","typeDescriptions":{"typeIdentifier":"t_struct$_ideas_uri_struct_$2684_storage","typeString":"struct GreenDAO.ideas_uri_struct storage ref"}},"id":3030,"nodeType":"ExpressionStatement","src":"4307:64:11"},{"expression":{"id":3032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4381:12:11","subExpression":{"id":3031,"name":"_ideas_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"4381:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3033,"nodeType":"ExpressionStatement","src":"4381:12:11"},{"expression":{"id":3034,"name":"_ideas_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"4411:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3021,"id":3035,"nodeType":"Return","src":"4404:17:11"}]},"functionSelector":"2d9cb1ab","id":3037,"implemented":true,"kind":"function","modifiers":[],"name":"create_ideas","nameLocation":"4171:12:11","nodeType":"FunctionDefinition","parameters":{"id":3018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3015,"mutability":"mutable","name":"_ideas_uri","nameLocation":"4198:10:11","nodeType":"VariableDeclaration","scope":3037,"src":"4184:24:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3014,"name":"string","nodeType":"ElementaryTypeName","src":"4184:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3017,"mutability":"mutable","name":"_goal_id","nameLocation":"4218:8:11","nodeType":"VariableDeclaration","scope":3037,"src":"4210:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3016,"name":"uint256","nodeType":"ElementaryTypeName","src":"4210:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4183:44:11"},"returnParameters":{"id":3021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3020,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3037,"src":"4244:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3019,"name":"uint256","nodeType":"ElementaryTypeName","src":"4244:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4243:9:11"},"scope":3424,"src":"4162:266:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3051,"nodeType":"Block","src":"4505:86:11","statements":[{"expression":{"id":3049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3044,"name":"_ideas_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2714,"src":"4539:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ideas_uri_struct_$2684_storage_$","typeString":"mapping(uint256 => struct GreenDAO.ideas_uri_struct storage ref)"}},"id":3046,"indexExpression":{"id":3045,"name":"_ideas_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3039,"src":"4551:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4539:22:11","typeDescriptions":{"typeIdentifier":"t_struct$_ideas_uri_struct_$2684_storage","typeString":"struct GreenDAO.ideas_uri_struct storage ref"}},"id":3047,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"ideas_uri","nodeType":"MemberAccess","referencedDeclaration":2683,"src":"4539:32:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3048,"name":"_ideas_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"4574:10:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"4539:45:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3050,"nodeType":"ExpressionStatement","src":"4539:45:11"}]},"functionSelector":"c04e7430","id":3052,"implemented":true,"kind":"function","modifiers":[],"name":"set_ideas","nameLocation":"4443:9:11","nodeType":"FunctionDefinition","parameters":{"id":3042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3039,"mutability":"mutable","name":"_ideas_id","nameLocation":"4461:9:11","nodeType":"VariableDeclaration","scope":3052,"src":"4453:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3038,"name":"uint256","nodeType":"ElementaryTypeName","src":"4453:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3041,"mutability":"mutable","name":"_ideas_uri","nameLocation":"4486:10:11","nodeType":"VariableDeclaration","scope":3052,"src":"4472:24:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3040,"name":"string","nodeType":"ElementaryTypeName","src":"4472:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4452:45:11"},"returnParameters":{"id":3043,"nodeType":"ParameterList","parameters":[],"src":"4505:0:11"},"scope":3424,"src":"4434:157:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3092,"nodeType":"Block","src":"4660:241:11","statements":[{"assignments":[3062],"declarations":[{"constant":false,"id":3062,"mutability":"mutable","name":"_StoreInfo","nameLocation":"4714:10:11","nodeType":"VariableDeclaration","scope":3092,"src":"4698:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":3060,"name":"string","nodeType":"ElementaryTypeName","src":"4698:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":3061,"nodeType":"ArrayTypeName","src":"4698:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"id":3068,"initialValue":{"arguments":[{"id":3066,"name":"_ideas_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"4740:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3065,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"4727:12:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (string memory[] memory)"},"typeName":{"baseType":{"id":3063,"name":"string","nodeType":"ElementaryTypeName","src":"4731:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":3064,"nodeType":"ArrayTypeName","src":"4731:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}}},"id":3067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4727:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"4698:53:11"},{"body":{"id":3088,"nodeType":"Block","src":"4802:65:11","statements":[{"expression":{"id":3086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3079,"name":"_StoreInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3062,"src":"4816:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":3081,"indexExpression":{"id":3080,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"4827:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4816:13:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"id":3082,"name":"_ideas_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2714,"src":"4832:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ideas_uri_struct_$2684_storage_$","typeString":"mapping(uint256 => struct GreenDAO.ideas_uri_struct storage ref)"}},"id":3084,"indexExpression":{"id":3083,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"4844:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4832:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_ideas_uri_struct_$2684_storage","typeString":"struct GreenDAO.ideas_uri_struct storage ref"}},"id":3085,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"ideas_uri","nodeType":"MemberAccess","referencedDeclaration":2683,"src":"4832:24:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"src":"4816:40:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":3087,"nodeType":"ExpressionStatement","src":"4816:40:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3073,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"4781:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3074,"name":"_ideas_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"4785:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4781:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3089,"initializationExpression":{"assignments":[3070],"declarations":[{"constant":false,"id":3070,"mutability":"mutable","name":"i","nameLocation":"4774:1:11","nodeType":"VariableDeclaration","scope":3089,"src":"4766:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3069,"name":"uint256","nodeType":"ElementaryTypeName","src":"4766:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3072,"initialValue":{"hexValue":"30","id":3071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4778:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4766:13:11"},"loopExpression":{"expression":{"id":3077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4797:3:11","subExpression":{"id":3076,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"4797:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3078,"nodeType":"ExpressionStatement","src":"4797:3:11"},"nodeType":"ForStatement","src":"4761:106:11"},{"expression":{"id":3090,"name":"_StoreInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3062,"src":"4884:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"functionReturnParameters":3057,"id":3091,"nodeType":"Return","src":"4877:17:11"}]},"functionSelector":"97ee7606","id":3093,"implemented":true,"kind":"function","modifiers":[],"name":"get_all_ideas","nameLocation":"4606:13:11","nodeType":"FunctionDefinition","parameters":{"id":3053,"nodeType":"ParameterList","parameters":[],"src":"4619:2:11"},"returnParameters":{"id":3057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3056,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3093,"src":"4643:15:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":3054,"name":"string","nodeType":"ElementaryTypeName","src":"4643:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":3055,"nodeType":"ArrayTypeName","src":"4643:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"4642:17:11"},"scope":3424,"src":"4597:304:11","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3148,"nodeType":"Block","src":"4997:370:11","statements":[{"assignments":[3105],"declarations":[{"constant":false,"id":3105,"mutability":"mutable","name":"_StoreInfo","nameLocation":"5062:10:11","nodeType":"VariableDeclaration","scope":3148,"src":"5046:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":3103,"name":"string","nodeType":"ElementaryTypeName","src":"5046:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":3104,"nodeType":"ArrayTypeName","src":"5046:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"id":3111,"initialValue":{"arguments":[{"id":3109,"name":"_ideas_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"5088:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5075:12:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (string memory[] memory)"},"typeName":{"baseType":{"id":3106,"name":"string","nodeType":"ElementaryTypeName","src":"5079:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":3107,"nodeType":"ArrayTypeName","src":"5079:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}}},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5075:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5046:53:11"},{"assignments":[3113],"declarations":[{"constant":false,"id":3113,"mutability":"mutable","name":"_store_id","nameLocation":"5125:9:11","nodeType":"VariableDeclaration","scope":3148,"src":"5117:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3112,"name":"uint256","nodeType":"ElementaryTypeName","src":"5117:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3114,"nodeType":"VariableDeclarationStatement","src":"5117:17:11"},{"body":{"id":3144,"nodeType":"Block","src":"5185:148:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3125,"name":"_ideas_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2714,"src":"5201:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ideas_uri_struct_$2684_storage_$","typeString":"mapping(uint256 => struct GreenDAO.ideas_uri_struct storage ref)"}},"id":3127,"indexExpression":{"id":3126,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3116,"src":"5213:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5201:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_ideas_uri_struct_$2684_storage","typeString":"struct GreenDAO.ideas_uri_struct storage ref"}},"id":3128,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"goal_id","nodeType":"MemberAccess","referencedDeclaration":2681,"src":"5201:22:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3129,"name":"_goal_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"5227:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:34:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3140,"nodeType":"IfStatement","src":"5197:100:11","trueBody":{"expression":{"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3131,"name":"_StoreInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3105,"src":"5249:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":3133,"indexExpression":{"id":3132,"name":"_store_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"5260:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5249:21:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"id":3134,"name":"_ideas_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2714,"src":"5273:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ideas_uri_struct_$2684_storage_$","typeString":"mapping(uint256 => struct GreenDAO.ideas_uri_struct storage ref)"}},"id":3136,"indexExpression":{"id":3135,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3116,"src":"5285:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5273:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_ideas_uri_struct_$2684_storage","typeString":"struct GreenDAO.ideas_uri_struct storage ref"}},"id":3137,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"ideas_uri","nodeType":"MemberAccess","referencedDeclaration":2683,"src":"5273:24:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"src":"5249:48:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":3139,"nodeType":"ExpressionStatement","src":"5249:48:11"}},{"expression":{"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5311:11:11","subExpression":{"id":3141,"name":"_store_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"5311:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3143,"nodeType":"ExpressionStatement","src":"5311:11:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3119,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3116,"src":"5164:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3120,"name":"_ideas_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"5168:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5164:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3145,"initializationExpression":{"assignments":[3116],"declarations":[{"constant":false,"id":3116,"mutability":"mutable","name":"i","nameLocation":"5157:1:11","nodeType":"VariableDeclaration","scope":3145,"src":"5149:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3115,"name":"uint256","nodeType":"ElementaryTypeName","src":"5149:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3118,"initialValue":{"hexValue":"30","id":3117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5161:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5149:13:11"},"loopExpression":{"expression":{"id":3123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5180:3:11","subExpression":{"id":3122,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3116,"src":"5180:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3124,"nodeType":"ExpressionStatement","src":"5180:3:11"},"nodeType":"ForStatement","src":"5144:189:11"},{"expression":{"id":3146,"name":"_StoreInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3105,"src":"5350:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"functionReturnParameters":3100,"id":3147,"nodeType":"Return","src":"5343:17:11"}]},"functionSelector":"131d44f2","id":3149,"implemented":true,"kind":"function","modifiers":[],"name":"get_all_ideas_by_goal_id","nameLocation":"4916:24:11","nodeType":"FunctionDefinition","parameters":{"id":3096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3095,"mutability":"mutable","name":"_goal_id","nameLocation":"4949:8:11","nodeType":"VariableDeclaration","scope":3149,"src":"4941:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3094,"name":"uint256","nodeType":"ElementaryTypeName","src":"4941:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4940:18:11"},"returnParameters":{"id":3100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3099,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3149,"src":"4980:15:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":3097,"name":"string","nodeType":"ElementaryTypeName","src":"4980:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":3098,"nodeType":"ArrayTypeName","src":"4980:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"4979:17:11"},"scope":3424,"src":"4907:460:11","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3189,"nodeType":"Block","src":"5469:222:11","statements":[{"body":{"id":3185,"nodeType":"Block","src":"5554:112:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"expression":{"baseExpression":{"id":3169,"name":"_ideas_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2714,"src":"5586:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ideas_uri_struct_$2684_storage_$","typeString":"mapping(uint256 => struct GreenDAO.ideas_uri_struct storage ref)"}},"id":3171,"indexExpression":{"id":3170,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"5598:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5586:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_ideas_uri_struct_$2684_storage","typeString":"struct GreenDAO.ideas_uri_struct storage ref"}},"id":3172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"ideas_uri","nodeType":"MemberAccess","referencedDeclaration":2683,"src":"5586:24:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5580:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3167,"name":"bytes","nodeType":"ElementaryTypeName","src":"5580:5:11","typeDescriptions":{}}},"id":3173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5580:31:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}],"id":3166,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5570:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5570:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":3178,"name":"_ideas_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"5632:10:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3177,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5626:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3176,"name":"bytes","nodeType":"ElementaryTypeName","src":"5626:5:11","typeDescriptions":{}}},"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5626:17:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3175,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5616:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5616:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5570:74:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3184,"nodeType":"IfStatement","src":"5566:89:11","trueBody":{"expression":{"id":3182,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"5654:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3155,"id":3183,"nodeType":"Return","src":"5646:9:11"}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3160,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"5533:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3161,"name":"_ideas_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"5537:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3186,"initializationExpression":{"assignments":[3157],"declarations":[{"constant":false,"id":3157,"mutability":"mutable","name":"i","nameLocation":"5526:1:11","nodeType":"VariableDeclaration","scope":3186,"src":"5518:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3156,"name":"uint256","nodeType":"ElementaryTypeName","src":"5518:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3159,"initialValue":{"hexValue":"30","id":3158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5530:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5518:13:11"},"loopExpression":{"expression":{"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5549:3:11","subExpression":{"id":3163,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"5549:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3165,"nodeType":"ExpressionStatement","src":"5549:3:11"},"nodeType":"ForStatement","src":"5513:153:11"},{"expression":{"hexValue":"30","id":3187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5683:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3155,"id":3188,"nodeType":"Return","src":"5676:8:11"}]},"functionSelector":"a1ca9178","id":3190,"implemented":true,"kind":"function","modifiers":[],"name":"get_ideas_id_by_ideas_uri","nameLocation":"5387:25:11","nodeType":"FunctionDefinition","parameters":{"id":3152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3151,"mutability":"mutable","name":"_ideas_uri","nameLocation":"5427:10:11","nodeType":"VariableDeclaration","scope":3190,"src":"5413:24:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3150,"name":"string","nodeType":"ElementaryTypeName","src":"5413:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5412:26:11"},"returnParameters":{"id":3155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3154,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3190,"src":"5460:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3153,"name":"uint256","nodeType":"ElementaryTypeName","src":"5460:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5459:9:11"},"scope":3424,"src":"5378:313:11","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3233,"nodeType":"Block","src":"5789:228:11","statements":[{"body":{"id":3229,"nodeType":"Block","src":"5868:127:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"expression":{"baseExpression":{"id":3210,"name":"_ideas_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2714,"src":"5897:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ideas_uri_struct_$2684_storage_$","typeString":"mapping(uint256 => struct GreenDAO.ideas_uri_struct storage ref)"}},"id":3212,"indexExpression":{"id":3211,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"5909:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5897:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_ideas_uri_struct_$2684_storage","typeString":"struct GreenDAO.ideas_uri_struct storage ref"}},"id":3213,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"ideas_uri","nodeType":"MemberAccess","referencedDeclaration":2683,"src":"5897:24:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3209,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5891:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3208,"name":"bytes","nodeType":"ElementaryTypeName","src":"5891:5:11","typeDescriptions":{}}},"id":3214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5891:31:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}],"id":3207,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5881:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5881:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":3219,"name":"_ideas_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"5943:10:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5937:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3217,"name":"bytes","nodeType":"ElementaryTypeName","src":"5937:5:11","typeDescriptions":{}}},"id":3220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5937:17:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3216,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5927:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5927:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5881:74:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3228,"nodeType":"IfStatement","src":"5877:110:11","trueBody":{"expression":{"expression":{"baseExpression":{"id":3223,"name":"_ideas_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2714,"src":"5965:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ideas_uri_struct_$2684_storage_$","typeString":"mapping(uint256 => struct GreenDAO.ideas_uri_struct storage ref)"}},"id":3225,"indexExpression":{"id":3224,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"5977:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5965:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_ideas_uri_struct_$2684_storage","typeString":"struct GreenDAO.ideas_uri_struct storage ref"}},"id":3226,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"goal_id","nodeType":"MemberAccess","referencedDeclaration":2681,"src":"5965:22:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3196,"id":3227,"nodeType":"Return","src":"5957:30:11"}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3201,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"5847:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3202,"name":"_ideas_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"5851:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5847:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3230,"initializationExpression":{"assignments":[3198],"declarations":[{"constant":false,"id":3198,"mutability":"mutable","name":"i","nameLocation":"5840:1:11","nodeType":"VariableDeclaration","scope":3230,"src":"5832:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3197,"name":"uint256","nodeType":"ElementaryTypeName","src":"5832:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3200,"initialValue":{"hexValue":"30","id":3199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5844:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5832:13:11"},"loopExpression":{"expression":{"id":3205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5863:3:11","subExpression":{"id":3204,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"5863:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3206,"nodeType":"ExpressionStatement","src":"5863:3:11"},"nodeType":"ForStatement","src":"5827:168:11"},{"expression":{"hexValue":"30","id":3231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6009:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3196,"id":3232,"nodeType":"Return","src":"6002:8:11"}]},"functionSelector":"aa4cdf2a","id":3234,"implemented":true,"kind":"function","modifiers":[],"name":"get_goal_id_from_ideas_uri","nameLocation":"5706:26:11","nodeType":"FunctionDefinition","parameters":{"id":3193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3192,"mutability":"mutable","name":"_ideas_uri","nameLocation":"5747:10:11","nodeType":"VariableDeclaration","scope":3234,"src":"5733:24:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3191,"name":"string","nodeType":"ElementaryTypeName","src":"5733:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5732:26:11"},"returnParameters":{"id":3196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3195,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3234,"src":"5780:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3194,"name":"uint256","nodeType":"ElementaryTypeName","src":"5780:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5779:9:11"},"scope":3424,"src":"5697:320:11","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3246,"nodeType":"Block","src":"6098:88:11","statements":[{"expression":{"expression":{"baseExpression":{"id":3241,"name":"_ideas_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2714,"src":"6147:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ideas_uri_struct_$2684_storage_$","typeString":"mapping(uint256 => struct GreenDAO.ideas_uri_struct storage ref)"}},"id":3243,"indexExpression":{"id":3242,"name":"_ideas_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"6159:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6147:22:11","typeDescriptions":{"typeIdentifier":"t_struct$_ideas_uri_struct_$2684_storage","typeString":"struct GreenDAO.ideas_uri_struct storage ref"}},"id":3244,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"ideas_uri","nodeType":"MemberAccess","referencedDeclaration":2683,"src":"6147:32:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":3240,"id":3245,"nodeType":"Return","src":"6140:39:11"}]},"functionSelector":"8d3d2595","id":3247,"implemented":true,"kind":"function","modifiers":[],"name":"ideas_uri","nameLocation":"6033:9:11","nodeType":"FunctionDefinition","parameters":{"id":3237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3236,"mutability":"mutable","name":"_ideas_id","nameLocation":"6051:9:11","nodeType":"VariableDeclaration","scope":3247,"src":"6043:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3235,"name":"uint256","nodeType":"ElementaryTypeName","src":"6043:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6042:19:11"},"returnParameters":{"id":3240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3239,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3247,"src":"6083:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3238,"name":"string","nodeType":"ElementaryTypeName","src":"6083:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6082:15:11"},"scope":3424,"src":"6024:162:11","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3273,"nodeType":"Block","src":"6325:218:11","statements":[{"expression":{"id":3266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3258,"name":"all_goal_ideas_votes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2719,"src":"6384:20:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_goal_ideas_votes_struct_$2691_storage_$","typeString":"mapping(uint256 => struct GreenDAO.goal_ideas_votes_struct storage ref)"}},"id":3260,"indexExpression":{"id":3259,"name":"_ideas_vote_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2699,"src":"6405:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6384:37:11","typeDescriptions":{"typeIdentifier":"t_struct$_goal_ideas_votes_struct_$2691_storage","typeString":"struct GreenDAO.goal_ideas_votes_struct storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3262,"name":"_goal_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"6448:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3263,"name":"_ideas_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"6458:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3264,"name":"_wallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"6468:7:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3261,"name":"goal_ideas_votes_struct","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"6424:23:11","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_goal_ideas_votes_struct_$2691_storage_ptr_$","typeString":"type(struct GreenDAO.goal_ideas_votes_struct storage pointer)"}},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6424:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_goal_ideas_votes_struct_$2691_memory_ptr","typeString":"struct GreenDAO.goal_ideas_votes_struct memory"}},"src":"6384:92:11","typeDescriptions":{"typeIdentifier":"t_struct$_goal_ideas_votes_struct_$2691_storage","typeString":"struct GreenDAO.goal_ideas_votes_struct storage ref"}},"id":3267,"nodeType":"ExpressionStatement","src":"6384:92:11"},{"expression":{"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6486:17:11","subExpression":{"id":3268,"name":"_ideas_vote_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2699,"src":"6486:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3270,"nodeType":"ExpressionStatement","src":"6486:17:11"},{"expression":{"id":3271,"name":"_ideas_vote_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2699,"src":"6521:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3257,"id":3272,"nodeType":"Return","src":"6514:22:11"}]},"functionSelector":"82fcc732","id":3274,"implemented":true,"kind":"function","modifiers":[],"name":"create_goal_ideas_vote","nameLocation":"6214:22:11","nodeType":"FunctionDefinition","parameters":{"id":3254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3249,"mutability":"mutable","name":"_goal_id","nameLocation":"6245:8:11","nodeType":"VariableDeclaration","scope":3274,"src":"6237:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3248,"name":"uint256","nodeType":"ElementaryTypeName","src":"6237:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3251,"mutability":"mutable","name":"_ideas_id","nameLocation":"6263:9:11","nodeType":"VariableDeclaration","scope":3274,"src":"6255:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3250,"name":"uint256","nodeType":"ElementaryTypeName","src":"6255:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3253,"mutability":"mutable","name":"_wallet","nameLocation":"6287:7:11","nodeType":"VariableDeclaration","scope":3274,"src":"6273:21:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3252,"name":"string","nodeType":"ElementaryTypeName","src":"6273:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6236:59:11"},"returnParameters":{"id":3257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3256,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3274,"src":"6312:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3255,"name":"uint256","nodeType":"ElementaryTypeName","src":"6312:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6311:9:11"},"scope":3424,"src":"6205:338:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3338,"nodeType":"Block","src":"6663:438:11","statements":[{"assignments":[3288],"declarations":[{"constant":false,"id":3288,"mutability":"mutable","name":"_StoreInfo","nameLocation":"6730:10:11","nodeType":"VariableDeclaration","scope":3338,"src":"6714:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":3286,"name":"string","nodeType":"ElementaryTypeName","src":"6714:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":3287,"nodeType":"ArrayTypeName","src":"6714:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"id":3294,"initialValue":{"arguments":[{"id":3292,"name":"_ideas_vote_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2699,"src":"6756:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3291,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"6743:12:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (string memory[] memory)"},"typeName":{"baseType":{"id":3289,"name":"string","nodeType":"ElementaryTypeName","src":"6747:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":3290,"nodeType":"ArrayTypeName","src":"6747:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}}},"id":3293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6743:29:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"6714:58:11"},{"assignments":[3296],"declarations":[{"constant":false,"id":3296,"mutability":"mutable","name":"_store_id","nameLocation":"6790:9:11","nodeType":"VariableDeclaration","scope":3338,"src":"6782:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3295,"name":"uint256","nodeType":"ElementaryTypeName","src":"6782:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3297,"nodeType":"VariableDeclarationStatement","src":"6782:17:11"},{"body":{"id":3334,"nodeType":"Block","src":"6855:213:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3308,"name":"all_goal_ideas_votes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2719,"src":"6871:20:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_goal_ideas_votes_struct_$2691_storage_$","typeString":"mapping(uint256 => struct GreenDAO.goal_ideas_votes_struct storage ref)"}},"id":3310,"indexExpression":{"id":3309,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3299,"src":"6892:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6871:23:11","typeDescriptions":{"typeIdentifier":"t_struct$_goal_ideas_votes_struct_$2691_storage","typeString":"struct GreenDAO.goal_ideas_votes_struct storage ref"}},"id":3311,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"goal_id","nodeType":"MemberAccess","referencedDeclaration":2686,"src":"6871:31:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3312,"name":"_goal_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"6906:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6871:43:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3314,"name":"all_goal_ideas_votes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2719,"src":"6918:20:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_goal_ideas_votes_struct_$2691_storage_$","typeString":"mapping(uint256 => struct GreenDAO.goal_ideas_votes_struct storage ref)"}},"id":3316,"indexExpression":{"id":3315,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3299,"src":"6939:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6918:23:11","typeDescriptions":{"typeIdentifier":"t_struct$_goal_ideas_votes_struct_$2691_storage","typeString":"struct GreenDAO.goal_ideas_votes_struct storage ref"}},"id":3317,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"ideas_id","nodeType":"MemberAccess","referencedDeclaration":2688,"src":"6918:32:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3318,"name":"_ideas_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3278,"src":"6954:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6918:45:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6871:92:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3330,"nodeType":"IfStatement","src":"6867:165:11","trueBody":{"expression":{"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3321,"name":"_StoreInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3288,"src":"6978:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":3323,"indexExpression":{"id":3322,"name":"_store_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"6989:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6978:21:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"id":3324,"name":"all_goal_ideas_votes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2719,"src":"7002:20:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_goal_ideas_votes_struct_$2691_storage_$","typeString":"mapping(uint256 => struct GreenDAO.goal_ideas_votes_struct storage ref)"}},"id":3326,"indexExpression":{"id":3325,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3299,"src":"7023:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7002:23:11","typeDescriptions":{"typeIdentifier":"t_struct$_goal_ideas_votes_struct_$2691_storage","typeString":"struct GreenDAO.goal_ideas_votes_struct storage ref"}},"id":3327,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"wallet","nodeType":"MemberAccess","referencedDeclaration":2690,"src":"7002:30:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"src":"6978:54:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":3329,"nodeType":"ExpressionStatement","src":"6978:54:11"}},{"expression":{"id":3332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7046:11:11","subExpression":{"id":3331,"name":"_store_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"7046:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3333,"nodeType":"ExpressionStatement","src":"7046:11:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3302,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3299,"src":"6829:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3303,"name":"_ideas_vote_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2699,"src":"6833:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6829:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3335,"initializationExpression":{"assignments":[3299],"declarations":[{"constant":false,"id":3299,"mutability":"mutable","name":"i","nameLocation":"6822:1:11","nodeType":"VariableDeclaration","scope":3335,"src":"6814:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3298,"name":"uint256","nodeType":"ElementaryTypeName","src":"6814:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3301,"initialValue":{"hexValue":"30","id":3300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6826:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6814:13:11"},"loopExpression":{"expression":{"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6850:3:11","subExpression":{"id":3305,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3299,"src":"6850:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3307,"nodeType":"ExpressionStatement","src":"6850:3:11"},"nodeType":"ForStatement","src":"6809:259:11"},{"expression":{"id":3336,"name":"_StoreInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3288,"src":"7084:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"functionReturnParameters":3283,"id":3337,"nodeType":"Return","src":"7077:17:11"}]},"functionSelector":"4be7adb5","id":3339,"implemented":true,"kind":"function","modifiers":[],"name":"get_ideas_votes_from_goal","nameLocation":"6558:25:11","nodeType":"FunctionDefinition","parameters":{"id":3279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3276,"mutability":"mutable","name":"_goal_id","nameLocation":"6592:8:11","nodeType":"VariableDeclaration","scope":3339,"src":"6584:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3275,"name":"uint256","nodeType":"ElementaryTypeName","src":"6584:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3278,"mutability":"mutable","name":"_ideas_id","nameLocation":"6610:9:11","nodeType":"VariableDeclaration","scope":3339,"src":"6602:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3277,"name":"uint256","nodeType":"ElementaryTypeName","src":"6602:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6583:37:11"},"returnParameters":{"id":3283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3282,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3339,"src":"6642:15:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":3280,"name":"string","nodeType":"ElementaryTypeName","src":"6642:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":3281,"nodeType":"ArrayTypeName","src":"6642:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"6641:17:11"},"scope":3424,"src":"6549:552:11","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3422,"nodeType":"Block","src":"7135:424:11","statements":[{"expression":{"id":3344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3342,"name":"_dao_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2693,"src":"7143:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7154:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7143:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3345,"nodeType":"ExpressionStatement","src":"7143:12:11"},{"expression":{"id":3348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3346,"name":"_goal_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"7163:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7175:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7163:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3349,"nodeType":"ExpressionStatement","src":"7163:13:11"},{"expression":{"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3350,"name":"_ideas_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"7184:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7197:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7184:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3353,"nodeType":"ExpressionStatement","src":"7184:14:11"},{"expression":{"id":3356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3354,"name":"_ideas_vote_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2699,"src":"7206:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7224:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7206:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3357,"nodeType":"ExpressionStatement","src":"7206:19:11"},{"body":{"expression":{"id":3371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"7283:19:11","subExpression":{"baseExpression":{"id":3368,"name":"_dao_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"7290:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_dao_uri_struct_$2674_storage_$","typeString":"mapping(uint256 => struct GreenDAO.dao_uri_struct storage ref)"}},"id":3370,"indexExpression":{"id":3369,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3359,"src":"7300:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7290:12:11","typeDescriptions":{"typeIdentifier":"t_struct$_dao_uri_struct_$2674_storage","typeString":"struct GreenDAO.dao_uri_struct storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3372,"nodeType":"ExpressionStatement","src":"7283:19:11"},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3362,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3359,"src":"7253:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3363,"name":"_dao_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2693,"src":"7257:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7253:12:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3373,"initializationExpression":{"assignments":[3359],"declarations":[{"constant":false,"id":3359,"mutability":"mutable","name":"i","nameLocation":"7246:1:11","nodeType":"VariableDeclaration","scope":3373,"src":"7238:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3358,"name":"uint256","nodeType":"ElementaryTypeName","src":"7238:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3361,"initialValue":{"hexValue":"30","id":3360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7250:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7238:13:11"},"loopExpression":{"expression":{"id":3366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7267:3:11","subExpression":{"id":3365,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3359,"src":"7267:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3367,"nodeType":"ExpressionStatement","src":"7267:3:11"},"nodeType":"ForStatement","src":"7233:69:11"},{"body":{"expression":{"id":3387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"7360:20:11","subExpression":{"baseExpression":{"id":3384,"name":"_goal_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"7367:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_goal_uri_struct_$2679_storage_$","typeString":"mapping(uint256 => struct GreenDAO.goal_uri_struct storage ref)"}},"id":3386,"indexExpression":{"id":3385,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"7378:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7367:13:11","typeDescriptions":{"typeIdentifier":"t_struct$_goal_uri_struct_$2679_storage","typeString":"struct GreenDAO.goal_uri_struct storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3388,"nodeType":"ExpressionStatement","src":"7360:20:11"},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3378,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"7330:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3379,"name":"_goal_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"7334:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7330:13:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3389,"initializationExpression":{"assignments":[3375],"declarations":[{"constant":false,"id":3375,"mutability":"mutable","name":"i","nameLocation":"7323:1:11","nodeType":"VariableDeclaration","scope":3389,"src":"7315:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3374,"name":"uint256","nodeType":"ElementaryTypeName","src":"7315:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3377,"initialValue":{"hexValue":"30","id":3376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7327:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7315:13:11"},"loopExpression":{"expression":{"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7345:3:11","subExpression":{"id":3381,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"7345:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3383,"nodeType":"ExpressionStatement","src":"7345:3:11"},"nodeType":"ForStatement","src":"7310:70:11"},{"body":{"expression":{"id":3403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"7438:21:11","subExpression":{"baseExpression":{"id":3400,"name":"_ideas_uris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2714,"src":"7445:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ideas_uri_struct_$2684_storage_$","typeString":"mapping(uint256 => struct GreenDAO.ideas_uri_struct storage ref)"}},"id":3402,"indexExpression":{"id":3401,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3391,"src":"7457:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7445:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_ideas_uri_struct_$2684_storage","typeString":"struct GreenDAO.ideas_uri_struct storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3404,"nodeType":"ExpressionStatement","src":"7438:21:11"},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3394,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3391,"src":"7408:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3395,"name":"_ideas_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"7412:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7408:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3405,"initializationExpression":{"assignments":[3391],"declarations":[{"constant":false,"id":3391,"mutability":"mutable","name":"i","nameLocation":"7401:1:11","nodeType":"VariableDeclaration","scope":3405,"src":"7393:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3390,"name":"uint256","nodeType":"ElementaryTypeName","src":"7393:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3393,"initialValue":{"hexValue":"30","id":3392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7405:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7393:13:11"},"loopExpression":{"expression":{"id":3398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7424:3:11","subExpression":{"id":3397,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3391,"src":"7424:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3399,"nodeType":"ExpressionStatement","src":"7424:3:11"},"nodeType":"ForStatement","src":"7388:71:11"},{"body":{"expression":{"id":3419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"7517:30:11","subExpression":{"baseExpression":{"id":3416,"name":"all_goal_ideas_votes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2719,"src":"7524:20:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_goal_ideas_votes_struct_$2691_storage_$","typeString":"mapping(uint256 => struct GreenDAO.goal_ideas_votes_struct storage ref)"}},"id":3418,"indexExpression":{"id":3417,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"7545:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7524:23:11","typeDescriptions":{"typeIdentifier":"t_struct$_goal_ideas_votes_struct_$2691_storage","typeString":"struct GreenDAO.goal_ideas_votes_struct storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3420,"nodeType":"ExpressionStatement","src":"7517:30:11"},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3410,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"7487:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3411,"name":"_ideas_vote_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2699,"src":"7491:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7487:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3421,"initializationExpression":{"assignments":[3407],"declarations":[{"constant":false,"id":3407,"mutability":"mutable","name":"i","nameLocation":"7480:1:11","nodeType":"VariableDeclaration","scope":3421,"src":"7472:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3406,"name":"uint256","nodeType":"ElementaryTypeName","src":"7472:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3409,"initialValue":{"hexValue":"30","id":3408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7484:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7472:13:11"},"loopExpression":{"expression":{"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7508:3:11","subExpression":{"id":3413,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"7508:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3415,"nodeType":"ExpressionStatement","src":"7508:3:11"},"nodeType":"ForStatement","src":"7467:80:11"}]},"functionSelector":"b16060a6","id":3423,"implemented":true,"kind":"function","modifiers":[],"name":"reset_all","nameLocation":"7116:9:11","nodeType":"FunctionDefinition","parameters":{"id":3340,"nodeType":"ParameterList","parameters":[],"src":"7125:2:11"},"returnParameters":{"id":3341,"nodeType":"ParameterList","parameters":[],"src":"7135:0:11"},"scope":3424,"src":"7107:452:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":3425,"src":"204:7358:11","usedErrors":[]}],"src":"32:7531:11"},"id":11},"contracts/extensions/ILayerZeroEndpoint.sol":{"ast":{"absolutePath":"contracts/extensions/ILayerZeroEndpoint.sol","exportedSymbols":{"ILayerZeroEndpoint":[3569],"ILayerZeroUserApplicationConfig":[3614]},"id":3570,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3426,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"35:24:12"},{"absolutePath":"contracts/extensions/ILayerZeroUserApplicationConfig.sol","file":"./ILayerZeroUserApplicationConfig.sol","id":3427,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3570,"sourceUnit":3615,"src":"63:47:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3428,"name":"ILayerZeroUserApplicationConfig","nodeType":"IdentifierPath","referencedDeclaration":3614,"src":"146:31:12"},"id":3429,"nodeType":"InheritanceSpecifier","src":"146:31:12"}],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3569,"linearizedBaseContracts":[3569,3614],"name":"ILayerZeroEndpoint","nameLocation":"124:18:12","nodeType":"ContractDefinition","nodes":[{"functionSelector":"c5803100","id":3444,"implemented":false,"kind":"function","modifiers":[],"name":"send","nameLocation":"937:4:12","nodeType":"FunctionDefinition","parameters":{"id":3442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3431,"mutability":"mutable","name":"_dstChainId","nameLocation":"949:11:12","nodeType":"VariableDeclaration","scope":3444,"src":"942:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3430,"name":"uint16","nodeType":"ElementaryTypeName","src":"942:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3433,"mutability":"mutable","name":"_destination","nameLocation":"977:12:12","nodeType":"VariableDeclaration","scope":3444,"src":"962:27:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3432,"name":"bytes","nodeType":"ElementaryTypeName","src":"962:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3435,"mutability":"mutable","name":"_payload","nameLocation":"1006:8:12","nodeType":"VariableDeclaration","scope":3444,"src":"991:23:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3434,"name":"bytes","nodeType":"ElementaryTypeName","src":"991:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3437,"mutability":"mutable","name":"_refundAddress","nameLocation":"1032:14:12","nodeType":"VariableDeclaration","scope":3444,"src":"1016:30:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3436,"name":"address","nodeType":"ElementaryTypeName","src":"1016:15:12","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3439,"mutability":"mutable","name":"_zroPaymentAddress","nameLocation":"1056:18:12","nodeType":"VariableDeclaration","scope":3444,"src":"1048:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3438,"name":"address","nodeType":"ElementaryTypeName","src":"1048:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3441,"mutability":"mutable","name":"_adapterParams","nameLocation":"1091:14:12","nodeType":"VariableDeclaration","scope":3444,"src":"1076:29:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3440,"name":"bytes","nodeType":"ElementaryTypeName","src":"1076:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"941:165:12"},"returnParameters":{"id":3443,"nodeType":"ParameterList","parameters":[],"src":"1123:0:12"},"scope":3569,"src":"928:196:12","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"c2fa4813","id":3459,"implemented":false,"kind":"function","modifiers":[],"name":"receivePayload","nameLocation":"1625:14:12","nodeType":"FunctionDefinition","parameters":{"id":3457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3446,"mutability":"mutable","name":"_srcChainId","nameLocation":"1647:11:12","nodeType":"VariableDeclaration","scope":3459,"src":"1640:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3445,"name":"uint16","nodeType":"ElementaryTypeName","src":"1640:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3448,"mutability":"mutable","name":"_srcAddress","nameLocation":"1675:11:12","nodeType":"VariableDeclaration","scope":3459,"src":"1660:26:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3447,"name":"bytes","nodeType":"ElementaryTypeName","src":"1660:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3450,"mutability":"mutable","name":"_dstAddress","nameLocation":"1696:11:12","nodeType":"VariableDeclaration","scope":3459,"src":"1688:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3449,"name":"address","nodeType":"ElementaryTypeName","src":"1688:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3452,"mutability":"mutable","name":"_nonce","nameLocation":"1716:6:12","nodeType":"VariableDeclaration","scope":3459,"src":"1709:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3451,"name":"uint64","nodeType":"ElementaryTypeName","src":"1709:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3454,"mutability":"mutable","name":"_gasLimit","nameLocation":"1729:9:12","nodeType":"VariableDeclaration","scope":3459,"src":"1724:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3453,"name":"uint","nodeType":"ElementaryTypeName","src":"1724:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3456,"mutability":"mutable","name":"_payload","nameLocation":"1755:8:12","nodeType":"VariableDeclaration","scope":3459,"src":"1740:23:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3455,"name":"bytes","nodeType":"ElementaryTypeName","src":"1740:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1639:125:12"},"returnParameters":{"id":3458,"nodeType":"ParameterList","parameters":[],"src":"1773:0:12"},"scope":3569,"src":"1616:158:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"fdc07c70","id":3468,"implemented":false,"kind":"function","modifiers":[],"name":"getInboundNonce","nameLocation":"2015:15:12","nodeType":"FunctionDefinition","parameters":{"id":3464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3461,"mutability":"mutable","name":"_srcChainId","nameLocation":"2038:11:12","nodeType":"VariableDeclaration","scope":3468,"src":"2031:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3460,"name":"uint16","nodeType":"ElementaryTypeName","src":"2031:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3463,"mutability":"mutable","name":"_srcAddress","nameLocation":"2066:11:12","nodeType":"VariableDeclaration","scope":3468,"src":"2051:26:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3462,"name":"bytes","nodeType":"ElementaryTypeName","src":"2051:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2030:48:12"},"returnParameters":{"id":3467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3466,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3468,"src":"2102:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3465,"name":"uint64","nodeType":"ElementaryTypeName","src":"2102:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2101:8:12"},"scope":3569,"src":"2006:104:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"7a145748","id":3477,"implemented":false,"kind":"function","modifiers":[],"name":"getOutboundNonce","nameLocation":"2289:16:12","nodeType":"FunctionDefinition","parameters":{"id":3473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3470,"mutability":"mutable","name":"_dstChainId","nameLocation":"2313:11:12","nodeType":"VariableDeclaration","scope":3477,"src":"2306:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3469,"name":"uint16","nodeType":"ElementaryTypeName","src":"2306:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3472,"mutability":"mutable","name":"_srcAddress","nameLocation":"2334:11:12","nodeType":"VariableDeclaration","scope":3477,"src":"2326:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3471,"name":"address","nodeType":"ElementaryTypeName","src":"2326:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2305:41:12"},"returnParameters":{"id":3476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3475,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3477,"src":"2370:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3474,"name":"uint64","nodeType":"ElementaryTypeName","src":"2370:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2369:8:12"},"scope":3569,"src":"2280:98:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"40a7bb10","id":3494,"implemented":false,"kind":"function","modifiers":[],"name":"estimateFees","nameLocation":"2909:12:12","nodeType":"FunctionDefinition","parameters":{"id":3488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3479,"mutability":"mutable","name":"_dstChainId","nameLocation":"2929:11:12","nodeType":"VariableDeclaration","scope":3494,"src":"2922:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3478,"name":"uint16","nodeType":"ElementaryTypeName","src":"2922:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3481,"mutability":"mutable","name":"_userApplication","nameLocation":"2950:16:12","nodeType":"VariableDeclaration","scope":3494,"src":"2942:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3480,"name":"address","nodeType":"ElementaryTypeName","src":"2942:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3483,"mutability":"mutable","name":"_payload","nameLocation":"2983:8:12","nodeType":"VariableDeclaration","scope":3494,"src":"2968:23:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3482,"name":"bytes","nodeType":"ElementaryTypeName","src":"2968:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3485,"mutability":"mutable","name":"_payInZRO","nameLocation":"2998:9:12","nodeType":"VariableDeclaration","scope":3494,"src":"2993:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3484,"name":"bool","nodeType":"ElementaryTypeName","src":"2993:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3487,"mutability":"mutable","name":"_adapterParam","nameLocation":"3024:13:12","nodeType":"VariableDeclaration","scope":3494,"src":"3009:28:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3486,"name":"bytes","nodeType":"ElementaryTypeName","src":"3009:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2921:117:12"},"returnParameters":{"id":3493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3490,"mutability":"mutable","name":"nativeFee","nameLocation":"3067:9:12","nodeType":"VariableDeclaration","scope":3494,"src":"3062:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3489,"name":"uint","nodeType":"ElementaryTypeName","src":"3062:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3492,"mutability":"mutable","name":"zroFee","nameLocation":"3083:6:12","nodeType":"VariableDeclaration","scope":3494,"src":"3078:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3491,"name":"uint","nodeType":"ElementaryTypeName","src":"3078:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3061:29:12"},"scope":3569,"src":"2900:191:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"3408e470","id":3499,"implemented":false,"kind":"function","modifiers":[],"name":"getChainId","nameLocation":"3172:10:12","nodeType":"FunctionDefinition","parameters":{"id":3495,"nodeType":"ParameterList","parameters":[],"src":"3182:2:12"},"returnParameters":{"id":3498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3497,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3499,"src":"3208:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3496,"name":"uint16","nodeType":"ElementaryTypeName","src":"3208:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"3207:8:12"},"scope":3569,"src":"3163:53:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"aaff5f16","id":3508,"implemented":false,"kind":"function","modifiers":[],"name":"retryPayload","nameLocation":"3488:12:12","nodeType":"FunctionDefinition","parameters":{"id":3506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3501,"mutability":"mutable","name":"_srcChainId","nameLocation":"3508:11:12","nodeType":"VariableDeclaration","scope":3508,"src":"3501:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3500,"name":"uint16","nodeType":"ElementaryTypeName","src":"3501:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3503,"mutability":"mutable","name":"_srcAddress","nameLocation":"3536:11:12","nodeType":"VariableDeclaration","scope":3508,"src":"3521:26:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3502,"name":"bytes","nodeType":"ElementaryTypeName","src":"3521:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3505,"mutability":"mutable","name":"_payload","nameLocation":"3564:8:12","nodeType":"VariableDeclaration","scope":3508,"src":"3549:23:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3504,"name":"bytes","nodeType":"ElementaryTypeName","src":"3549:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3500:73:12"},"returnParameters":{"id":3507,"nodeType":"ParameterList","parameters":[],"src":"3582:0:12"},"scope":3569,"src":"3479:104:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"0eaf6ea6","id":3517,"implemented":false,"kind":"function","modifiers":[],"name":"hasStoredPayload","nameLocation":"3800:16:12","nodeType":"FunctionDefinition","parameters":{"id":3513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3510,"mutability":"mutable","name":"_srcChainId","nameLocation":"3824:11:12","nodeType":"VariableDeclaration","scope":3517,"src":"3817:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3509,"name":"uint16","nodeType":"ElementaryTypeName","src":"3817:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3512,"mutability":"mutable","name":"_srcAddress","nameLocation":"3852:11:12","nodeType":"VariableDeclaration","scope":3517,"src":"3837:26:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3511,"name":"bytes","nodeType":"ElementaryTypeName","src":"3837:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3816:48:12"},"returnParameters":{"id":3516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3515,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3517,"src":"3888:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3514,"name":"bool","nodeType":"ElementaryTypeName","src":"3888:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3887:6:12"},"scope":3569,"src":"3791:103:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"9c729da1","id":3524,"implemented":false,"kind":"function","modifiers":[],"name":"getSendLibraryAddress","nameLocation":"4056:21:12","nodeType":"FunctionDefinition","parameters":{"id":3520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3519,"mutability":"mutable","name":"_userApplication","nameLocation":"4086:16:12","nodeType":"VariableDeclaration","scope":3524,"src":"4078:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3518,"name":"address","nodeType":"ElementaryTypeName","src":"4078:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4077:26:12"},"returnParameters":{"id":3523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3524,"src":"4127:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3521,"name":"address","nodeType":"ElementaryTypeName","src":"4127:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4126:9:12"},"scope":3569,"src":"4047:89:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"71ba2fd6","id":3531,"implemented":false,"kind":"function","modifiers":[],"name":"getReceiveLibraryAddress","nameLocation":"4300:24:12","nodeType":"FunctionDefinition","parameters":{"id":3527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3526,"mutability":"mutable","name":"_userApplication","nameLocation":"4333:16:12","nodeType":"VariableDeclaration","scope":3531,"src":"4325:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3525,"name":"address","nodeType":"ElementaryTypeName","src":"4325:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4324:26:12"},"returnParameters":{"id":3530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3529,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3531,"src":"4374:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3528,"name":"address","nodeType":"ElementaryTypeName","src":"4374:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4373:9:12"},"scope":3569,"src":"4291:92:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e97a448a","id":3536,"implemented":false,"kind":"function","modifiers":[],"name":"isSendingPayload","nameLocation":"4524:16:12","nodeType":"FunctionDefinition","parameters":{"id":3532,"nodeType":"ParameterList","parameters":[],"src":"4540:2:12"},"returnParameters":{"id":3535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3534,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3536,"src":"4566:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3533,"name":"bool","nodeType":"ElementaryTypeName","src":"4566:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4565:6:12"},"scope":3569,"src":"4515:57:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"ca066b35","id":3541,"implemented":false,"kind":"function","modifiers":[],"name":"isReceivingPayload","nameLocation":"4716:18:12","nodeType":"FunctionDefinition","parameters":{"id":3537,"nodeType":"ParameterList","parameters":[],"src":"4734:2:12"},"returnParameters":{"id":3540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3539,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3541,"src":"4760:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3538,"name":"bool","nodeType":"ElementaryTypeName","src":"4760:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4759:6:12"},"scope":3569,"src":"4707:59:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"f5ecbdbc","id":3554,"implemented":false,"kind":"function","modifiers":[],"name":"getConfig","nameLocation":"5180:9:12","nodeType":"FunctionDefinition","parameters":{"id":3550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3543,"mutability":"mutable","name":"_version","nameLocation":"5197:8:12","nodeType":"VariableDeclaration","scope":3554,"src":"5190:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3542,"name":"uint16","nodeType":"ElementaryTypeName","src":"5190:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3545,"mutability":"mutable","name":"_chainId","nameLocation":"5214:8:12","nodeType":"VariableDeclaration","scope":3554,"src":"5207:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3544,"name":"uint16","nodeType":"ElementaryTypeName","src":"5207:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3547,"mutability":"mutable","name":"_userApplication","nameLocation":"5232:16:12","nodeType":"VariableDeclaration","scope":3554,"src":"5224:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3546,"name":"address","nodeType":"ElementaryTypeName","src":"5224:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3549,"mutability":"mutable","name":"_configType","nameLocation":"5255:11:12","nodeType":"VariableDeclaration","scope":3554,"src":"5250:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3548,"name":"uint","nodeType":"ElementaryTypeName","src":"5250:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5189:78:12"},"returnParameters":{"id":3553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3552,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3554,"src":"5291:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3551,"name":"bytes","nodeType":"ElementaryTypeName","src":"5291:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5290:14:12"},"scope":3569,"src":"5171:134:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"096568f6","id":3561,"implemented":false,"kind":"function","modifiers":[],"name":"getSendVersion","nameLocation":"5468:14:12","nodeType":"FunctionDefinition","parameters":{"id":3557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3556,"mutability":"mutable","name":"_userApplication","nameLocation":"5491:16:12","nodeType":"VariableDeclaration","scope":3561,"src":"5483:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3555,"name":"address","nodeType":"ElementaryTypeName","src":"5483:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5482:26:12"},"returnParameters":{"id":3560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3559,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3561,"src":"5532:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3558,"name":"uint16","nodeType":"ElementaryTypeName","src":"5532:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"5531:8:12"},"scope":3569,"src":"5459:81:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"da1a7c9a","id":3568,"implemented":false,"kind":"function","modifiers":[],"name":"getReceiveVersion","nameLocation":"5708:17:12","nodeType":"FunctionDefinition","parameters":{"id":3564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3563,"mutability":"mutable","name":"_userApplication","nameLocation":"5734:16:12","nodeType":"VariableDeclaration","scope":3568,"src":"5726:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3562,"name":"address","nodeType":"ElementaryTypeName","src":"5726:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5725:26:12"},"returnParameters":{"id":3567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3568,"src":"5775:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3565,"name":"uint16","nodeType":"ElementaryTypeName","src":"5775:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"5774:8:12"},"scope":3569,"src":"5699:84:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3570,"src":"114:5672:12","usedErrors":[]}],"src":"35:5751:12"},"id":12},"contracts/extensions/ILayerZeroReceiver.sol":{"ast":{"absolutePath":"contracts/extensions/ILayerZeroReceiver.sol","exportedSymbols":{"ILayerZeroReceiver":[3583]},"id":3584,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3571,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"35:24:13"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3583,"linearizedBaseContracts":[3583],"name":"ILayerZeroReceiver","nameLocation":"73:18:13","nodeType":"ContractDefinition","nodes":[{"functionSelector":"001d3567","id":3582,"implemented":false,"kind":"function","modifiers":[],"name":"lzReceive","nameLocation":"492:9:13","nodeType":"FunctionDefinition","parameters":{"id":3580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3573,"mutability":"mutable","name":"_srcChainId","nameLocation":"509:11:13","nodeType":"VariableDeclaration","scope":3582,"src":"502:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3572,"name":"uint16","nodeType":"ElementaryTypeName","src":"502:6:13","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3575,"mutability":"mutable","name":"_srcAddress","nameLocation":"537:11:13","nodeType":"VariableDeclaration","scope":3582,"src":"522:26:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3574,"name":"bytes","nodeType":"ElementaryTypeName","src":"522:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3577,"mutability":"mutable","name":"_nonce","nameLocation":"557:6:13","nodeType":"VariableDeclaration","scope":3582,"src":"550:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3576,"name":"uint64","nodeType":"ElementaryTypeName","src":"550:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3579,"mutability":"mutable","name":"_payload","nameLocation":"580:8:13","nodeType":"VariableDeclaration","scope":3582,"src":"565:23:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3578,"name":"bytes","nodeType":"ElementaryTypeName","src":"565:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"501:88:13"},"returnParameters":{"id":3581,"nodeType":"ParameterList","parameters":[],"src":"598:0:13"},"scope":3583,"src":"483:116:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3584,"src":"63:539:13","usedErrors":[]}],"src":"35:567:13"},"id":13},"contracts/extensions/ILayerZeroUserApplicationConfig.sol":{"ast":{"absolutePath":"contracts/extensions/ILayerZeroUserApplicationConfig.sol","exportedSymbols":{"ILayerZeroUserApplicationConfig":[3614]},"id":3615,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3585,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"35:24:14"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3614,"linearizedBaseContracts":[3614],"name":"ILayerZeroUserApplicationConfig","nameLocation":"73:31:14","nodeType":"ContractDefinition","nodes":[{"functionSelector":"cbed8b9c","id":3596,"implemented":false,"kind":"function","modifiers":[],"name":"setConfig","nameLocation":"522:9:14","nodeType":"FunctionDefinition","parameters":{"id":3594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3587,"mutability":"mutable","name":"_version","nameLocation":"539:8:14","nodeType":"VariableDeclaration","scope":3596,"src":"532:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3586,"name":"uint16","nodeType":"ElementaryTypeName","src":"532:6:14","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3589,"mutability":"mutable","name":"_chainId","nameLocation":"556:8:14","nodeType":"VariableDeclaration","scope":3596,"src":"549:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3588,"name":"uint16","nodeType":"ElementaryTypeName","src":"549:6:14","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3591,"mutability":"mutable","name":"_configType","nameLocation":"571:11:14","nodeType":"VariableDeclaration","scope":3596,"src":"566:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3590,"name":"uint","nodeType":"ElementaryTypeName","src":"566:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3593,"mutability":"mutable","name":"_config","nameLocation":"599:7:14","nodeType":"VariableDeclaration","scope":3596,"src":"584:22:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3592,"name":"bytes","nodeType":"ElementaryTypeName","src":"584:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"531:76:14"},"returnParameters":{"id":3595,"nodeType":"ParameterList","parameters":[],"src":"616:0:14"},"scope":3614,"src":"513:104:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"07e0db17","id":3601,"implemented":false,"kind":"function","modifiers":[],"name":"setSendVersion","nameLocation":"769:14:14","nodeType":"FunctionDefinition","parameters":{"id":3599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3598,"mutability":"mutable","name":"_version","nameLocation":"791:8:14","nodeType":"VariableDeclaration","scope":3601,"src":"784:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3597,"name":"uint16","nodeType":"ElementaryTypeName","src":"784:6:14","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"783:17:14"},"returnParameters":{"id":3600,"nodeType":"ParameterList","parameters":[],"src":"809:0:14"},"scope":3614,"src":"760:50:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"10ddb137","id":3606,"implemented":false,"kind":"function","modifiers":[],"name":"setReceiveVersion","nameLocation":"967:17:14","nodeType":"FunctionDefinition","parameters":{"id":3604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3603,"mutability":"mutable","name":"_version","nameLocation":"992:8:14","nodeType":"VariableDeclaration","scope":3606,"src":"985:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3602,"name":"uint16","nodeType":"ElementaryTypeName","src":"985:6:14","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"984:17:14"},"returnParameters":{"id":3605,"nodeType":"ParameterList","parameters":[],"src":"1010:0:14"},"scope":3614,"src":"958:53:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"42d65a8d","id":3613,"implemented":false,"kind":"function","modifiers":[],"name":"forceResumeReceive","nameLocation":"1294:18:14","nodeType":"FunctionDefinition","parameters":{"id":3611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3608,"mutability":"mutable","name":"_srcChainId","nameLocation":"1320:11:14","nodeType":"VariableDeclaration","scope":3613,"src":"1313:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3607,"name":"uint16","nodeType":"ElementaryTypeName","src":"1313:6:14","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3610,"mutability":"mutable","name":"_srcAddress","nameLocation":"1348:11:14","nodeType":"VariableDeclaration","scope":3613,"src":"1333:26:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3609,"name":"bytes","nodeType":"ElementaryTypeName","src":"1333:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1312:48:14"},"returnParameters":{"id":3612,"nodeType":"ParameterList","parameters":[],"src":"1369:0:14"},"scope":3614,"src":"1285:85:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3615,"src":"63:1310:14","usedErrors":[]}],"src":"35:1338:14"},"id":14},"contracts/extensions/IONFT721.sol":{"ast":{"absolutePath":"contracts/extensions/IONFT721.sol","exportedSymbols":{"IERC165":[1781],"IERC721":[1173],"IONFT721":[3622],"IONFT721Core":[3687]},"id":3623,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3616,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"35:24:15"},{"absolutePath":"contracts/extensions/IONFT721Core.sol","file":"./IONFT721Core.sol","id":3617,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3623,"sourceUnit":3688,"src":"63:28:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721.sol","id":3618,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3623,"sourceUnit":1174,"src":"93:58:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3620,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":1173,"src":"228:7:15"},"id":3621,"nodeType":"InheritanceSpecifier","src":"228:7:15"}],"contractDependencies":[],"contractKind":"interface","documentation":{"id":3619,"nodeType":"StructuredDocumentation","src":"155:48:15","text":" @dev Interface of the ONFT standard"},"fullyImplemented":false,"id":3622,"linearizedBaseContracts":[3622,1173,1781],"name":"IONFT721","nameLocation":"215:8:15","nodeType":"ContractDefinition","nodes":[],"scope":3623,"src":"205:37:15","usedErrors":[]}],"src":"35:207:15"},"id":15},"contracts/extensions/IONFT721Core.sol":{"ast":{"absolutePath":"contracts/extensions/IONFT721Core.sol","exportedSymbols":{"IERC165":[1781],"IONFT721Core":[3687]},"id":3688,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3624,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"35:24:16"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":3625,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3688,"sourceUnit":1782,"src":"63:65:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3627,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":1781,"src":"213:7:16"},"id":3628,"nodeType":"InheritanceSpecifier","src":"213:7:16"}],"contractDependencies":[],"contractKind":"interface","documentation":{"id":3626,"nodeType":"StructuredDocumentation","src":"132:53:16","text":" @dev Interface of the ONFT Core standard"},"fullyImplemented":false,"id":3687,"linearizedBaseContracts":[3687,1781],"name":"IONFT721Core","nameLocation":"197:12:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3629,"nodeType":"StructuredDocumentation","src":"228:453:16","text":" @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\n _dstChainId - L0 defined chain id to send tokens too\n _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\n _tokenId - token Id to transfer\n _useZro - indicates to use zro to pay L0 fees\n _adapterParams - flexible bytes array to indicate messaging adapter services in L0"},"functionSelector":"2a205e3d","id":3646,"implemented":false,"kind":"function","modifiers":[],"name":"estimateSendFee","nameLocation":"696:15:16","nodeType":"FunctionDefinition","parameters":{"id":3640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3631,"mutability":"mutable","name":"_dstChainId","nameLocation":"719:11:16","nodeType":"VariableDeclaration","scope":3646,"src":"712:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3630,"name":"uint16","nodeType":"ElementaryTypeName","src":"712:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3633,"mutability":"mutable","name":"_toAddress","nameLocation":"747:10:16","nodeType":"VariableDeclaration","scope":3646,"src":"732:25:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3632,"name":"bytes","nodeType":"ElementaryTypeName","src":"732:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3635,"mutability":"mutable","name":"_tokenId","nameLocation":"764:8:16","nodeType":"VariableDeclaration","scope":3646,"src":"759:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3634,"name":"uint","nodeType":"ElementaryTypeName","src":"759:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3637,"mutability":"mutable","name":"_useZro","nameLocation":"779:7:16","nodeType":"VariableDeclaration","scope":3646,"src":"774:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3636,"name":"bool","nodeType":"ElementaryTypeName","src":"774:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3639,"mutability":"mutable","name":"_adapterParams","nameLocation":"803:14:16","nodeType":"VariableDeclaration","scope":3646,"src":"788:29:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3638,"name":"bytes","nodeType":"ElementaryTypeName","src":"788:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"711:107:16"},"returnParameters":{"id":3645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3642,"mutability":"mutable","name":"nativeFee","nameLocation":"847:9:16","nodeType":"VariableDeclaration","scope":3646,"src":"842:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3641,"name":"uint","nodeType":"ElementaryTypeName","src":"842:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3644,"mutability":"mutable","name":"zroFee","nameLocation":"863:6:16","nodeType":"VariableDeclaration","scope":3646,"src":"858:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3643,"name":"uint","nodeType":"ElementaryTypeName","src":"858:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"841:29:16"},"scope":3687,"src":"687:184:16","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3647,"nodeType":"StructuredDocumentation","src":"879:339:16","text":" @dev send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from`\n `_toAddress` can be any size depending on the `dstChainId`.\n `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\n `_adapterParams` is a flexible bytes array to indicate messaging adapter services"},"functionSelector":"51905636","id":3664,"implemented":false,"kind":"function","modifiers":[],"name":"sendFrom","nameLocation":"1233:8:16","nodeType":"FunctionDefinition","parameters":{"id":3662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3649,"mutability":"mutable","name":"_from","nameLocation":"1250:5:16","nodeType":"VariableDeclaration","scope":3664,"src":"1242:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3648,"name":"address","nodeType":"ElementaryTypeName","src":"1242:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3651,"mutability":"mutable","name":"_dstChainId","nameLocation":"1264:11:16","nodeType":"VariableDeclaration","scope":3664,"src":"1257:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3650,"name":"uint16","nodeType":"ElementaryTypeName","src":"1257:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3653,"mutability":"mutable","name":"_toAddress","nameLocation":"1292:10:16","nodeType":"VariableDeclaration","scope":3664,"src":"1277:25:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3652,"name":"bytes","nodeType":"ElementaryTypeName","src":"1277:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3655,"mutability":"mutable","name":"_tokenId","nameLocation":"1309:8:16","nodeType":"VariableDeclaration","scope":3664,"src":"1304:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3654,"name":"uint","nodeType":"ElementaryTypeName","src":"1304:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3657,"mutability":"mutable","name":"_refundAddress","nameLocation":"1335:14:16","nodeType":"VariableDeclaration","scope":3664,"src":"1319:30:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3656,"name":"address","nodeType":"ElementaryTypeName","src":"1319:15:16","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3659,"mutability":"mutable","name":"_zroPaymentAddress","nameLocation":"1359:18:16","nodeType":"VariableDeclaration","scope":3664,"src":"1351:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3658,"name":"address","nodeType":"ElementaryTypeName","src":"1351:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3661,"mutability":"mutable","name":"_adapterParams","nameLocation":"1394:14:16","nodeType":"VariableDeclaration","scope":3664,"src":"1379:29:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3660,"name":"bytes","nodeType":"ElementaryTypeName","src":"1379:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1241:168:16"},"returnParameters":{"id":3663,"nodeType":"ParameterList","parameters":[],"src":"1426:0:16"},"scope":3687,"src":"1224:203:16","stateMutability":"payable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":3665,"nodeType":"StructuredDocumentation","src":"1435:155:16","text":" @dev Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\n `_nonce` is the outbound nonce from"},"id":3675,"name":"SendToChain","nameLocation":"1602:11:16","nodeType":"EventDefinition","parameters":{"id":3674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3667,"indexed":true,"mutability":"mutable","name":"_dstChainId","nameLocation":"1629:11:16","nodeType":"VariableDeclaration","scope":3675,"src":"1614:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3666,"name":"uint16","nodeType":"ElementaryTypeName","src":"1614:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3669,"indexed":true,"mutability":"mutable","name":"_from","nameLocation":"1658:5:16","nodeType":"VariableDeclaration","scope":3675,"src":"1642:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3668,"name":"address","nodeType":"ElementaryTypeName","src":"1642:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3671,"indexed":true,"mutability":"mutable","name":"_toAddress","nameLocation":"1679:10:16","nodeType":"VariableDeclaration","scope":3675,"src":"1665:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3670,"name":"bytes","nodeType":"ElementaryTypeName","src":"1665:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3673,"indexed":false,"mutability":"mutable","name":"_tokenId","nameLocation":"1696:8:16","nodeType":"VariableDeclaration","scope":3675,"src":"1691:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3672,"name":"uint","nodeType":"ElementaryTypeName","src":"1691:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1613:92:16"},"src":"1596:110:16"},{"anonymous":false,"documentation":{"id":3676,"nodeType":"StructuredDocumentation","src":"1714:143:16","text":" @dev Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce."},"id":3686,"name":"ReceiveFromChain","nameLocation":"1869:16:16","nodeType":"EventDefinition","parameters":{"id":3685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3678,"indexed":true,"mutability":"mutable","name":"_srcChainId","nameLocation":"1901:11:16","nodeType":"VariableDeclaration","scope":3686,"src":"1886:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3677,"name":"uint16","nodeType":"ElementaryTypeName","src":"1886:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3680,"indexed":true,"mutability":"mutable","name":"_srcAddress","nameLocation":"1928:11:16","nodeType":"VariableDeclaration","scope":3686,"src":"1914:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3679,"name":"bytes","nodeType":"ElementaryTypeName","src":"1914:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3682,"indexed":true,"mutability":"mutable","name":"_toAddress","nameLocation":"1957:10:16","nodeType":"VariableDeclaration","scope":3686,"src":"1941:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3681,"name":"address","nodeType":"ElementaryTypeName","src":"1941:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3684,"indexed":false,"mutability":"mutable","name":"_tokenId","nameLocation":"1974:8:16","nodeType":"VariableDeclaration","scope":3686,"src":"1969:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3683,"name":"uint","nodeType":"ElementaryTypeName","src":"1969:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1885:98:16"},"src":"1863:121:16"}],"scope":3688,"src":"187:1800:16","usedErrors":[]}],"src":"35:1952:16"},"id":16},"contracts/extensions/LzApp.sol":{"ast":{"absolutePath":"contracts/extensions/LzApp.sol","exportedSymbols":{"BytesLib":[4751],"Context":[1570],"ILayerZeroEndpoint":[3569],"ILayerZeroReceiver":[3583],"ILayerZeroUserApplicationConfig":[3614],"LzApp":[4177],"Ownable":[112]},"id":4178,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3689,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"35:23:17"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":3690,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4178,"sourceUnit":113,"src":"62:52:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/extensions/ILayerZeroReceiver.sol","file":"./ILayerZeroReceiver.sol","id":3691,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4178,"sourceUnit":3584,"src":"116:34:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/extensions/ILayerZeroUserApplicationConfig.sol","file":"./ILayerZeroUserApplicationConfig.sol","id":3692,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4178,"sourceUnit":3615,"src":"152:47:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/extensions/ILayerZeroEndpoint.sol","file":"./ILayerZeroEndpoint.sol","id":3693,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4178,"sourceUnit":3570,"src":"201:34:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/extensions/util/BytesLib.sol","file":"./util/BytesLib.sol","id":3694,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4178,"sourceUnit":4752,"src":"237:29:17","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3695,"name":"Ownable","nodeType":"IdentifierPath","referencedDeclaration":112,"src":"346:7:17"},"id":3696,"nodeType":"InheritanceSpecifier","src":"346:7:17"},{"baseName":{"id":3697,"name":"ILayerZeroReceiver","nodeType":"IdentifierPath","referencedDeclaration":3583,"src":"355:18:17"},"id":3698,"nodeType":"InheritanceSpecifier","src":"355:18:17"},{"baseName":{"id":3699,"name":"ILayerZeroUserApplicationConfig","nodeType":"IdentifierPath","referencedDeclaration":3614,"src":"375:31:17"},"id":3700,"nodeType":"InheritanceSpecifier","src":"375:31:17"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":4177,"linearizedBaseContracts":[4177,3614,3583,112,1570],"name":"LzApp","nameLocation":"337:5:17","nodeType":"ContractDefinition","nodes":[{"id":3703,"libraryName":{"id":3701,"name":"BytesLib","nodeType":"IdentifierPath","referencedDeclaration":4751,"src":"420:8:17"},"nodeType":"UsingForDirective","src":"414:25:17","typeName":{"id":3702,"name":"bytes","nodeType":"ElementaryTypeName","src":"433:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},{"constant":false,"functionSelector":"b353aaa7","id":3706,"mutability":"immutable","name":"lzEndpoint","nameLocation":"483:10:17","nodeType":"VariableDeclaration","scope":4177,"src":"447:46:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpoint_$3569","typeString":"contract ILayerZeroEndpoint"},"typeName":{"id":3705,"nodeType":"UserDefinedTypeName","pathNode":{"id":3704,"name":"ILayerZeroEndpoint","nodeType":"IdentifierPath","referencedDeclaration":3569,"src":"447:18:17"},"referencedDeclaration":3569,"src":"447:18:17","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpoint_$3569","typeString":"contract ILayerZeroEndpoint"}},"visibility":"public"},{"constant":false,"functionSelector":"7533d788","id":3710,"mutability":"mutable","name":"trustedRemoteLookup","nameLocation":"532:19:17","nodeType":"VariableDeclaration","scope":4177,"src":"500:51:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes)"},"typeName":{"id":3709,"keyType":{"id":3707,"name":"uint16","nodeType":"ElementaryTypeName","src":"508:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Mapping","src":"500:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes)"},"valueType":{"id":3708,"name":"bytes","nodeType":"ElementaryTypeName","src":"518:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"visibility":"public"},{"constant":false,"functionSelector":"8cfd8f5c","id":3716,"mutability":"mutable","name":"minDstGasLookup","nameLocation":"608:15:17","nodeType":"VariableDeclaration","scope":4177,"src":"558:65:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_uint16_$_t_uint256_$_$","typeString":"mapping(uint16 => mapping(uint16 => uint256))"},"typeName":{"id":3715,"keyType":{"id":3711,"name":"uint16","nodeType":"ElementaryTypeName","src":"566:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Mapping","src":"558:42:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_uint16_$_t_uint256_$_$","typeString":"mapping(uint16 => mapping(uint16 => uint256))"},"valueType":{"id":3714,"keyType":{"id":3712,"name":"uint16","nodeType":"ElementaryTypeName","src":"584:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Mapping","src":"576:23:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_uint256_$","typeString":"mapping(uint16 => uint256)"},"valueType":{"id":3713,"name":"uint","nodeType":"ElementaryTypeName","src":"594:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"constant":false,"functionSelector":"950c8a74","id":3718,"mutability":"mutable","name":"precrime","nameLocation":"645:8:17","nodeType":"VariableDeclaration","scope":4177,"src":"630:23:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3717,"name":"address","nodeType":"ElementaryTypeName","src":"630:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"anonymous":false,"id":3722,"name":"SetPrecrime","nameLocation":"668:11:17","nodeType":"EventDefinition","parameters":{"id":3721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3720,"indexed":false,"mutability":"mutable","name":"precrime","nameLocation":"688:8:17","nodeType":"VariableDeclaration","scope":3722,"src":"680:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3719,"name":"address","nodeType":"ElementaryTypeName","src":"680:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"679:18:17"},"src":"662:36:17"},{"anonymous":false,"id":3728,"name":"SetTrustedRemote","nameLocation":"710:16:17","nodeType":"EventDefinition","parameters":{"id":3727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3724,"indexed":false,"mutability":"mutable","name":"_remoteChainId","nameLocation":"734:14:17","nodeType":"VariableDeclaration","scope":3728,"src":"727:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3723,"name":"uint16","nodeType":"ElementaryTypeName","src":"727:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3726,"indexed":false,"mutability":"mutable","name":"_path","nameLocation":"756:5:17","nodeType":"VariableDeclaration","scope":3728,"src":"750:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3725,"name":"bytes","nodeType":"ElementaryTypeName","src":"750:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"726:36:17"},"src":"704:59:17"},{"anonymous":false,"id":3734,"name":"SetTrustedRemoteAddress","nameLocation":"775:23:17","nodeType":"EventDefinition","parameters":{"id":3733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3730,"indexed":false,"mutability":"mutable","name":"_remoteChainId","nameLocation":"806:14:17","nodeType":"VariableDeclaration","scope":3734,"src":"799:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3729,"name":"uint16","nodeType":"ElementaryTypeName","src":"799:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3732,"indexed":false,"mutability":"mutable","name":"_remoteAddress","nameLocation":"828:14:17","nodeType":"VariableDeclaration","scope":3734,"src":"822:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3731,"name":"bytes","nodeType":"ElementaryTypeName","src":"822:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"798:45:17"},"src":"769:75:17"},{"anonymous":false,"id":3742,"name":"SetMinDstGas","nameLocation":"856:12:17","nodeType":"EventDefinition","parameters":{"id":3741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3736,"indexed":false,"mutability":"mutable","name":"_dstChainId","nameLocation":"876:11:17","nodeType":"VariableDeclaration","scope":3742,"src":"869:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3735,"name":"uint16","nodeType":"ElementaryTypeName","src":"869:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3738,"indexed":false,"mutability":"mutable","name":"_type","nameLocation":"896:5:17","nodeType":"VariableDeclaration","scope":3742,"src":"889:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3737,"name":"uint16","nodeType":"ElementaryTypeName","src":"889:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3740,"indexed":false,"mutability":"mutable","name":"_minDstGas","nameLocation":"908:10:17","nodeType":"VariableDeclaration","scope":3742,"src":"903:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3739,"name":"uint","nodeType":"ElementaryTypeName","src":"903:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"868:51:17"},"src":"850:70:17"},{"body":{"id":3753,"nodeType":"Block","src":"959:61:17","statements":[{"expression":{"id":3751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3747,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"970:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpoint_$3569","typeString":"contract ILayerZeroEndpoint"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3749,"name":"_endpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"1002:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3748,"name":"ILayerZeroEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3569,"src":"983:18:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ILayerZeroEndpoint_$3569_$","typeString":"type(contract ILayerZeroEndpoint)"}},"id":3750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"983:29:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpoint_$3569","typeString":"contract ILayerZeroEndpoint"}},"src":"970:42:17","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpoint_$3569","typeString":"contract ILayerZeroEndpoint"}},"id":3752,"nodeType":"ExpressionStatement","src":"970:42:17"}]},"id":3754,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3744,"mutability":"mutable","name":"_endpoint","nameLocation":"948:9:17","nodeType":"VariableDeclaration","scope":3754,"src":"940:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3743,"name":"address","nodeType":"ElementaryTypeName","src":"940:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"939:19:17"},"returnParameters":{"id":3746,"nodeType":"ParameterList","parameters":[],"src":"959:0:17"},"scope":4177,"src":"928:92:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3582],"body":{"id":3812,"nodeType":"Block","src":"1159:631:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3767,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"1244:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1244:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":3771,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"1268:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpoint_$3569","typeString":"contract ILayerZeroEndpoint"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ILayerZeroEndpoint_$3569","typeString":"contract ILayerZeroEndpoint"}],"id":3770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1260:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3769,"name":"address","nodeType":"ElementaryTypeName","src":"1260:7:17","typeDescriptions":{}}},"id":3772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1260:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1244:35:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572","id":3774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1281:32:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_c76d352ff891dcabaed1e1ebf3c88e97f49052956ad0c09feadb4b7d40c688f9","typeString":"literal_string \"LzApp: invalid endpoint caller\""},"value":"LzApp: invalid endpoint caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c76d352ff891dcabaed1e1ebf3c88e97f49052956ad0c09feadb4b7d40c688f9","typeString":"literal_string \"LzApp: invalid endpoint caller\""}],"id":3766,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1236:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1236:78:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3776,"nodeType":"ExpressionStatement","src":"1236:78:17"},{"assignments":[3778],"declarations":[{"constant":false,"id":3778,"mutability":"mutable","name":"trustedRemote","nameLocation":"1340:13:17","nodeType":"VariableDeclaration","scope":3812,"src":"1327:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3777,"name":"bytes","nodeType":"ElementaryTypeName","src":"1327:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3782,"initialValue":{"baseExpression":{"id":3779,"name":"trustedRemoteLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3710,"src":"1356:19:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes storage ref)"}},"id":3781,"indexExpression":{"id":3780,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3756,"src":"1376:11:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1356:32:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"VariableDeclarationStatement","src":"1327:61:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3784,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3758,"src":"1540:11:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1540:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3786,"name":"trustedRemote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3778,"src":"1562:13:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1562:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1540:42:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3789,"name":"trustedRemote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3778,"src":"1586:13:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1586:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1609:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1586:24:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1540:70:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3795,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3758,"src":"1624:11:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":3794,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1614:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1614:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":3798,"name":"trustedRemote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3778,"src":"1650:13:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3797,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1640:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1640:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1614:50:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1540:124:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6e7472616374","id":3802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1666:40:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_f2c5f1a596d749e8a7585a60b880c2626f8dc4e8dd0b6f11ae55e0b2b1061815","typeString":"literal_string \"LzApp: invalid source sending contract\""},"value":"LzApp: invalid source sending contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f2c5f1a596d749e8a7585a60b880c2626f8dc4e8dd0b6f11ae55e0b2b1061815","typeString":"literal_string \"LzApp: invalid source sending contract\""}],"id":3783,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1532:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1532:175:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3804,"nodeType":"ExpressionStatement","src":"1532:175:17"},{"expression":{"arguments":[{"id":3806,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3756,"src":"1739:11:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":3807,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3758,"src":"1752:11:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":3808,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3760,"src":"1765:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":3809,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3762,"src":"1773:8:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":3805,"name":"_blockingLzReceive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3824,"src":"1720:18:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$_t_uint64_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory,uint64,bytes memory)"}},"id":3810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1720:62:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3811,"nodeType":"ExpressionStatement","src":"1720:62:17"}]},"functionSelector":"001d3567","id":3813,"implemented":true,"kind":"function","modifiers":[],"name":"lzReceive","nameLocation":"1037:9:17","nodeType":"FunctionDefinition","overrides":{"id":3764,"nodeType":"OverrideSpecifier","overrides":[],"src":"1150:8:17"},"parameters":{"id":3763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3756,"mutability":"mutable","name":"_srcChainId","nameLocation":"1054:11:17","nodeType":"VariableDeclaration","scope":3813,"src":"1047:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3755,"name":"uint16","nodeType":"ElementaryTypeName","src":"1047:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3758,"mutability":"mutable","name":"_srcAddress","nameLocation":"1082:11:17","nodeType":"VariableDeclaration","scope":3813,"src":"1067:26:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3757,"name":"bytes","nodeType":"ElementaryTypeName","src":"1067:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3760,"mutability":"mutable","name":"_nonce","nameLocation":"1102:6:17","nodeType":"VariableDeclaration","scope":3813,"src":"1095:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3759,"name":"uint64","nodeType":"ElementaryTypeName","src":"1095:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3762,"mutability":"mutable","name":"_payload","nameLocation":"1125:8:17","nodeType":"VariableDeclaration","scope":3813,"src":"1110:23:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3761,"name":"bytes","nodeType":"ElementaryTypeName","src":"1110:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1046:88:17"},"returnParameters":{"id":3765,"nodeType":"ParameterList","parameters":[],"src":"1159:0:17"},"scope":4177,"src":"1028:762:17","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":3824,"implemented":false,"kind":"function","modifiers":[],"name":"_blockingLzReceive","nameLocation":"1951:18:17","nodeType":"FunctionDefinition","parameters":{"id":3822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3815,"mutability":"mutable","name":"_srcChainId","nameLocation":"1977:11:17","nodeType":"VariableDeclaration","scope":3824,"src":"1970:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3814,"name":"uint16","nodeType":"ElementaryTypeName","src":"1970:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3817,"mutability":"mutable","name":"_srcAddress","nameLocation":"2003:11:17","nodeType":"VariableDeclaration","scope":3824,"src":"1990:24:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3816,"name":"bytes","nodeType":"ElementaryTypeName","src":"1990:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3819,"mutability":"mutable","name":"_nonce","nameLocation":"2023:6:17","nodeType":"VariableDeclaration","scope":3824,"src":"2016:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3818,"name":"uint64","nodeType":"ElementaryTypeName","src":"2016:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3821,"mutability":"mutable","name":"_payload","nameLocation":"2044:8:17","nodeType":"VariableDeclaration","scope":3824,"src":"2031:21:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3820,"name":"bytes","nodeType":"ElementaryTypeName","src":"2031:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1969:84:17"},"returnParameters":{"id":3823,"nodeType":"ParameterList","parameters":[],"src":"2070:0:17"},"scope":4177,"src":"1942:129:17","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3866,"nodeType":"Block","src":"2262:312:17","statements":[{"assignments":[3840],"declarations":[{"constant":false,"id":3840,"mutability":"mutable","name":"trustedRemote","nameLocation":"2286:13:17","nodeType":"VariableDeclaration","scope":3866,"src":"2273:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3839,"name":"bytes","nodeType":"ElementaryTypeName","src":"2273:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3844,"initialValue":{"baseExpression":{"id":3841,"name":"trustedRemoteLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3710,"src":"2302:19:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes storage ref)"}},"id":3843,"indexExpression":{"id":3842,"name":"_dstChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3826,"src":"2322:11:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2302:32:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"VariableDeclarationStatement","src":"2273:61:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3846,"name":"trustedRemote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3840,"src":"2353:13:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2353:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2377:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2353:25:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742061207472757374656420736f75726365","id":3850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2380:50:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_65511ce9fb02a17101879c9b581e54d0cddc37b781936a67d4a6ef307ad5afd7","typeString":"literal_string \"LzApp: destination chain is not a trusted source\""},"value":"LzApp: destination chain is not a trusted source"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_65511ce9fb02a17101879c9b581e54d0cddc37b781936a67d4a6ef307ad5afd7","typeString":"literal_string \"LzApp: destination chain is not a trusted source\""}],"id":3845,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2345:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2345:86:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3852,"nodeType":"ExpressionStatement","src":"2345:86:17"},{"expression":{"arguments":[{"id":3858,"name":"_dstChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3826,"src":"2477:11:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":3859,"name":"trustedRemote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3840,"src":"2490:13:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3860,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"2505:8:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3861,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3830,"src":"2515:14:17","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":3862,"name":"_zroPaymentAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3832,"src":"2531:18:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3863,"name":"_adapterParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3834,"src":"2551:14:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3853,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"2442:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpoint_$3569","typeString":"contract ILayerZeroEndpoint"}},"id":3855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"send","nodeType":"MemberAccess","referencedDeclaration":3444,"src":"2442:15:17","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint16_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_address_payable_$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory,bytes memory,address payable,address,bytes memory) payable external"}},"id":3857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3856,"name":"_nativeFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3836,"src":"2465:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2442:34:17","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint16_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_address_payable_$_t_address_$_t_bytes_memory_ptr_$returns$__$value","typeString":"function (uint16,bytes memory,bytes memory,address payable,address,bytes memory) payable external"}},"id":3864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2442:124:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3865,"nodeType":"ExpressionStatement","src":"2442:124:17"}]},"id":3867,"implemented":true,"kind":"function","modifiers":[],"name":"_lzSend","nameLocation":"2088:7:17","nodeType":"FunctionDefinition","parameters":{"id":3837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3826,"mutability":"mutable","name":"_dstChainId","nameLocation":"2103:11:17","nodeType":"VariableDeclaration","scope":3867,"src":"2096:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3825,"name":"uint16","nodeType":"ElementaryTypeName","src":"2096:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3828,"mutability":"mutable","name":"_payload","nameLocation":"2129:8:17","nodeType":"VariableDeclaration","scope":3867,"src":"2116:21:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3827,"name":"bytes","nodeType":"ElementaryTypeName","src":"2116:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3830,"mutability":"mutable","name":"_refundAddress","nameLocation":"2155:14:17","nodeType":"VariableDeclaration","scope":3867,"src":"2139:30:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3829,"name":"address","nodeType":"ElementaryTypeName","src":"2139:15:17","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3832,"mutability":"mutable","name":"_zroPaymentAddress","nameLocation":"2179:18:17","nodeType":"VariableDeclaration","scope":3867,"src":"2171:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3831,"name":"address","nodeType":"ElementaryTypeName","src":"2171:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3834,"mutability":"mutable","name":"_adapterParams","nameLocation":"2212:14:17","nodeType":"VariableDeclaration","scope":3867,"src":"2199:27:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3833,"name":"bytes","nodeType":"ElementaryTypeName","src":"2199:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3836,"mutability":"mutable","name":"_nativeFee","nameLocation":"2233:10:17","nodeType":"VariableDeclaration","scope":3867,"src":"2228:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3835,"name":"uint","nodeType":"ElementaryTypeName","src":"2228:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2095:149:17"},"returnParameters":{"id":3838,"nodeType":"ParameterList","parameters":[],"src":"2262:0:17"},"scope":4177,"src":"2079:495:17","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3908,"nodeType":"Block","src":"2707:295:17","statements":[{"assignments":[3879],"declarations":[{"constant":false,"id":3879,"mutability":"mutable","name":"providedGasLimit","nameLocation":"2723:16:17","nodeType":"VariableDeclaration","scope":3908,"src":"2718:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3878,"name":"uint","nodeType":"ElementaryTypeName","src":"2718:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3883,"initialValue":{"arguments":[{"id":3881,"name":"_adapterParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"2755:14:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3880,"name":"_getGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3926,"src":"2742:12:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$","typeString":"function (bytes memory) pure returns (uint256)"}},"id":3882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2742:28:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2718:52:17"},{"assignments":[3885],"declarations":[{"constant":false,"id":3885,"mutability":"mutable","name":"minGasLimit","nameLocation":"2786:11:17","nodeType":"VariableDeclaration","scope":3908,"src":"2781:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3884,"name":"uint","nodeType":"ElementaryTypeName","src":"2781:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3893,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":3886,"name":"minDstGasLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"2800:15:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_uint16_$_t_uint256_$_$","typeString":"mapping(uint16 => mapping(uint16 => uint256))"}},"id":3888,"indexExpression":{"id":3887,"name":"_dstChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3869,"src":"2816:11:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2800:28:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_uint256_$","typeString":"mapping(uint16 => uint256)"}},"id":3890,"indexExpression":{"id":3889,"name":"_type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"2829:5:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2800:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3891,"name":"_extraGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"2838:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2800:47:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2781:66:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3895,"name":"minGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3885,"src":"2866:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2880:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2866:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c7a4170703a206d696e4761734c696d6974206e6f7420736574","id":3898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2883:28:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_1c12f4398e5982835c19ea43197ffa859493a10bdc288c7cacc6a2d6df414b01","typeString":"literal_string \"LzApp: minGasLimit not set\""},"value":"LzApp: minGasLimit not set"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1c12f4398e5982835c19ea43197ffa859493a10bdc288c7cacc6a2d6df414b01","typeString":"literal_string \"LzApp: minGasLimit not set\""}],"id":3894,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2858:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2858:54:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3900,"nodeType":"ExpressionStatement","src":"2858:54:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3902,"name":"providedGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3879,"src":"2931:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3903,"name":"minGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3885,"src":"2951:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2931:31:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c7a4170703a20676173206c696d697420697320746f6f206c6f77","id":3905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2964:29:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_0cfbfb89d1bd60ee521649a7dce886710cc0992622f97b32d8e555a9c7073be1","typeString":"literal_string \"LzApp: gas limit is too low\""},"value":"LzApp: gas limit is too low"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0cfbfb89d1bd60ee521649a7dce886710cc0992622f97b32d8e555a9c7073be1","typeString":"literal_string \"LzApp: gas limit is too low\""}],"id":3901,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2923:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2923:71:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3907,"nodeType":"ExpressionStatement","src":"2923:71:17"}]},"id":3909,"implemented":true,"kind":"function","modifiers":[],"name":"_checkGasLimit","nameLocation":"2591:14:17","nodeType":"FunctionDefinition","parameters":{"id":3876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3869,"mutability":"mutable","name":"_dstChainId","nameLocation":"2613:11:17","nodeType":"VariableDeclaration","scope":3909,"src":"2606:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3868,"name":"uint16","nodeType":"ElementaryTypeName","src":"2606:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3871,"mutability":"mutable","name":"_type","nameLocation":"2633:5:17","nodeType":"VariableDeclaration","scope":3909,"src":"2626:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3870,"name":"uint16","nodeType":"ElementaryTypeName","src":"2626:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3873,"mutability":"mutable","name":"_adapterParams","nameLocation":"2653:14:17","nodeType":"VariableDeclaration","scope":3909,"src":"2640:27:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3872,"name":"bytes","nodeType":"ElementaryTypeName","src":"2640:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3875,"mutability":"mutable","name":"_extraGas","nameLocation":"2674:9:17","nodeType":"VariableDeclaration","scope":3909,"src":"2669:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3874,"name":"uint","nodeType":"ElementaryTypeName","src":"2669:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2605:79:17"},"returnParameters":{"id":3877,"nodeType":"ParameterList","parameters":[],"src":"2707:0:17"},"scope":4177,"src":"2582:420:17","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3925,"nodeType":"Block","src":"3107:174:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3917,"name":"_adapterParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3911,"src":"3126:14:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3126:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3334","id":3919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3151:2:17","typeDescriptions":{"typeIdentifier":"t_rational_34_by_1","typeString":"int_const 34"},"value":"34"},"src":"3126:27:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c7a4170703a20696e76616c69642061646170746572506172616d73","id":3921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3155:30:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e109d210c1f1e494c2d731512d3fcc1ea597f69de36a4fccbe193d9ece27e6d","typeString":"literal_string \"LzApp: invalid adapterParams\""},"value":"LzApp: invalid adapterParams"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6e109d210c1f1e494c2d731512d3fcc1ea597f69de36a4fccbe193d9ece27e6d","typeString":"literal_string \"LzApp: invalid adapterParams\""}],"id":3916,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3118:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3118:68:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3923,"nodeType":"ExpressionStatement","src":"3118:68:17"},{"AST":{"nodeType":"YulBlock","src":"3206:68:17","statements":[{"nodeType":"YulAssignment","src":"3221:42:17","value":{"arguments":[{"arguments":[{"name":"_adapterParams","nodeType":"YulIdentifier","src":"3243:14:17"},{"kind":"number","nodeType":"YulLiteral","src":"3259:2:17","type":"","value":"34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3239:3:17"},"nodeType":"YulFunctionCall","src":"3239:23:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3233:5:17"},"nodeType":"YulFunctionCall","src":"3233:30:17"},"variableNames":[{"name":"gasLimit","nodeType":"YulIdentifier","src":"3221:8:17"}]}]},"evmVersion":"berlin","externalReferences":[{"declaration":3911,"isOffset":false,"isSlot":false,"src":"3243:14:17","valueSize":1},{"declaration":3914,"isOffset":false,"isSlot":false,"src":"3221:8:17","valueSize":1}],"id":3924,"nodeType":"InlineAssembly","src":"3197:77:17"}]},"id":3926,"implemented":true,"kind":"function","modifiers":[],"name":"_getGasLimit","nameLocation":"3019:12:17","nodeType":"FunctionDefinition","parameters":{"id":3912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3911,"mutability":"mutable","name":"_adapterParams","nameLocation":"3045:14:17","nodeType":"VariableDeclaration","scope":3926,"src":"3032:27:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3910,"name":"bytes","nodeType":"ElementaryTypeName","src":"3032:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3031:29:17"},"returnParameters":{"id":3915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3914,"mutability":"mutable","name":"gasLimit","nameLocation":"3097:8:17","nodeType":"VariableDeclaration","scope":3926,"src":"3092:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3913,"name":"uint","nodeType":"ElementaryTypeName","src":"3092:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3091:15:17"},"scope":4177,"src":"3010:271:17","stateMutability":"pure","virtual":true,"visibility":"internal"},{"body":{"id":3950,"nodeType":"Block","src":"3503:94:17","statements":[{"expression":{"arguments":[{"id":3941,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3928,"src":"3542:8:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":3942,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3930,"src":"3552:8:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"arguments":[{"id":3945,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3570:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_LzApp_$4177","typeString":"contract LzApp"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_LzApp_$4177","typeString":"contract LzApp"}],"id":3944,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3562:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3943,"name":"address","nodeType":"ElementaryTypeName","src":"3562:7:17","typeDescriptions":{}}},"id":3946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3562:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3947,"name":"_configType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3934,"src":"3577:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3939,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"3521:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpoint_$3569","typeString":"contract ILayerZeroEndpoint"}},"id":3940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getConfig","nodeType":"MemberAccess","referencedDeclaration":3554,"src":"3521:20:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint16_$_t_uint16_$_t_address_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint16,uint16,address,uint256) view external returns (bytes memory)"}},"id":3948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3521:68:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3938,"id":3949,"nodeType":"Return","src":"3514:75:17"}]},"functionSelector":"f5ecbdbc","id":3951,"implemented":true,"kind":"function","modifiers":[],"name":"getConfig","nameLocation":"3395:9:17","nodeType":"FunctionDefinition","parameters":{"id":3935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3928,"mutability":"mutable","name":"_version","nameLocation":"3412:8:17","nodeType":"VariableDeclaration","scope":3951,"src":"3405:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3927,"name":"uint16","nodeType":"ElementaryTypeName","src":"3405:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3930,"mutability":"mutable","name":"_chainId","nameLocation":"3429:8:17","nodeType":"VariableDeclaration","scope":3951,"src":"3422:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3929,"name":"uint16","nodeType":"ElementaryTypeName","src":"3422:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3932,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3951,"src":"3439:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3931,"name":"address","nodeType":"ElementaryTypeName","src":"3439:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3934,"mutability":"mutable","name":"_configType","nameLocation":"3453:11:17","nodeType":"VariableDeclaration","scope":3951,"src":"3448:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3933,"name":"uint","nodeType":"ElementaryTypeName","src":"3448:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3404:61:17"},"returnParameters":{"id":3938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3937,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3951,"src":"3489:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3936,"name":"bytes","nodeType":"ElementaryTypeName","src":"3489:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3488:14:17"},"scope":4177,"src":"3386:211:17","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[3596],"body":{"id":3974,"nodeType":"Block","src":"3782:81:17","statements":[{"expression":{"arguments":[{"id":3968,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3953,"src":"3814:8:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":3969,"name":"_chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"3824:8:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":3970,"name":"_configType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3957,"src":"3834:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3971,"name":"_config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3959,"src":"3847:7:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":3965,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"3793:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpoint_$3569","typeString":"contract ILayerZeroEndpoint"}},"id":3967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"setConfig","nodeType":"MemberAccess","referencedDeclaration":3596,"src":"3793:20:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint16_$_t_uint16_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,uint16,uint256,bytes memory) external"}},"id":3972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3793:62:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3973,"nodeType":"ExpressionStatement","src":"3793:62:17"}]},"functionSelector":"cbed8b9c","id":3975,"implemented":true,"kind":"function","modifiers":[{"id":3963,"kind":"modifierInvocation","modifierName":{"id":3962,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"3772:9:17"},"nodeType":"ModifierInvocation","src":"3772:9:17"}],"name":"setConfig","nameLocation":"3668:9:17","nodeType":"FunctionDefinition","overrides":{"id":3961,"nodeType":"OverrideSpecifier","overrides":[],"src":"3763:8:17"},"parameters":{"id":3960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3953,"mutability":"mutable","name":"_version","nameLocation":"3685:8:17","nodeType":"VariableDeclaration","scope":3975,"src":"3678:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3952,"name":"uint16","nodeType":"ElementaryTypeName","src":"3678:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3955,"mutability":"mutable","name":"_chainId","nameLocation":"3702:8:17","nodeType":"VariableDeclaration","scope":3975,"src":"3695:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3954,"name":"uint16","nodeType":"ElementaryTypeName","src":"3695:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3957,"mutability":"mutable","name":"_configType","nameLocation":"3717:11:17","nodeType":"VariableDeclaration","scope":3975,"src":"3712:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3956,"name":"uint","nodeType":"ElementaryTypeName","src":"3712:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3959,"mutability":"mutable","name":"_config","nameLocation":"3745:7:17","nodeType":"VariableDeclaration","scope":3975,"src":"3730:22:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3958,"name":"bytes","nodeType":"ElementaryTypeName","src":"3730:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3677:76:17"},"returnParameters":{"id":3964,"nodeType":"ParameterList","parameters":[],"src":"3782:0:17"},"scope":4177,"src":"3659:204:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3601],"body":{"id":3989,"nodeType":"Block","src":"3940:54:17","statements":[{"expression":{"arguments":[{"id":3986,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3977,"src":"3977:8:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"expression":{"id":3983,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"3951:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpoint_$3569","typeString":"contract ILayerZeroEndpoint"}},"id":3985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"setSendVersion","nodeType":"MemberAccess","referencedDeclaration":3601,"src":"3951:25:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint16_$returns$__$","typeString":"function (uint16) external"}},"id":3987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3951:35:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3988,"nodeType":"ExpressionStatement","src":"3951:35:17"}]},"functionSelector":"07e0db17","id":3990,"implemented":true,"kind":"function","modifiers":[{"id":3981,"kind":"modifierInvocation","modifierName":{"id":3980,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"3930:9:17"},"nodeType":"ModifierInvocation","src":"3930:9:17"}],"name":"setSendVersion","nameLocation":"3880:14:17","nodeType":"FunctionDefinition","overrides":{"id":3979,"nodeType":"OverrideSpecifier","overrides":[],"src":"3921:8:17"},"parameters":{"id":3978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3977,"mutability":"mutable","name":"_version","nameLocation":"3902:8:17","nodeType":"VariableDeclaration","scope":3990,"src":"3895:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3976,"name":"uint16","nodeType":"ElementaryTypeName","src":"3895:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"3894:17:17"},"returnParameters":{"id":3982,"nodeType":"ParameterList","parameters":[],"src":"3940:0:17"},"scope":4177,"src":"3871:123:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3606],"body":{"id":4004,"nodeType":"Block","src":"4074:57:17","statements":[{"expression":{"arguments":[{"id":4001,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3992,"src":"4114:8:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"expression":{"id":3998,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"4085:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpoint_$3569","typeString":"contract ILayerZeroEndpoint"}},"id":4000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"setReceiveVersion","nodeType":"MemberAccess","referencedDeclaration":3606,"src":"4085:28:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint16_$returns$__$","typeString":"function (uint16) external"}},"id":4002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4085:38:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4003,"nodeType":"ExpressionStatement","src":"4085:38:17"}]},"functionSelector":"10ddb137","id":4005,"implemented":true,"kind":"function","modifiers":[{"id":3996,"kind":"modifierInvocation","modifierName":{"id":3995,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"4064:9:17"},"nodeType":"ModifierInvocation","src":"4064:9:17"}],"name":"setReceiveVersion","nameLocation":"4011:17:17","nodeType":"FunctionDefinition","overrides":{"id":3994,"nodeType":"OverrideSpecifier","overrides":[],"src":"4055:8:17"},"parameters":{"id":3993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3992,"mutability":"mutable","name":"_version","nameLocation":"4036:8:17","nodeType":"VariableDeclaration","scope":4005,"src":"4029:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3991,"name":"uint16","nodeType":"ElementaryTypeName","src":"4029:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"4028:17:17"},"returnParameters":{"id":3997,"nodeType":"ParameterList","parameters":[],"src":"4074:0:17"},"scope":4177,"src":"4002:129:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3613],"body":{"id":4022,"nodeType":"Block","src":"4243:74:17","statements":[{"expression":{"arguments":[{"id":4018,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4007,"src":"4284:11:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4019,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4009,"src":"4297:11:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":4015,"name":"lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"4254:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpoint_$3569","typeString":"contract ILayerZeroEndpoint"}},"id":4017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"forceResumeReceive","nodeType":"MemberAccess","referencedDeclaration":3613,"src":"4254:29:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory) external"}},"id":4020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4254:55:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4021,"nodeType":"ExpressionStatement","src":"4254:55:17"}]},"functionSelector":"42d65a8d","id":4023,"implemented":true,"kind":"function","modifiers":[{"id":4013,"kind":"modifierInvocation","modifierName":{"id":4012,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"4233:9:17"},"nodeType":"ModifierInvocation","src":"4233:9:17"}],"name":"forceResumeReceive","nameLocation":"4148:18:17","nodeType":"FunctionDefinition","overrides":{"id":4011,"nodeType":"OverrideSpecifier","overrides":[],"src":"4224:8:17"},"parameters":{"id":4010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4007,"mutability":"mutable","name":"_srcChainId","nameLocation":"4174:11:17","nodeType":"VariableDeclaration","scope":4023,"src":"4167:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4006,"name":"uint16","nodeType":"ElementaryTypeName","src":"4167:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4009,"mutability":"mutable","name":"_srcAddress","nameLocation":"4202:11:17","nodeType":"VariableDeclaration","scope":4023,"src":"4187:26:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4008,"name":"bytes","nodeType":"ElementaryTypeName","src":"4187:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4166:48:17"},"returnParameters":{"id":4014,"nodeType":"ParameterList","parameters":[],"src":"4243:0:17"},"scope":4177,"src":"4139:178:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4043,"nodeType":"Block","src":"4551:111:17","statements":[{"expression":{"id":4036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4032,"name":"trustedRemoteLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3710,"src":"4562:19:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes storage ref)"}},"id":4034,"indexExpression":{"id":4033,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"4582:11:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4562:32:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4035,"name":"_path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"4597:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"src":"4562:40:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":4037,"nodeType":"ExpressionStatement","src":"4562:40:17"},{"eventCall":{"arguments":[{"id":4039,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"4635:11:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4040,"name":"_path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"4648:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":4038,"name":"SetTrustedRemote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"4618:16:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory)"}},"id":4041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4618:36:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4042,"nodeType":"EmitStatement","src":"4613:41:17"}]},"functionSelector":"eb8d72b7","id":4044,"implemented":true,"kind":"function","modifiers":[{"id":4030,"kind":"modifierInvocation","modifierName":{"id":4029,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"4541:9:17"},"nodeType":"ModifierInvocation","src":"4541:9:17"}],"name":"setTrustedRemote","nameLocation":"4473:16:17","nodeType":"FunctionDefinition","parameters":{"id":4028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4025,"mutability":"mutable","name":"_srcChainId","nameLocation":"4497:11:17","nodeType":"VariableDeclaration","scope":4044,"src":"4490:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4024,"name":"uint16","nodeType":"ElementaryTypeName","src":"4490:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4027,"mutability":"mutable","name":"_path","nameLocation":"4525:5:17","nodeType":"VariableDeclaration","scope":4044,"src":"4510:20:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4026,"name":"bytes","nodeType":"ElementaryTypeName","src":"4510:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4489:42:17"},"returnParameters":{"id":4031,"nodeType":"ParameterList","parameters":[],"src":"4551:0:17"},"scope":4177,"src":"4464:198:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4071,"nodeType":"Block","src":"4776:175:17","statements":[{"expression":{"id":4064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4053,"name":"trustedRemoteLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3710,"src":"4787:19:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes storage ref)"}},"id":4055,"indexExpression":{"id":4054,"name":"_remoteChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4046,"src":"4807:14:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4787:35:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4058,"name":"_remoteAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4048,"src":"4842:14:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"arguments":[{"id":4061,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4866:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_LzApp_$4177","typeString":"contract LzApp"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_LzApp_$4177","typeString":"contract LzApp"}],"id":4060,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4858:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4059,"name":"address","nodeType":"ElementaryTypeName","src":"4858:7:17","typeDescriptions":{}}},"id":4062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4858:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4056,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4825:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"4825:16:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4825:47:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"4787:85:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":4065,"nodeType":"ExpressionStatement","src":"4787:85:17"},{"eventCall":{"arguments":[{"id":4067,"name":"_remoteChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4046,"src":"4912:14:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4068,"name":"_remoteAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4048,"src":"4928:14:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":4066,"name":"SetTrustedRemoteAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3734,"src":"4888:23:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory)"}},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4888:55:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4070,"nodeType":"EmitStatement","src":"4883:60:17"}]},"functionSelector":"a6c3d165","id":4072,"implemented":true,"kind":"function","modifiers":[{"id":4051,"kind":"modifierInvocation","modifierName":{"id":4050,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"4766:9:17"},"nodeType":"ModifierInvocation","src":"4766:9:17"}],"name":"setTrustedRemoteAddress","nameLocation":"4679:23:17","nodeType":"FunctionDefinition","parameters":{"id":4049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4046,"mutability":"mutable","name":"_remoteChainId","nameLocation":"4710:14:17","nodeType":"VariableDeclaration","scope":4072,"src":"4703:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4045,"name":"uint16","nodeType":"ElementaryTypeName","src":"4703:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4048,"mutability":"mutable","name":"_remoteAddress","nameLocation":"4741:14:17","nodeType":"VariableDeclaration","scope":4072,"src":"4726:29:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4047,"name":"bytes","nodeType":"ElementaryTypeName","src":"4726:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4702:54:17"},"returnParameters":{"id":4052,"nodeType":"ParameterList","parameters":[],"src":"4776:0:17"},"scope":4177,"src":"4670:281:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4102,"nodeType":"Block","src":"5052:237:17","statements":[{"assignments":[4080],"declarations":[{"constant":false,"id":4080,"mutability":"mutable","name":"path","nameLocation":"5076:4:17","nodeType":"VariableDeclaration","scope":4102,"src":"5063:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4079,"name":"bytes","nodeType":"ElementaryTypeName","src":"5063:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4084,"initialValue":{"baseExpression":{"id":4081,"name":"trustedRemoteLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3710,"src":"5083:19:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes storage ref)"}},"id":4083,"indexExpression":{"id":4082,"name":"_remoteChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4074,"src":"5103:14:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5083:35:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5063:55:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4086,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"5137:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5137:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5152:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5137:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c7a4170703a206e6f20747275737465642070617468207265636f7264","id":4090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5155:31:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_090ffd986411f3003f8dc74b3284ca36e66b7183a1b08562ef7e5313ae219552","typeString":"literal_string \"LzApp: no trusted path record\""},"value":"LzApp: no trusted path record"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_090ffd986411f3003f8dc74b3284ca36e66b7183a1b08562ef7e5313ae219552","typeString":"literal_string \"LzApp: no trusted path record\""}],"id":4085,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5129:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5129:58:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4092,"nodeType":"ExpressionStatement","src":"5129:58:17"},{"expression":{"arguments":[{"hexValue":"30","id":4095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5216:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4096,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"5219:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5219:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":4098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5233:2:17","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"5219:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4093,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"5205:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":4482,"src":"5205:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":4100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5205:31:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4078,"id":4101,"nodeType":"Return","src":"5198:38:17"}]},"functionSelector":"9f38369a","id":4103,"implemented":true,"kind":"function","modifiers":[],"name":"getTrustedRemoteAddress","nameLocation":"4968:23:17","nodeType":"FunctionDefinition","parameters":{"id":4075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4074,"mutability":"mutable","name":"_remoteChainId","nameLocation":"4999:14:17","nodeType":"VariableDeclaration","scope":4103,"src":"4992:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4073,"name":"uint16","nodeType":"ElementaryTypeName","src":"4992:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"4991:23:17"},"returnParameters":{"id":4078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4077,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4103,"src":"5038:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4076,"name":"bytes","nodeType":"ElementaryTypeName","src":"5038:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5037:14:17"},"scope":4177,"src":"4959:330:17","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4118,"nodeType":"Block","src":"5356:77:17","statements":[{"expression":{"id":4112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4110,"name":"precrime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"5367:8:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4111,"name":"_precrime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4105,"src":"5378:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5367:20:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4113,"nodeType":"ExpressionStatement","src":"5367:20:17"},{"eventCall":{"arguments":[{"id":4115,"name":"_precrime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4105,"src":"5415:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4114,"name":"SetPrecrime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"5403:11:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5403:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4117,"nodeType":"EmitStatement","src":"5398:27:17"}]},"functionSelector":"baf3292d","id":4119,"implemented":true,"kind":"function","modifiers":[{"id":4108,"kind":"modifierInvocation","modifierName":{"id":4107,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"5346:9:17"},"nodeType":"ModifierInvocation","src":"5346:9:17"}],"name":"setPrecrime","nameLocation":"5306:11:17","nodeType":"FunctionDefinition","parameters":{"id":4106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4105,"mutability":"mutable","name":"_precrime","nameLocation":"5326:9:17","nodeType":"VariableDeclaration","scope":4119,"src":"5318:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4104,"name":"address","nodeType":"ElementaryTypeName","src":"5318:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5317:19:17"},"returnParameters":{"id":4109,"nodeType":"ParameterList","parameters":[],"src":"5356:0:17"},"scope":4177,"src":"5297:136:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4151,"nodeType":"Block","src":"5536:189:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4131,"name":"_minGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"5555:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5565:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5555:11:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c7a4170703a20696e76616c6964206d696e476173","id":4134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5568:23:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_170b524e2f6dce4d59ce169fe07ac17c10010b9aa611a4f22b7dd0fbb2a8548e","typeString":"literal_string \"LzApp: invalid minGas\""},"value":"LzApp: invalid minGas"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_170b524e2f6dce4d59ce169fe07ac17c10010b9aa611a4f22b7dd0fbb2a8548e","typeString":"literal_string \"LzApp: invalid minGas\""}],"id":4130,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5547:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5547:45:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4136,"nodeType":"ExpressionStatement","src":"5547:45:17"},{"expression":{"id":4143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4137,"name":"minDstGasLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"5603:15:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_uint16_$_t_uint256_$_$","typeString":"mapping(uint16 => mapping(uint16 => uint256))"}},"id":4140,"indexExpression":{"id":4138,"name":"_dstChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"5619:11:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5603:28:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_uint256_$","typeString":"mapping(uint16 => uint256)"}},"id":4141,"indexExpression":{"id":4139,"name":"_packetType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"5632:11:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5603:41:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4142,"name":"_minGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"5647:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5603:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4144,"nodeType":"ExpressionStatement","src":"5603:51:17"},{"eventCall":{"arguments":[{"id":4146,"name":"_dstChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"5683:11:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4147,"name":"_packetType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"5696:11:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4148,"name":"_minGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"5709:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4145,"name":"SetMinDstGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3742,"src":"5670:12:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint16_$_t_uint16_$_t_uint256_$returns$__$","typeString":"function (uint16,uint16,uint256)"}},"id":4149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5670:47:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4150,"nodeType":"EmitStatement","src":"5665:52:17"}]},"functionSelector":"df2a5b3b","id":4152,"implemented":true,"kind":"function","modifiers":[{"id":4128,"kind":"modifierInvocation","modifierName":{"id":4127,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"5526:9:17"},"nodeType":"ModifierInvocation","src":"5526:9:17"}],"name":"setMinDstGas","nameLocation":"5450:12:17","nodeType":"FunctionDefinition","parameters":{"id":4126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4121,"mutability":"mutable","name":"_dstChainId","nameLocation":"5470:11:17","nodeType":"VariableDeclaration","scope":4152,"src":"5463:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4120,"name":"uint16","nodeType":"ElementaryTypeName","src":"5463:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4123,"mutability":"mutable","name":"_packetType","nameLocation":"5490:11:17","nodeType":"VariableDeclaration","scope":4152,"src":"5483:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4122,"name":"uint16","nodeType":"ElementaryTypeName","src":"5483:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4125,"mutability":"mutable","name":"_minGas","nameLocation":"5508:7:17","nodeType":"VariableDeclaration","scope":4152,"src":"5503:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4124,"name":"uint","nodeType":"ElementaryTypeName","src":"5503:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5462:54:17"},"returnParameters":{"id":4129,"nodeType":"ParameterList","parameters":[],"src":"5536:0:17"},"scope":4177,"src":"5441:284:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4175,"nodeType":"Block","src":"5925:148:17","statements":[{"assignments":[4162],"declarations":[{"constant":false,"id":4162,"mutability":"mutable","name":"trustedSource","nameLocation":"5949:13:17","nodeType":"VariableDeclaration","scope":4175,"src":"5936:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4161,"name":"bytes","nodeType":"ElementaryTypeName","src":"5936:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4166,"initialValue":{"baseExpression":{"id":4163,"name":"trustedRemoteLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3710,"src":"5965:19:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_bytes_storage_$","typeString":"mapping(uint16 => bytes storage ref)"}},"id":4165,"indexExpression":{"id":4164,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"5985:11:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5965:32:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5936:61:17"},{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4168,"name":"trustedSource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"6025:13:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4167,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6015:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6015:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":4171,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"6053:11:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":4170,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6043:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6043:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6015:50:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4160,"id":4174,"nodeType":"Return","src":"6008:57:17"}]},"functionSelector":"3d8b38f6","id":4176,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedRemote","nameLocation":"5832:15:17","nodeType":"FunctionDefinition","parameters":{"id":4157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4154,"mutability":"mutable","name":"_srcChainId","nameLocation":"5855:11:17","nodeType":"VariableDeclaration","scope":4176,"src":"5848:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4153,"name":"uint16","nodeType":"ElementaryTypeName","src":"5848:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4156,"mutability":"mutable","name":"_srcAddress","nameLocation":"5883:11:17","nodeType":"VariableDeclaration","scope":4176,"src":"5868:26:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4155,"name":"bytes","nodeType":"ElementaryTypeName","src":"5868:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5847:48:17"},"returnParameters":{"id":4160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4159,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4176,"src":"5919:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4158,"name":"bool","nodeType":"ElementaryTypeName","src":"5919:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5918:6:17"},"scope":4177,"src":"5823:250:17","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4178,"src":"319:5757:17","usedErrors":[]}],"src":"35:6041:17"},"id":17},"contracts/extensions/NonblockingLzApp.sol":{"ast":{"absolutePath":"contracts/extensions/NonblockingLzApp.sol","exportedSymbols":{"BytesLib":[4751],"Context":[1570],"ExcessivelySafeCall":[4848],"ILayerZeroEndpoint":[3569],"ILayerZeroReceiver":[3583],"ILayerZeroUserApplicationConfig":[3614],"LzApp":[4177],"NonblockingLzApp":[4418],"Ownable":[112]},"id":4419,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4179,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"35:23:18"},{"absolutePath":"contracts/extensions/LzApp.sol","file":"./LzApp.sol","id":4180,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4419,"sourceUnit":4178,"src":"62:21:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/extensions/util/ExcessivelySafeCall.sol","file":"./util/ExcessivelySafeCall.sol","id":4181,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4419,"sourceUnit":4849,"src":"85:40:18","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4182,"name":"LzApp","nodeType":"IdentifierPath","referencedDeclaration":4177,"src":"516:5:18"},"id":4183,"nodeType":"InheritanceSpecifier","src":"516:5:18"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":4418,"linearizedBaseContracts":[4418,4177,3614,3583,112,1570],"name":"NonblockingLzApp","nameLocation":"496:16:18","nodeType":"ContractDefinition","nodes":[{"id":4186,"libraryName":{"id":4184,"name":"ExcessivelySafeCall","nodeType":"IdentifierPath","referencedDeclaration":4848,"src":"535:19:18"},"nodeType":"UsingForDirective","src":"529:38:18","typeName":{"id":4185,"name":"address","nodeType":"ElementaryTypeName","src":"559:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":4194,"nodeType":"Block","src":"623:2:18","statements":[]},"id":4195,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4191,"name":"_endpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"612:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4192,"kind":"baseConstructorSpecifier","modifierName":{"id":4190,"name":"LzApp","nodeType":"IdentifierPath","referencedDeclaration":4177,"src":"606:5:18"},"nodeType":"ModifierInvocation","src":"606:16:18"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4188,"mutability":"mutable","name":"_endpoint","nameLocation":"595:9:18","nodeType":"VariableDeclaration","scope":4195,"src":"587:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4187,"name":"address","nodeType":"ElementaryTypeName","src":"587:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"586:19:18"},"returnParameters":{"id":4193,"nodeType":"ParameterList","parameters":[],"src":"623:0:18"},"scope":4418,"src":"575:50:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"functionSelector":"5b8c41e6","id":4203,"mutability":"mutable","name":"failedMessages","nameLocation":"704:14:18","nodeType":"VariableDeclaration","scope":4418,"src":"633:85:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_bytes_memory_ptr_$_t_mapping$_t_uint64_$_t_bytes32_$_$_$","typeString":"mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))"},"typeName":{"id":4202,"keyType":{"id":4196,"name":"uint16","nodeType":"ElementaryTypeName","src":"641:6:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Mapping","src":"633:63:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_bytes_memory_ptr_$_t_mapping$_t_uint64_$_t_bytes32_$_$_$","typeString":"mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))"},"valueType":{"id":4201,"keyType":{"id":4197,"name":"bytes","nodeType":"ElementaryTypeName","src":"659:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"nodeType":"Mapping","src":"651:44:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes_memory_ptr_$_t_mapping$_t_uint64_$_t_bytes32_$_$","typeString":"mapping(bytes => mapping(uint64 => bytes32))"},"valueType":{"id":4200,"keyType":{"id":4198,"name":"uint64","nodeType":"ElementaryTypeName","src":"676:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Mapping","src":"668:26:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_bytes32_$","typeString":"mapping(uint64 => bytes32)"},"valueType":{"id":4199,"name":"bytes32","nodeType":"ElementaryTypeName","src":"686:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}}}},"visibility":"public"},{"anonymous":false,"id":4215,"name":"MessageFailed","nameLocation":"733:13:18","nodeType":"EventDefinition","parameters":{"id":4214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4205,"indexed":false,"mutability":"mutable","name":"_srcChainId","nameLocation":"754:11:18","nodeType":"VariableDeclaration","scope":4215,"src":"747:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4204,"name":"uint16","nodeType":"ElementaryTypeName","src":"747:6:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4207,"indexed":false,"mutability":"mutable","name":"_srcAddress","nameLocation":"773:11:18","nodeType":"VariableDeclaration","scope":4215,"src":"767:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4206,"name":"bytes","nodeType":"ElementaryTypeName","src":"767:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4209,"indexed":false,"mutability":"mutable","name":"_nonce","nameLocation":"793:6:18","nodeType":"VariableDeclaration","scope":4215,"src":"786:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4208,"name":"uint64","nodeType":"ElementaryTypeName","src":"786:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4211,"indexed":false,"mutability":"mutable","name":"_payload","nameLocation":"807:8:18","nodeType":"VariableDeclaration","scope":4215,"src":"801:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4210,"name":"bytes","nodeType":"ElementaryTypeName","src":"801:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4213,"indexed":false,"mutability":"mutable","name":"_reason","nameLocation":"823:7:18","nodeType":"VariableDeclaration","scope":4215,"src":"817:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4212,"name":"bytes","nodeType":"ElementaryTypeName","src":"817:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"746:85:18"},"src":"727:105:18"},{"anonymous":false,"id":4225,"name":"RetryMessageSuccess","nameLocation":"844:19:18","nodeType":"EventDefinition","parameters":{"id":4224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4217,"indexed":false,"mutability":"mutable","name":"_srcChainId","nameLocation":"871:11:18","nodeType":"VariableDeclaration","scope":4225,"src":"864:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4216,"name":"uint16","nodeType":"ElementaryTypeName","src":"864:6:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4219,"indexed":false,"mutability":"mutable","name":"_srcAddress","nameLocation":"890:11:18","nodeType":"VariableDeclaration","scope":4225,"src":"884:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4218,"name":"bytes","nodeType":"ElementaryTypeName","src":"884:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4221,"indexed":false,"mutability":"mutable","name":"_nonce","nameLocation":"910:6:18","nodeType":"VariableDeclaration","scope":4225,"src":"903:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4220,"name":"uint64","nodeType":"ElementaryTypeName","src":"903:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4223,"indexed":false,"mutability":"mutable","name":"_payloadHash","nameLocation":"926:12:18","nodeType":"VariableDeclaration","scope":4225,"src":"918:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4222,"name":"bytes32","nodeType":"ElementaryTypeName","src":"918:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"863:76:18"},"src":"838:102:18"},{"baseFunctions":[3824],"body":{"id":4273,"nodeType":"Block","src":"1140:376:18","statements":[{"assignments":[4238,4240],"declarations":[{"constant":false,"id":4238,"mutability":"mutable","name":"success","nameLocation":"1157:7:18","nodeType":"VariableDeclaration","scope":4273,"src":"1152:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4237,"name":"bool","nodeType":"ElementaryTypeName","src":"1152:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4240,"mutability":"mutable","name":"reason","nameLocation":"1179:6:18","nodeType":"VariableDeclaration","scope":4273,"src":"1166:19:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4239,"name":"bytes","nodeType":"ElementaryTypeName","src":"1166:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4260,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4246,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"1223:7:18","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":4247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1223:9:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"313530","id":4248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1234:3:18","typeDescriptions":{"typeIdentifier":"t_rational_150_by_1","typeString":"int_const 150"},"value":"150"},{"arguments":[{"expression":{"expression":{"id":4251,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1262:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_NonblockingLzApp_$4418","typeString":"contract NonblockingLzApp"}},"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"nonblockingLzReceive","nodeType":"MemberAccess","referencedDeclaration":4338,"src":"1262:25:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$_t_uint64_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory,uint64,bytes memory) external"}},"id":4253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"1262:34:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4254,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4227,"src":"1298:11:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4255,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4229,"src":"1311:11:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4256,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4231,"src":"1324:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":4257,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4233,"src":"1332:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4249,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1239:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4250,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1239:22:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1239:102:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_150_by_1","typeString":"int_const 150"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":4243,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1197:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_NonblockingLzApp_$4418","typeString":"contract NonblockingLzApp"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_NonblockingLzApp_$4418","typeString":"contract NonblockingLzApp"}],"id":4242,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1189:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4241,"name":"address","nodeType":"ElementaryTypeName","src":"1189:7:18","typeDescriptions":{}}},"id":4244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1189:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"excessivelySafeCall","nodeType":"MemberAccess","referencedDeclaration":4791,"src":"1189:33:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint16_$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,uint256,uint16,bytes memory) returns (bool,bytes memory)"}},"id":4259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1189:153:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1151:191:18"},{"condition":{"id":4262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1401:8:18","subExpression":{"id":4261,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4238,"src":"1402:7:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4272,"nodeType":"IfStatement","src":"1397:112:18","trueBody":{"id":4271,"nodeType":"Block","src":"1411:98:18","statements":[{"expression":{"arguments":[{"id":4264,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4227,"src":"1446:11:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4265,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4229,"src":"1459:11:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4266,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4231,"src":"1472:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":4267,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4233,"src":"1480:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4268,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4240,"src":"1490:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4263,"name":"_storeFailedMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4308,"src":"1426:19:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$_t_uint64_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory,uint64,bytes memory,bytes memory)"}},"id":4269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1426:71:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4270,"nodeType":"ExpressionStatement","src":"1426:71:18"}]}}]},"id":4274,"implemented":true,"kind":"function","modifiers":[],"name":"_blockingLzReceive","nameLocation":"1011:18:18","nodeType":"FunctionDefinition","overrides":{"id":4235,"nodeType":"OverrideSpecifier","overrides":[],"src":"1131:8:18"},"parameters":{"id":4234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4227,"mutability":"mutable","name":"_srcChainId","nameLocation":"1037:11:18","nodeType":"VariableDeclaration","scope":4274,"src":"1030:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4226,"name":"uint16","nodeType":"ElementaryTypeName","src":"1030:6:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4229,"mutability":"mutable","name":"_srcAddress","nameLocation":"1063:11:18","nodeType":"VariableDeclaration","scope":4274,"src":"1050:24:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4228,"name":"bytes","nodeType":"ElementaryTypeName","src":"1050:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4231,"mutability":"mutable","name":"_nonce","nameLocation":"1083:6:18","nodeType":"VariableDeclaration","scope":4274,"src":"1076:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4230,"name":"uint64","nodeType":"ElementaryTypeName","src":"1076:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4233,"mutability":"mutable","name":"_payload","nameLocation":"1104:8:18","nodeType":"VariableDeclaration","scope":4274,"src":"1091:21:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4232,"name":"bytes","nodeType":"ElementaryTypeName","src":"1091:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1029:84:18"},"returnParameters":{"id":4236,"nodeType":"ParameterList","parameters":[],"src":"1140:0:18"},"scope":4418,"src":"1002:514:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4307,"nodeType":"Block","src":"1676:171:18","statements":[{"expression":{"id":4297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4287,"name":"failedMessages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4203,"src":"1687:14:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_bytes_memory_ptr_$_t_mapping$_t_uint64_$_t_bytes32_$_$_$","typeString":"mapping(uint16 => mapping(bytes memory => mapping(uint64 => bytes32)))"}},"id":4291,"indexExpression":{"id":4288,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4276,"src":"1702:11:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1687:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes_memory_ptr_$_t_mapping$_t_uint64_$_t_bytes32_$_$","typeString":"mapping(bytes memory => mapping(uint64 => bytes32))"}},"id":4292,"indexExpression":{"id":4289,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"1715:11:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1687:40:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_bytes32_$","typeString":"mapping(uint64 => bytes32)"}},"id":4293,"indexExpression":{"id":4290,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4280,"src":"1728:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1687:48:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4295,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4282,"src":"1748:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4294,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1738:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1738:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1687:70:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4298,"nodeType":"ExpressionStatement","src":"1687:70:18"},{"eventCall":{"arguments":[{"id":4300,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4276,"src":"1787:11:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4301,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"1800:11:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4302,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4280,"src":"1813:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":4303,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4282,"src":"1821:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4304,"name":"_reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"1831:7:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4299,"name":"MessageFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4215,"src":"1773:13:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$_t_uint64_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory,uint64,bytes memory,bytes memory)"}},"id":4305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1773:66:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4306,"nodeType":"EmitStatement","src":"1768:71:18"}]},"id":4308,"implemented":true,"kind":"function","modifiers":[],"name":"_storeFailedMessage","nameLocation":"1533:19:18","nodeType":"FunctionDefinition","parameters":{"id":4285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4276,"mutability":"mutable","name":"_srcChainId","nameLocation":"1560:11:18","nodeType":"VariableDeclaration","scope":4308,"src":"1553:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4275,"name":"uint16","nodeType":"ElementaryTypeName","src":"1553:6:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4278,"mutability":"mutable","name":"_srcAddress","nameLocation":"1586:11:18","nodeType":"VariableDeclaration","scope":4308,"src":"1573:24:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4277,"name":"bytes","nodeType":"ElementaryTypeName","src":"1573:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4280,"mutability":"mutable","name":"_nonce","nameLocation":"1606:6:18","nodeType":"VariableDeclaration","scope":4308,"src":"1599:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4279,"name":"uint64","nodeType":"ElementaryTypeName","src":"1599:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4282,"mutability":"mutable","name":"_payload","nameLocation":"1627:8:18","nodeType":"VariableDeclaration","scope":4308,"src":"1614:21:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4281,"name":"bytes","nodeType":"ElementaryTypeName","src":"1614:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4284,"mutability":"mutable","name":"_reason","nameLocation":"1650:7:18","nodeType":"VariableDeclaration","scope":4308,"src":"1637:20:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4283,"name":"bytes","nodeType":"ElementaryTypeName","src":"1637:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1552:106:18"},"returnParameters":{"id":4286,"nodeType":"ParameterList","parameters":[],"src":"1676:0:18"},"scope":4418,"src":"1524:323:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4337,"nodeType":"Block","src":"1988:213:18","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4320,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"2045:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2045:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":4324,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2069:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_NonblockingLzApp_$4418","typeString":"contract NonblockingLzApp"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_NonblockingLzApp_$4418","typeString":"contract NonblockingLzApp"}],"id":4323,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2061:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4322,"name":"address","nodeType":"ElementaryTypeName","src":"2061:7:18","typeDescriptions":{}}},"id":4325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2061:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2045:29:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d757374206265204c7a417070","id":4327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2076:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_040dbcd22d0c850129389688c2109073ca44dde7f3a3f87432ca92b23d42a4fa","typeString":"literal_string \"NonblockingLzApp: caller must be LzApp\""},"value":"NonblockingLzApp: caller must be LzApp"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_040dbcd22d0c850129389688c2109073ca44dde7f3a3f87432ca92b23d42a4fa","typeString":"literal_string \"NonblockingLzApp: caller must be LzApp\""}],"id":4319,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2037:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2037:80:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4329,"nodeType":"ExpressionStatement","src":"2037:80:18"},{"expression":{"arguments":[{"id":4331,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4310,"src":"2150:11:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4332,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4312,"src":"2163:11:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":4333,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"2176:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":4334,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4316,"src":"2184:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":4330,"name":"_nonblockingLzReceive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"2128:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$_t_uint64_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory,uint64,bytes memory)"}},"id":4335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2128:65:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4336,"nodeType":"ExpressionStatement","src":"2128:65:18"}]},"functionSelector":"66ad5c8a","id":4338,"implemented":true,"kind":"function","modifiers":[],"name":"nonblockingLzReceive","nameLocation":"1864:20:18","nodeType":"FunctionDefinition","parameters":{"id":4317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4310,"mutability":"mutable","name":"_srcChainId","nameLocation":"1892:11:18","nodeType":"VariableDeclaration","scope":4338,"src":"1885:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4309,"name":"uint16","nodeType":"ElementaryTypeName","src":"1885:6:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4312,"mutability":"mutable","name":"_srcAddress","nameLocation":"1920:11:18","nodeType":"VariableDeclaration","scope":4338,"src":"1905:26:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4311,"name":"bytes","nodeType":"ElementaryTypeName","src":"1905:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4314,"mutability":"mutable","name":"_nonce","nameLocation":"1940:6:18","nodeType":"VariableDeclaration","scope":4338,"src":"1933:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4313,"name":"uint64","nodeType":"ElementaryTypeName","src":"1933:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4316,"mutability":"mutable","name":"_payload","nameLocation":"1963:8:18","nodeType":"VariableDeclaration","scope":4338,"src":"1948:23:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4315,"name":"bytes","nodeType":"ElementaryTypeName","src":"1948:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1884:88:18"},"returnParameters":{"id":4318,"nodeType":"ParameterList","parameters":[],"src":"1988:0:18"},"scope":4418,"src":"1855:346:18","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":4349,"implemented":false,"kind":"function","modifiers":[],"name":"_nonblockingLzReceive","nameLocation":"2256:21:18","nodeType":"FunctionDefinition","parameters":{"id":4347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4340,"mutability":"mutable","name":"_srcChainId","nameLocation":"2285:11:18","nodeType":"VariableDeclaration","scope":4349,"src":"2278:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4339,"name":"uint16","nodeType":"ElementaryTypeName","src":"2278:6:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4342,"mutability":"mutable","name":"_srcAddress","nameLocation":"2311:11:18","nodeType":"VariableDeclaration","scope":4349,"src":"2298:24:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4341,"name":"bytes","nodeType":"ElementaryTypeName","src":"2298:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4344,"mutability":"mutable","name":"_nonce","nameLocation":"2331:6:18","nodeType":"VariableDeclaration","scope":4349,"src":"2324:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4343,"name":"uint64","nodeType":"ElementaryTypeName","src":"2324:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4346,"mutability":"mutable","name":"_payload","nameLocation":"2352:8:18","nodeType":"VariableDeclaration","scope":4349,"src":"2339:21:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4345,"name":"bytes","nodeType":"ElementaryTypeName","src":"2339:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2277:84:18"},"returnParameters":{"id":4348,"nodeType":"ParameterList","parameters":[],"src":"2378:0:18"},"scope":4418,"src":"2247:132:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4416,"nodeType":"Block","src":"2520:634:18","statements":[{"assignments":[4361],"declarations":[{"constant":false,"id":4361,"mutability":"mutable","name":"payloadHash","nameLocation":"2584:11:18","nodeType":"VariableDeclaration","scope":4416,"src":"2576:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4360,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2576:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4369,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4362,"name":"failedMessages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4203,"src":"2598:14:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_bytes_memory_ptr_$_t_mapping$_t_uint64_$_t_bytes32_$_$_$","typeString":"mapping(uint16 => mapping(bytes memory => mapping(uint64 => bytes32)))"}},"id":4364,"indexExpression":{"id":4363,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4351,"src":"2613:11:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2598:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes_memory_ptr_$_t_mapping$_t_uint64_$_t_bytes32_$_$","typeString":"mapping(bytes memory => mapping(uint64 => bytes32))"}},"id":4366,"indexExpression":{"id":4365,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4353,"src":"2626:11:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2598:40:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_bytes32_$","typeString":"mapping(uint64 => bytes32)"}},"id":4368,"indexExpression":{"id":4367,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"2639:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2598:48:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2576:70:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4371,"name":"payloadHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"2665:11:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2688:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4373,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2680:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4372,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2680:7:18","typeDescriptions":{}}},"id":4375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2680:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2665:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d657373616765","id":4377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2692:37:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_2f696afe693778252c14fa484dbc5c908ccf2058495ef32014aba88a3b963894","typeString":"literal_string \"NonblockingLzApp: no stored message\""},"value":"NonblockingLzApp: no stored message"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2f696afe693778252c14fa484dbc5c908ccf2058495ef32014aba88a3b963894","typeString":"literal_string \"NonblockingLzApp: no stored message\""}],"id":4370,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2657:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2657:73:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4379,"nodeType":"ExpressionStatement","src":"2657:73:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4382,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4357,"src":"2759:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":4381,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2749:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2749:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4384,"name":"payloadHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"2772:11:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2749:34:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f6164","id":4386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2785:35:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_e38e13663a917dea0c771faed9aebf77b2adba5435a5cc4f7207d4f2c63ce6a3","typeString":"literal_string \"NonblockingLzApp: invalid payload\""},"value":"NonblockingLzApp: invalid payload"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e38e13663a917dea0c771faed9aebf77b2adba5435a5cc4f7207d4f2c63ce6a3","typeString":"literal_string \"NonblockingLzApp: invalid payload\""}],"id":4380,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2741:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2741:80:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4388,"nodeType":"ExpressionStatement","src":"2741:80:18"},{"expression":{"id":4400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4389,"name":"failedMessages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4203,"src":"2869:14:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint16_$_t_mapping$_t_bytes_memory_ptr_$_t_mapping$_t_uint64_$_t_bytes32_$_$_$","typeString":"mapping(uint16 => mapping(bytes memory => mapping(uint64 => bytes32)))"}},"id":4393,"indexExpression":{"id":4390,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4351,"src":"2884:11:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2869:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes_memory_ptr_$_t_mapping$_t_uint64_$_t_bytes32_$_$","typeString":"mapping(bytes memory => mapping(uint64 => bytes32))"}},"id":4394,"indexExpression":{"id":4391,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4353,"src":"2897:11:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2869:40:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_bytes32_$","typeString":"mapping(uint64 => bytes32)"}},"id":4395,"indexExpression":{"id":4392,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"2910:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2869:48:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":4398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2928:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4397,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2920:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4396,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2920:7:18","typeDescriptions":{}}},"id":4399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2920:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2869:61:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4401,"nodeType":"ExpressionStatement","src":"2869:61:18"},{"expression":{"arguments":[{"id":4403,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4351,"src":"3021:11:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4404,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4353,"src":"3034:11:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":4405,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"3047:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":4406,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4357,"src":"3055:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":4402,"name":"_nonblockingLzReceive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"2999:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$_t_uint64_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,bytes memory,uint64,bytes memory)"}},"id":4407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2999:65:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4408,"nodeType":"ExpressionStatement","src":"2999:65:18"},{"eventCall":{"arguments":[{"id":4410,"name":"_srcChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4351,"src":"3100:11:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4411,"name":"_srcAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4353,"src":"3113:11:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":4412,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"3126:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":4413,"name":"payloadHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"3134:11:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4409,"name":"RetryMessageSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4225,"src":"3080:19:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint16_$_t_bytes_memory_ptr_$_t_uint64_$_t_bytes32_$returns$__$","typeString":"function (uint16,bytes memory,uint64,bytes32)"}},"id":4414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3080:66:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4415,"nodeType":"EmitStatement","src":"3075:71:18"}]},"functionSelector":"d1deba1f","id":4417,"implemented":true,"kind":"function","modifiers":[],"name":"retryMessage","nameLocation":"2396:12:18","nodeType":"FunctionDefinition","parameters":{"id":4358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4351,"mutability":"mutable","name":"_srcChainId","nameLocation":"2416:11:18","nodeType":"VariableDeclaration","scope":4417,"src":"2409:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4350,"name":"uint16","nodeType":"ElementaryTypeName","src":"2409:6:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4353,"mutability":"mutable","name":"_srcAddress","nameLocation":"2444:11:18","nodeType":"VariableDeclaration","scope":4417,"src":"2429:26:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4352,"name":"bytes","nodeType":"ElementaryTypeName","src":"2429:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4355,"mutability":"mutable","name":"_nonce","nameLocation":"2464:6:18","nodeType":"VariableDeclaration","scope":4417,"src":"2457:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4354,"name":"uint64","nodeType":"ElementaryTypeName","src":"2457:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4357,"mutability":"mutable","name":"_payload","nameLocation":"2487:8:18","nodeType":"VariableDeclaration","scope":4417,"src":"2472:23:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4356,"name":"bytes","nodeType":"ElementaryTypeName","src":"2472:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2408:88:18"},"returnParameters":{"id":4359,"nodeType":"ParameterList","parameters":[],"src":"2520:0:18"},"scope":4418,"src":"2387:767:18","stateMutability":"payable","virtual":true,"visibility":"public"}],"scope":4419,"src":"478:2679:18","usedErrors":[]}],"src":"35:3122:18"},"id":18},"contracts/extensions/util/BytesLib.sol":{"ast":{"absolutePath":"contracts/extensions/util/BytesLib.sol","exportedSymbols":{"BytesLib":[4751]},"id":4752,"license":"Unlicense","nodeType":"SourceUnit","nodes":[{"id":4420,"literals":["solidity",">=","0.8",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"344:31:19"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":4751,"linearizedBaseContracts":[4751],"name":"BytesLib","nameLocation":"389:8:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":4435,"nodeType":"Block","src":"552:2764:19","statements":[{"assignments":[4430],"declarations":[{"constant":false,"id":4430,"mutability":"mutable","name":"tempBytes","nameLocation":"576:9:19","nodeType":"VariableDeclaration","scope":4435,"src":"563:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4429,"name":"bytes","nodeType":"ElementaryTypeName","src":"563:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4431,"nodeType":"VariableDeclarationStatement","src":"563:22:19"},{"AST":{"nodeType":"YulBlock","src":"607:2673:19","statements":[{"nodeType":"YulAssignment","src":"746:24:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"765:4:19","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"759:5:19"},"nodeType":"YulFunctionCall","src":"759:11:19"},"variableNames":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"746:9:19"}]},{"nodeType":"YulVariableDeclaration","src":"898:30:19","value":{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"918:9:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"912:5:19"},"nodeType":"YulFunctionCall","src":"912:16:19"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"902:6:19","type":""}]},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"949:9:19"},{"name":"length","nodeType":"YulIdentifier","src":"960:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"942:6:19"},"nodeType":"YulFunctionCall","src":"942:25:19"},"nodeType":"YulExpressionStatement","src":"942:25:19"},{"nodeType":"YulVariableDeclaration","src":"1170:30:19","value":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"1184:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1195:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1180:3:19"},"nodeType":"YulFunctionCall","src":"1180:20:19"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"1174:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1320:26:19","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"1335:2:19"},{"name":"length","nodeType":"YulIdentifier","src":"1339:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1331:3:19"},"nodeType":"YulFunctionCall","src":"1331:15:19"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"1324:3:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"1721:158:19","statements":[{"expression":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"1850:2:19"},{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"1860:2:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1854:5:19"},"nodeType":"YulFunctionCall","src":"1854:9:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1843:6:19"},"nodeType":"YulFunctionCall","src":"1843:21:19"},"nodeType":"YulExpressionStatement","src":"1843:21:19"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"1554:2:19"},{"name":"end","nodeType":"YulIdentifier","src":"1558:3:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1551:2:19"},"nodeType":"YulFunctionCall","src":"1551:11:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1563:157:19","statements":[{"nodeType":"YulAssignment","src":"1649:19:19","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"1659:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"1663:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1655:3:19"},"nodeType":"YulFunctionCall","src":"1655:13:19"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"1649:2:19"}]},{"nodeType":"YulAssignment","src":"1686:19:19","value":{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"1696:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"1700:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1692:3:19"},"nodeType":"YulFunctionCall","src":"1692:13:19"},"variableNames":[{"name":"cc","nodeType":"YulIdentifier","src":"1686:2:19"}]}]},"pre":{"nodeType":"YulBlock","src":"1366:184:19","statements":[{"nodeType":"YulVariableDeclaration","src":"1505:30:19","value":{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"1519:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1530:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1515:3:19"},"nodeType":"YulFunctionCall","src":"1515:20:19"},"variables":[{"name":"cc","nodeType":"YulTypedName","src":"1509:2:19","type":""}]}]},"src":"1362:517:19"},{"nodeType":"YulAssignment","src":"2073:27:19","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"2089:10:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2083:5:19"},"nodeType":"YulFunctionCall","src":"2083:17:19"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2073:6:19"}]},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"2121:9:19"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2136:6:19"},{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"2150:9:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2144:5:19"},"nodeType":"YulFunctionCall","src":"2144:16:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2132:3:19"},"nodeType":"YulFunctionCall","src":"2132:29:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2114:6:19"},"nodeType":"YulFunctionCall","src":"2114:48:19"},"nodeType":"YulExpressionStatement","src":"2114:48:19"},{"nodeType":"YulAssignment","src":"2296:9:19","value":{"name":"end","nodeType":"YulIdentifier","src":"2302:3:19"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"2296:2:19"}]},{"nodeType":"YulAssignment","src":"2427:22:19","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2438:2:19"},{"name":"length","nodeType":"YulIdentifier","src":"2442:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2434:3:19"},"nodeType":"YulFunctionCall","src":"2434:15:19"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2427:3:19"}]},{"body":{"nodeType":"YulBlock","src":"2638:55:19","statements":[{"expression":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2664:2:19"},{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"2674:2:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2668:5:19"},"nodeType":"YulFunctionCall","src":"2668:9:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2657:6:19"},"nodeType":"YulFunctionCall","src":"2657:21:19"},"nodeType":"YulExpressionStatement","src":"2657:21:19"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2538:2:19"},{"name":"end","nodeType":"YulIdentifier","src":"2542:3:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2535:2:19"},"nodeType":"YulFunctionCall","src":"2535:11:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2547:90:19","statements":[{"nodeType":"YulAssignment","src":"2566:19:19","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2576:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"2580:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2572:3:19"},"nodeType":"YulFunctionCall","src":"2572:13:19"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"2566:2:19"}]},{"nodeType":"YulAssignment","src":"2603:19:19","value":{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"2613:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"2617:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2609:3:19"},"nodeType":"YulFunctionCall","src":"2609:13:19"},"variableNames":[{"name":"cc","nodeType":"YulIdentifier","src":"2603:2:19"}]}]},"pre":{"nodeType":"YulBlock","src":"2469:65:19","statements":[{"nodeType":"YulVariableDeclaration","src":"2488:31:19","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"2502:10:19"},{"kind":"number","nodeType":"YulLiteral","src":"2514:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2498:3:19"},"nodeType":"YulFunctionCall","src":"2498:21:19"},"variables":[{"name":"cc","nodeType":"YulTypedName","src":"2492:2:19","type":""}]}]},"src":"2465:228:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3112:4:19","type":"","value":"0x40"},{"arguments":[{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"3144:3:19"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3160:6:19"},{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"3174:9:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3168:5:19"},"nodeType":"YulFunctionCall","src":"3168:16:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3156:3:19"},"nodeType":"YulFunctionCall","src":"3156:29:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3149:6:19"},"nodeType":"YulFunctionCall","src":"3149:37:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3140:3:19"},"nodeType":"YulFunctionCall","src":"3140:47:19"},{"kind":"number","nodeType":"YulLiteral","src":"3189:2:19","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3136:3:19"},"nodeType":"YulFunctionCall","src":"3136:56:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3211:2:19","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3207:3:19"},"nodeType":"YulFunctionCall","src":"3207:7:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3118:3:19"},"nodeType":"YulFunctionCall","src":"3118:150:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3105:6:19"},"nodeType":"YulFunctionCall","src":"3105:164:19"},"nodeType":"YulExpressionStatement","src":"3105:164:19"}]},"evmVersion":"berlin","externalReferences":[{"declaration":4424,"isOffset":false,"isSlot":false,"src":"2089:10:19","valueSize":1},{"declaration":4424,"isOffset":false,"isSlot":false,"src":"2502:10:19","valueSize":1},{"declaration":4422,"isOffset":false,"isSlot":false,"src":"1519:9:19","valueSize":1},{"declaration":4422,"isOffset":false,"isSlot":false,"src":"3174:9:19","valueSize":1},{"declaration":4422,"isOffset":false,"isSlot":false,"src":"918:9:19","valueSize":1},{"declaration":4430,"isOffset":false,"isSlot":false,"src":"1184:9:19","valueSize":1},{"declaration":4430,"isOffset":false,"isSlot":false,"src":"2121:9:19","valueSize":1},{"declaration":4430,"isOffset":false,"isSlot":false,"src":"2150:9:19","valueSize":1},{"declaration":4430,"isOffset":false,"isSlot":false,"src":"746:9:19","valueSize":1},{"declaration":4430,"isOffset":false,"isSlot":false,"src":"949:9:19","valueSize":1}],"id":4432,"nodeType":"InlineAssembly","src":"598:2682:19"},{"expression":{"id":4433,"name":"tempBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4430,"src":"3299:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4428,"id":4434,"nodeType":"Return","src":"3292:16:19"}]},"id":4436,"implemented":true,"kind":"function","modifiers":[],"name":"concat","nameLocation":"414:6:19","nodeType":"FunctionDefinition","parameters":{"id":4425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4422,"mutability":"mutable","name":"_preBytes","nameLocation":"444:9:19","nodeType":"VariableDeclaration","scope":4436,"src":"431:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4421,"name":"bytes","nodeType":"ElementaryTypeName","src":"431:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4424,"mutability":"mutable","name":"_postBytes","nameLocation":"477:10:19","nodeType":"VariableDeclaration","scope":4436,"src":"464:23:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4423,"name":"bytes","nodeType":"ElementaryTypeName","src":"464:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"420:74:19"},"returnParameters":{"id":4428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4427,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4436,"src":"533:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4426,"name":"bytes","nodeType":"ElementaryTypeName","src":"533:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"532:14:19"},"scope":4751,"src":"405:2911:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4444,"nodeType":"Block","src":"3406:5678:19","statements":[{"AST":{"nodeType":"YulBlock","src":"3426:5651:19","statements":[{"nodeType":"YulVariableDeclaration","src":"3641:34:19","value":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"3660:14:19"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3654:5:19"},"nodeType":"YulFunctionCall","src":"3654:21:19"},"variables":[{"name":"fslot","nodeType":"YulTypedName","src":"3645:5:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4148:76:19","value":{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"4171:5:19"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4186:5:19","type":"","value":"0x100"},{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"4204:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"4211:1:19","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4200:3:19"},"nodeType":"YulFunctionCall","src":"4200:13:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4193:6:19"},"nodeType":"YulFunctionCall","src":"4193:21:19"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4182:3:19"},"nodeType":"YulFunctionCall","src":"4182:33:19"},{"kind":"number","nodeType":"YulLiteral","src":"4217:1:19","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4178:3:19"},"nodeType":"YulFunctionCall","src":"4178:41:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4167:3:19"},"nodeType":"YulFunctionCall","src":"4167:53:19"},{"kind":"number","nodeType":"YulLiteral","src":"4222:1:19","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4163:3:19"},"nodeType":"YulFunctionCall","src":"4163:61:19"},"variables":[{"name":"slength","nodeType":"YulTypedName","src":"4152:7:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4238:32:19","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"4259:10:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4253:5:19"},"nodeType":"YulFunctionCall","src":"4253:17:19"},"variables":[{"name":"mlength","nodeType":"YulTypedName","src":"4242:7:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4284:38:19","value":{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"4305:7:19"},{"name":"mlength","nodeType":"YulIdentifier","src":"4314:7:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4301:3:19"},"nodeType":"YulFunctionCall","src":"4301:21:19"},"variables":[{"name":"newlength","nodeType":"YulTypedName","src":"4288:9:19","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"4648:1223:19","statements":[{"expression":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"4918:14:19"},{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"5200:5:19"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"5347:10:19"},{"kind":"number","nodeType":"YulLiteral","src":"5359:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5343:3:19"},"nodeType":"YulFunctionCall","src":"5343:21:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5337:5:19"},"nodeType":"YulFunctionCall","src":"5337:28:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5436:5:19","type":"","value":"0x100"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5447:2:19","type":"","value":"32"},{"name":"mlength","nodeType":"YulIdentifier","src":"5451:7:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5443:3:19"},"nodeType":"YulFunctionCall","src":"5443:16:19"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"5432:3:19"},"nodeType":"YulFunctionCall","src":"5432:28:19"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5268:3:19"},"nodeType":"YulFunctionCall","src":"5268:211:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5623:5:19","type":"","value":"0x100"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5634:2:19","type":"","value":"32"},{"name":"newlength","nodeType":"YulIdentifier","src":"5638:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5630:3:19"},"nodeType":"YulFunctionCall","src":"5630:18:19"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"5619:3:19"},"nodeType":"YulFunctionCall","src":"5619:30:19"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5246:3:19"},"nodeType":"YulFunctionCall","src":"5246:422:19"},{"arguments":[{"name":"mlength","nodeType":"YulIdentifier","src":"5788:7:19"},{"kind":"number","nodeType":"YulLiteral","src":"5797:1:19","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5784:3:19"},"nodeType":"YulFunctionCall","src":"5784:15:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5224:3:19"},"nodeType":"YulFunctionCall","src":"5224:594:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5052:3:19"},"nodeType":"YulFunctionCall","src":"5052:785:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4893:6:19"},"nodeType":"YulFunctionCall","src":"4893:963:19"},"nodeType":"YulExpressionStatement","src":"4893:963:19"}]},"nodeType":"YulCase","src":"4641:1230:19","value":{"kind":"number","nodeType":"YulLiteral","src":"4646:1:19","type":"","value":"2"}},{"body":{"nodeType":"YulBlock","src":"5892:1875:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6093:3:19","type":"","value":"0x0"},{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"6098:14:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6086:6:19"},"nodeType":"YulFunctionCall","src":"6086:27:19"},"nodeType":"YulExpressionStatement","src":"6086:27:19"},{"nodeType":"YulVariableDeclaration","src":"6131:53:19","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6155:3:19","type":"","value":"0x0"},{"kind":"number","nodeType":"YulLiteral","src":"6160:4:19","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"6145:9:19"},"nodeType":"YulFunctionCall","src":"6145:20:19"},{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"6171:7:19"},{"kind":"number","nodeType":"YulLiteral","src":"6180:2:19","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6167:3:19"},"nodeType":"YulFunctionCall","src":"6167:16:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6141:3:19"},"nodeType":"YulFunctionCall","src":"6141:43:19"},"variables":[{"name":"sc","nodeType":"YulTypedName","src":"6135:2:19","type":""}]},{"expression":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"6243:14:19"},{"arguments":[{"arguments":[{"name":"newlength","nodeType":"YulIdentifier","src":"6267:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6278:1:19","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6263:3:19"},"nodeType":"YulFunctionCall","src":"6263:17:19"},{"kind":"number","nodeType":"YulLiteral","src":"6282:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6259:3:19"},"nodeType":"YulFunctionCall","src":"6259:25:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"6236:6:19"},"nodeType":"YulFunctionCall","src":"6236:49:19"},"nodeType":"YulExpressionStatement","src":"6236:49:19"},{"nodeType":"YulVariableDeclaration","src":"6852:30:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6870:2:19","type":"","value":"32"},{"name":"slength","nodeType":"YulIdentifier","src":"6874:7:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6866:3:19"},"nodeType":"YulFunctionCall","src":"6866:16:19"},"variables":[{"name":"submod","nodeType":"YulTypedName","src":"6856:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6900:33:19","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"6914:10:19"},{"name":"submod","nodeType":"YulIdentifier","src":"6926:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6910:3:19"},"nodeType":"YulFunctionCall","src":"6910:23:19"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"6904:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6951:35:19","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"6966:10:19"},{"name":"mlength","nodeType":"YulIdentifier","src":"6978:7:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6962:3:19"},"nodeType":"YulFunctionCall","src":"6962:24:19"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"6955:3:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7004:38:19","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7024:5:19","type":"","value":"0x100"},{"name":"submod","nodeType":"YulIdentifier","src":"7031:6:19"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"7020:3:19"},"nodeType":"YulFunctionCall","src":"7020:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"7040:1:19","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7016:3:19"},"nodeType":"YulFunctionCall","src":"7016:26:19"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"7008:4:19","type":""}]},{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"7087:2:19"},{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"7152:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"7176:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7130:3:19"},"nodeType":"YulFunctionCall","src":"7130:131:19"},{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7290:2:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7284:5:19"},"nodeType":"YulFunctionCall","src":"7284:9:19"},{"name":"mask","nodeType":"YulIdentifier","src":"7295:4:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7280:3:19"},"nodeType":"YulFunctionCall","src":"7280:20:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7108:3:19"},"nodeType":"YulFunctionCall","src":"7108:211:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7062:6:19"},"nodeType":"YulFunctionCall","src":"7062:276:19"},"nodeType":"YulExpressionStatement","src":"7062:276:19"},{"body":{"nodeType":"YulBlock","src":"7574:63:19","statements":[{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"7604:2:19"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7614:2:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7608:5:19"},"nodeType":"YulFunctionCall","src":"7608:9:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7597:6:19"},"nodeType":"YulFunctionCall","src":"7597:21:19"},"nodeType":"YulExpressionStatement","src":"7597:21:19"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7465:2:19"},{"name":"end","nodeType":"YulIdentifier","src":"7469:3:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7462:2:19"},"nodeType":"YulFunctionCall","src":"7462:11:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7474:99:19","statements":[{"nodeType":"YulAssignment","src":"7497:16:19","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"7507:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"7511:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7503:3:19"},"nodeType":"YulFunctionCall","src":"7503:10:19"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"7497:2:19"}]},{"nodeType":"YulAssignment","src":"7535:19:19","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7545:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"7549:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7541:3:19"},"nodeType":"YulFunctionCall","src":"7541:13:19"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"7535:2:19"}]}]},"pre":{"nodeType":"YulBlock","src":"7362:99:19","statements":[{"nodeType":"YulAssignment","src":"7385:19:19","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7395:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"7399:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7391:3:19"},"nodeType":"YulFunctionCall","src":"7391:13:19"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"7385:2:19"}]},{"nodeType":"YulAssignment","src":"7426:16:19","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"7436:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"7440:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7432:3:19"},"nodeType":"YulFunctionCall","src":"7432:10:19"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"7426:2:19"}]}]},"src":"7358:279:19"},{"nodeType":"YulAssignment","src":"7657:32:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7669:5:19","type":"","value":"0x100"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7680:2:19"},{"name":"end","nodeType":"YulIdentifier","src":"7684:3:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7676:3:19"},"nodeType":"YulFunctionCall","src":"7676:12:19"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"7665:3:19"},"nodeType":"YulFunctionCall","src":"7665:24:19"},"variableNames":[{"name":"mask","nodeType":"YulIdentifier","src":"7657:4:19"}]},{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"7716:2:19"},{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7734:2:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7728:5:19"},"nodeType":"YulFunctionCall","src":"7728:9:19"},{"name":"mask","nodeType":"YulIdentifier","src":"7739:4:19"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7724:3:19"},"nodeType":"YulFunctionCall","src":"7724:20:19"},{"name":"mask","nodeType":"YulIdentifier","src":"7746:4:19"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7720:3:19"},"nodeType":"YulFunctionCall","src":"7720:31:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7709:6:19"},"nodeType":"YulFunctionCall","src":"7709:43:19"},"nodeType":"YulExpressionStatement","src":"7709:43:19"}]},"nodeType":"YulCase","src":"5885:1882:19","value":{"kind":"number","nodeType":"YulLiteral","src":"5890:1:19","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"7789:1277:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7884:3:19","type":"","value":"0x0"},{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"7889:14:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7877:6:19"},"nodeType":"YulFunctionCall","src":"7877:27:19"},"nodeType":"YulExpressionStatement","src":"7877:27:19"},{"nodeType":"YulVariableDeclaration","src":"7995:53:19","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8019:3:19","type":"","value":"0x0"},{"kind":"number","nodeType":"YulLiteral","src":"8024:4:19","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8009:9:19"},"nodeType":"YulFunctionCall","src":"8009:20:19"},{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"8035:7:19"},{"kind":"number","nodeType":"YulLiteral","src":"8044:2:19","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"8031:3:19"},"nodeType":"YulFunctionCall","src":"8031:16:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8005:3:19"},"nodeType":"YulFunctionCall","src":"8005:43:19"},"variables":[{"name":"sc","nodeType":"YulTypedName","src":"7999:2:19","type":""}]},{"expression":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"8107:14:19"},{"arguments":[{"arguments":[{"name":"newlength","nodeType":"YulIdentifier","src":"8131:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8142:1:19","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8127:3:19"},"nodeType":"YulFunctionCall","src":"8127:17:19"},{"kind":"number","nodeType":"YulLiteral","src":"8146:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8123:3:19"},"nodeType":"YulFunctionCall","src":"8123:25:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8100:6:19"},"nodeType":"YulFunctionCall","src":"8100:49:19"},"nodeType":"YulExpressionStatement","src":"8100:49:19"},{"nodeType":"YulVariableDeclaration","src":"8272:34:19","value":{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"8294:7:19"},{"kind":"number","nodeType":"YulLiteral","src":"8303:2:19","type":"","value":"32"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"8290:3:19"},"nodeType":"YulFunctionCall","src":"8290:16:19"},"variables":[{"name":"slengthmod","nodeType":"YulTypedName","src":"8276:10:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8324:34:19","value":{"arguments":[{"name":"mlength","nodeType":"YulIdentifier","src":"8346:7:19"},{"kind":"number","nodeType":"YulLiteral","src":"8355:2:19","type":"","value":"32"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"8342:3:19"},"nodeType":"YulFunctionCall","src":"8342:16:19"},"variables":[{"name":"mlengthmod","nodeType":"YulTypedName","src":"8328:10:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8376:33:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8394:2:19","type":"","value":"32"},{"name":"slengthmod","nodeType":"YulIdentifier","src":"8398:10:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8390:3:19"},"nodeType":"YulFunctionCall","src":"8390:19:19"},"variables":[{"name":"submod","nodeType":"YulTypedName","src":"8380:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8427:33:19","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"8441:10:19"},{"name":"submod","nodeType":"YulIdentifier","src":"8453:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8437:3:19"},"nodeType":"YulFunctionCall","src":"8437:23:19"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"8431:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8478:35:19","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"8493:10:19"},{"name":"mlength","nodeType":"YulIdentifier","src":"8505:7:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8489:3:19"},"nodeType":"YulFunctionCall","src":"8489:24:19"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"8482:3:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8531:38:19","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8551:5:19","type":"","value":"0x100"},{"name":"submod","nodeType":"YulIdentifier","src":"8558:6:19"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"8547:3:19"},"nodeType":"YulFunctionCall","src":"8547:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"8567:1:19","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8543:3:19"},"nodeType":"YulFunctionCall","src":"8543:26:19"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"8535:4:19","type":""}]},{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8596:2:19"},{"arguments":[{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8610:2:19"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"8604:5:19"},"nodeType":"YulFunctionCall","src":"8604:9:19"},{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8625:2:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8619:5:19"},"nodeType":"YulFunctionCall","src":"8619:9:19"},{"name":"mask","nodeType":"YulIdentifier","src":"8630:4:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8615:3:19"},"nodeType":"YulFunctionCall","src":"8615:20:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8600:3:19"},"nodeType":"YulFunctionCall","src":"8600:36:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8589:6:19"},"nodeType":"YulFunctionCall","src":"8589:48:19"},"nodeType":"YulExpressionStatement","src":"8589:48:19"},{"body":{"nodeType":"YulBlock","src":"8873:63:19","statements":[{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8903:2:19"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8913:2:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8907:5:19"},"nodeType":"YulFunctionCall","src":"8907:9:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8896:6:19"},"nodeType":"YulFunctionCall","src":"8896:21:19"},"nodeType":"YulExpressionStatement","src":"8896:21:19"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8764:2:19"},{"name":"end","nodeType":"YulIdentifier","src":"8768:3:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8761:2:19"},"nodeType":"YulFunctionCall","src":"8761:11:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8773:99:19","statements":[{"nodeType":"YulAssignment","src":"8796:16:19","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8806:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"8810:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8802:3:19"},"nodeType":"YulFunctionCall","src":"8802:10:19"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"8796:2:19"}]},{"nodeType":"YulAssignment","src":"8834:19:19","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8844:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"8848:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8840:3:19"},"nodeType":"YulFunctionCall","src":"8840:13:19"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"8834:2:19"}]}]},"pre":{"nodeType":"YulBlock","src":"8661:99:19","statements":[{"nodeType":"YulAssignment","src":"8684:16:19","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8694:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"8698:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8690:3:19"},"nodeType":"YulFunctionCall","src":"8690:10:19"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"8684:2:19"}]},{"nodeType":"YulAssignment","src":"8722:19:19","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8732:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"8736:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8728:3:19"},"nodeType":"YulFunctionCall","src":"8728:13:19"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"8722:2:19"}]}]},"src":"8657:279:19"},{"nodeType":"YulAssignment","src":"8956:32:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8968:5:19","type":"","value":"0x100"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8979:2:19"},{"name":"end","nodeType":"YulIdentifier","src":"8983:3:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8975:3:19"},"nodeType":"YulFunctionCall","src":"8975:12:19"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"8964:3:19"},"nodeType":"YulFunctionCall","src":"8964:24:19"},"variableNames":[{"name":"mask","nodeType":"YulIdentifier","src":"8956:4:19"}]},{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"9015:2:19"},{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"9033:2:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9027:5:19"},"nodeType":"YulFunctionCall","src":"9027:9:19"},{"name":"mask","nodeType":"YulIdentifier","src":"9038:4:19"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"9023:3:19"},"nodeType":"YulFunctionCall","src":"9023:20:19"},{"name":"mask","nodeType":"YulIdentifier","src":"9045:4:19"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"9019:3:19"},"nodeType":"YulFunctionCall","src":"9019:31:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"9008:6:19"},"nodeType":"YulFunctionCall","src":"9008:43:19"},"nodeType":"YulExpressionStatement","src":"9008:43:19"}]},"nodeType":"YulCase","src":"7781:1285:19","value":"default"}],"expression":{"arguments":[{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"4595:7:19"},{"kind":"number","nodeType":"YulLiteral","src":"4604:2:19","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4592:2:19"},"nodeType":"YulFunctionCall","src":"4592:15:19"},{"arguments":[{"name":"newlength","nodeType":"YulIdentifier","src":"4612:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4623:2:19","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4609:2:19"},"nodeType":"YulFunctionCall","src":"4609:17:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4588:3:19"},"nodeType":"YulFunctionCall","src":"4588:39:19"},"nodeType":"YulSwitch","src":"4581:4485:19"}]},"evmVersion":"berlin","externalReferences":[{"declaration":4440,"isOffset":false,"isSlot":false,"src":"4259:10:19","valueSize":1},{"declaration":4440,"isOffset":false,"isSlot":false,"src":"5347:10:19","valueSize":1},{"declaration":4440,"isOffset":false,"isSlot":false,"src":"6914:10:19","valueSize":1},{"declaration":4440,"isOffset":false,"isSlot":false,"src":"6966:10:19","valueSize":1},{"declaration":4440,"isOffset":false,"isSlot":false,"src":"8441:10:19","valueSize":1},{"declaration":4440,"isOffset":false,"isSlot":false,"src":"8493:10:19","valueSize":1},{"declaration":4438,"isOffset":false,"isSlot":true,"src":"3660:14:19","suffix":"slot","valueSize":1},{"declaration":4438,"isOffset":false,"isSlot":true,"src":"4918:14:19","suffix":"slot","valueSize":1},{"declaration":4438,"isOffset":false,"isSlot":true,"src":"6098:14:19","suffix":"slot","valueSize":1},{"declaration":4438,"isOffset":false,"isSlot":true,"src":"6243:14:19","suffix":"slot","valueSize":1},{"declaration":4438,"isOffset":false,"isSlot":true,"src":"7889:14:19","suffix":"slot","valueSize":1},{"declaration":4438,"isOffset":false,"isSlot":true,"src":"8107:14:19","suffix":"slot","valueSize":1}],"id":4443,"nodeType":"InlineAssembly","src":"3417:5660:19"}]},"id":4445,"implemented":true,"kind":"function","modifiers":[],"name":"concatStorage","nameLocation":"3333:13:19","nodeType":"FunctionDefinition","parameters":{"id":4441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4438,"mutability":"mutable","name":"_preBytes","nameLocation":"3361:9:19","nodeType":"VariableDeclaration","scope":4445,"src":"3347:23:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4437,"name":"bytes","nodeType":"ElementaryTypeName","src":"3347:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4440,"mutability":"mutable","name":"_postBytes","nameLocation":"3385:10:19","nodeType":"VariableDeclaration","scope":4445,"src":"3372:23:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4439,"name":"bytes","nodeType":"ElementaryTypeName","src":"3372:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3346:50:19"},"returnParameters":{"id":4442,"nodeType":"ParameterList","parameters":[],"src":"3406:0:19"},"scope":4751,"src":"3324:5760:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4481,"nodeType":"Block","src":"9252:2619:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4457,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4451,"src":"9271:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3331","id":4458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9281:2:19","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"9271:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4460,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4451,"src":"9287:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9271:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"736c6963655f6f766572666c6f77","id":4462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9296:16:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e","typeString":"literal_string \"slice_overflow\""},"value":"slice_overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e","typeString":"literal_string \"slice_overflow\""}],"id":4456,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9263:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9263:50:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4464,"nodeType":"ExpressionStatement","src":"9263:50:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4466,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4447,"src":"9332:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"9332:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4468,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"9349:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4469,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4451,"src":"9358:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9349:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9332:33:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"736c6963655f6f75744f66426f756e6473","id":4472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9367:19:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0","typeString":"literal_string \"slice_outOfBounds\""},"value":"slice_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0","typeString":"literal_string \"slice_outOfBounds\""}],"id":4465,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9324:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9324:63:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4474,"nodeType":"ExpressionStatement","src":"9324:63:19"},{"assignments":[4476],"declarations":[{"constant":false,"id":4476,"mutability":"mutable","name":"tempBytes","nameLocation":"9413:9:19","nodeType":"VariableDeclaration","scope":4481,"src":"9400:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4475,"name":"bytes","nodeType":"ElementaryTypeName","src":"9400:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4477,"nodeType":"VariableDeclarationStatement","src":"9400:22:19"},{"AST":{"nodeType":"YulBlock","src":"9444:2391:19","statements":[{"cases":[{"body":{"nodeType":"YulBlock","src":"9502:1926:19","statements":[{"nodeType":"YulAssignment","src":"9653:24:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9672:4:19","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9666:5:19"},"nodeType":"YulFunctionCall","src":"9666:11:19"},"variableNames":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"9653:9:19"}]},{"nodeType":"YulVariableDeclaration","src":"10279:33:19","value":{"arguments":[{"name":"_length","nodeType":"YulIdentifier","src":"10300:7:19"},{"kind":"number","nodeType":"YulLiteral","src":"10309:2:19","type":"","value":"31"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10296:3:19"},"nodeType":"YulFunctionCall","src":"10296:16:19"},"variables":[{"name":"lengthmod","nodeType":"YulTypedName","src":"10283:9:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10623:70:19","value":{"arguments":[{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"10641:9:19"},{"name":"lengthmod","nodeType":"YulIdentifier","src":"10652:9:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10637:3:19"},"nodeType":"YulFunctionCall","src":"10637:25:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10668:4:19","type":"","value":"0x20"},{"arguments":[{"name":"lengthmod","nodeType":"YulIdentifier","src":"10681:9:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10674:6:19"},"nodeType":"YulFunctionCall","src":"10674:17:19"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"10664:3:19"},"nodeType":"YulFunctionCall","src":"10664:28:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10633:3:19"},"nodeType":"YulFunctionCall","src":"10633:60:19"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"10627:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10711:27:19","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"10726:2:19"},{"name":"_length","nodeType":"YulIdentifier","src":"10730:7:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10722:3:19"},"nodeType":"YulFunctionCall","src":"10722:16:19"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"10715:3:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"11121:63:19","statements":[{"expression":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"11151:2:19"},{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"11161:2:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11155:5:19"},"nodeType":"YulFunctionCall","src":"11155:9:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11144:6:19"},"nodeType":"YulFunctionCall","src":"11144:21:19"},"nodeType":"YulExpressionStatement","src":"11144:21:19"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"11009:2:19"},{"name":"end","nodeType":"YulIdentifier","src":"11013:3:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11006:2:19"},"nodeType":"YulFunctionCall","src":"11006:11:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"11018:102:19","statements":[{"nodeType":"YulAssignment","src":"11041:19:19","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"11051:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"11055:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11047:3:19"},"nodeType":"YulFunctionCall","src":"11047:13:19"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"11041:2:19"}]},{"nodeType":"YulAssignment","src":"11082:19:19","value":{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"11092:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"11096:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11088:3:19"},"nodeType":"YulFunctionCall","src":"11088:13:19"},"variableNames":[{"name":"cc","nodeType":"YulIdentifier","src":"11082:2:19"}]}]},"pre":{"nodeType":"YulBlock","src":"10762:243:19","statements":[{"nodeType":"YulVariableDeclaration","src":"10906:80:19","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"10928:6:19"},{"name":"lengthmod","nodeType":"YulIdentifier","src":"10936:9:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10924:3:19"},"nodeType":"YulFunctionCall","src":"10924:22:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10952:4:19","type":"","value":"0x20"},{"arguments":[{"name":"lengthmod","nodeType":"YulIdentifier","src":"10965:9:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10958:6:19"},"nodeType":"YulFunctionCall","src":"10958:17:19"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"10948:3:19"},"nodeType":"YulFunctionCall","src":"10948:28:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10920:3:19"},"nodeType":"YulFunctionCall","src":"10920:57:19"},{"name":"_start","nodeType":"YulIdentifier","src":"10979:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10916:3:19"},"nodeType":"YulFunctionCall","src":"10916:70:19"},"variables":[{"name":"cc","nodeType":"YulTypedName","src":"10910:2:19","type":""}]}]},"src":"10758:426:19"},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"11211:9:19"},{"name":"_length","nodeType":"YulIdentifier","src":"11222:7:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11204:6:19"},"nodeType":"YulFunctionCall","src":"11204:26:19"},"nodeType":"YulExpressionStatement","src":"11204:26:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11381:4:19","type":"","value":"0x40"},{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"11395:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"11399:2:19","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11391:3:19"},"nodeType":"YulFunctionCall","src":"11391:11:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11408:2:19","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11404:3:19"},"nodeType":"YulFunctionCall","src":"11404:7:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11387:3:19"},"nodeType":"YulFunctionCall","src":"11387:25:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11374:6:19"},"nodeType":"YulFunctionCall","src":"11374:39:19"},"nodeType":"YulExpressionStatement","src":"11374:39:19"}]},"nodeType":"YulCase","src":"9495:1933:19","value":{"kind":"number","nodeType":"YulLiteral","src":"9500:1:19","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"11534:290:19","statements":[{"nodeType":"YulAssignment","src":"11553:24:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11572:4:19","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11566:5:19"},"nodeType":"YulFunctionCall","src":"11566:11:19"},"variableNames":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"11553:9:19"}]},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"11742:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"11753:1:19","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11735:6:19"},"nodeType":"YulFunctionCall","src":"11735:20:19"},"nodeType":"YulExpressionStatement","src":"11735:20:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11782:4:19","type":"","value":"0x40"},{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"11792:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"11803:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11788:3:19"},"nodeType":"YulFunctionCall","src":"11788:20:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11775:6:19"},"nodeType":"YulFunctionCall","src":"11775:34:19"},"nodeType":"YulExpressionStatement","src":"11775:34:19"}]},"nodeType":"YulCase","src":"11526:298:19","value":"default"}],"expression":{"arguments":[{"name":"_length","nodeType":"YulIdentifier","src":"9473:7:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9466:6:19"},"nodeType":"YulFunctionCall","src":"9466:15:19"},"nodeType":"YulSwitch","src":"9459:2365:19"}]},"evmVersion":"berlin","externalReferences":[{"declaration":4447,"isOffset":false,"isSlot":false,"src":"10928:6:19","valueSize":1},{"declaration":4451,"isOffset":false,"isSlot":false,"src":"10300:7:19","valueSize":1},{"declaration":4451,"isOffset":false,"isSlot":false,"src":"10730:7:19","valueSize":1},{"declaration":4451,"isOffset":false,"isSlot":false,"src":"11222:7:19","valueSize":1},{"declaration":4451,"isOffset":false,"isSlot":false,"src":"9473:7:19","valueSize":1},{"declaration":4449,"isOffset":false,"isSlot":false,"src":"10979:6:19","valueSize":1},{"declaration":4476,"isOffset":false,"isSlot":false,"src":"10641:9:19","valueSize":1},{"declaration":4476,"isOffset":false,"isSlot":false,"src":"11211:9:19","valueSize":1},{"declaration":4476,"isOffset":false,"isSlot":false,"src":"11553:9:19","valueSize":1},{"declaration":4476,"isOffset":false,"isSlot":false,"src":"11742:9:19","valueSize":1},{"declaration":4476,"isOffset":false,"isSlot":false,"src":"11792:9:19","valueSize":1},{"declaration":4476,"isOffset":false,"isSlot":false,"src":"9653:9:19","valueSize":1}],"id":4478,"nodeType":"InlineAssembly","src":"9435:2400:19"},{"expression":{"id":4479,"name":"tempBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4476,"src":"11854:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4455,"id":4480,"nodeType":"Return","src":"11847:16:19"}]},"id":4482,"implemented":true,"kind":"function","modifiers":[],"name":"slice","nameLocation":"9101:5:19","nodeType":"FunctionDefinition","parameters":{"id":4452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4447,"mutability":"mutable","name":"_bytes","nameLocation":"9130:6:19","nodeType":"VariableDeclaration","scope":4482,"src":"9117:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4446,"name":"bytes","nodeType":"ElementaryTypeName","src":"9117:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4449,"mutability":"mutable","name":"_start","nameLocation":"9155:6:19","nodeType":"VariableDeclaration","scope":4482,"src":"9147:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4448,"name":"uint256","nodeType":"ElementaryTypeName","src":"9147:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4451,"mutability":"mutable","name":"_length","nameLocation":"9180:7:19","nodeType":"VariableDeclaration","scope":4482,"src":"9172:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4450,"name":"uint256","nodeType":"ElementaryTypeName","src":"9172:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9106:88:19"},"returnParameters":{"id":4455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4454,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4482,"src":"9233:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4453,"name":"bytes","nodeType":"ElementaryTypeName","src":"9233:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9232:14:19"},"scope":4751,"src":"9092:2779:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4507,"nodeType":"Block","src":"11967:275:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4492,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"11986:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"11986:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4494,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4486,"src":"12003:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3230","id":4495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12012:2:19","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"12003:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11986:28:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f416464726573735f6f75744f66426f756e6473","id":4498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12016:23:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d","typeString":"literal_string \"toAddress_outOfBounds\""},"value":"toAddress_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d","typeString":"literal_string \"toAddress_outOfBounds\""}],"id":4491,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11978:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11978:62:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4500,"nodeType":"ExpressionStatement","src":"11978:62:19"},{"assignments":[4502],"declarations":[{"constant":false,"id":4502,"mutability":"mutable","name":"tempAddress","nameLocation":"12059:11:19","nodeType":"VariableDeclaration","scope":4507,"src":"12051:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4501,"name":"address","nodeType":"ElementaryTypeName","src":"12051:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4503,"nodeType":"VariableDeclarationStatement","src":"12051:19:19"},{"AST":{"nodeType":"YulBlock","src":"12092:112:19","statements":[{"nodeType":"YulAssignment","src":"12107:86:19","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"12140:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"12148:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12136:3:19"},"nodeType":"YulFunctionCall","src":"12136:17:19"},{"name":"_start","nodeType":"YulIdentifier","src":"12155:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12132:3:19"},"nodeType":"YulFunctionCall","src":"12132:30:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12126:5:19"},"nodeType":"YulFunctionCall","src":"12126:37:19"},{"kind":"number","nodeType":"YulLiteral","src":"12165:27:19","type":"","value":"0x1000000000000000000000000"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"12122:3:19"},"nodeType":"YulFunctionCall","src":"12122:71:19"},"variableNames":[{"name":"tempAddress","nodeType":"YulIdentifier","src":"12107:11:19"}]}]},"evmVersion":"berlin","externalReferences":[{"declaration":4484,"isOffset":false,"isSlot":false,"src":"12140:6:19","valueSize":1},{"declaration":4486,"isOffset":false,"isSlot":false,"src":"12155:6:19","valueSize":1},{"declaration":4502,"isOffset":false,"isSlot":false,"src":"12107:11:19","valueSize":1}],"id":4504,"nodeType":"InlineAssembly","src":"12083:121:19"},{"expression":{"id":4505,"name":"tempAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4502,"src":"12223:11:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4490,"id":4506,"nodeType":"Return","src":"12216:18:19"}]},"id":4508,"implemented":true,"kind":"function","modifiers":[],"name":"toAddress","nameLocation":"11888:9:19","nodeType":"FunctionDefinition","parameters":{"id":4487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4484,"mutability":"mutable","name":"_bytes","nameLocation":"11911:6:19","nodeType":"VariableDeclaration","scope":4508,"src":"11898:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4483,"name":"bytes","nodeType":"ElementaryTypeName","src":"11898:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4486,"mutability":"mutable","name":"_start","nameLocation":"11927:6:19","nodeType":"VariableDeclaration","scope":4508,"src":"11919:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4485,"name":"uint256","nodeType":"ElementaryTypeName","src":"11919:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11897:37:19"},"returnParameters":{"id":4490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4489,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4508,"src":"11958:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4488,"name":"address","nodeType":"ElementaryTypeName","src":"11958:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11957:9:19"},"scope":4751,"src":"11879:363:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4533,"nodeType":"Block","src":"12334:227:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4518,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4510,"src":"12353:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"12353:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4520,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4512,"src":"12370:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12379:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12370:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12353:27:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e74385f6f75744f66426f756e6473","id":4524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12383:21:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_ce6d7be00009dd45cc670fb6c2ceee25786f142bcb64e7f1ee73012b26bb6ca1","typeString":"literal_string \"toUint8_outOfBounds\""},"value":"toUint8_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ce6d7be00009dd45cc670fb6c2ceee25786f142bcb64e7f1ee73012b26bb6ca1","typeString":"literal_string \"toUint8_outOfBounds\""}],"id":4517,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12345:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12345:60:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4526,"nodeType":"ExpressionStatement","src":"12345:60:19"},{"assignments":[4528],"declarations":[{"constant":false,"id":4528,"mutability":"mutable","name":"tempUint","nameLocation":"12422:8:19","nodeType":"VariableDeclaration","scope":4533,"src":"12416:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4527,"name":"uint8","nodeType":"ElementaryTypeName","src":"12416:5:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":4529,"nodeType":"VariableDeclarationStatement","src":"12416:14:19"},{"AST":{"nodeType":"YulBlock","src":"12452:74:19","statements":[{"nodeType":"YulAssignment","src":"12467:48:19","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"12493:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"12501:3:19","type":"","value":"0x1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12489:3:19"},"nodeType":"YulFunctionCall","src":"12489:16:19"},{"name":"_start","nodeType":"YulIdentifier","src":"12507:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12485:3:19"},"nodeType":"YulFunctionCall","src":"12485:29:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12479:5:19"},"nodeType":"YulFunctionCall","src":"12479:36:19"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"12467:8:19"}]}]},"evmVersion":"berlin","externalReferences":[{"declaration":4510,"isOffset":false,"isSlot":false,"src":"12493:6:19","valueSize":1},{"declaration":4512,"isOffset":false,"isSlot":false,"src":"12507:6:19","valueSize":1},{"declaration":4528,"isOffset":false,"isSlot":false,"src":"12467:8:19","valueSize":1}],"id":4530,"nodeType":"InlineAssembly","src":"12443:83:19"},{"expression":{"id":4531,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4528,"src":"12545:8:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":4516,"id":4532,"nodeType":"Return","src":"12538:15:19"}]},"id":4534,"implemented":true,"kind":"function","modifiers":[],"name":"toUint8","nameLocation":"12259:7:19","nodeType":"FunctionDefinition","parameters":{"id":4513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4510,"mutability":"mutable","name":"_bytes","nameLocation":"12280:6:19","nodeType":"VariableDeclaration","scope":4534,"src":"12267:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4509,"name":"bytes","nodeType":"ElementaryTypeName","src":"12267:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4512,"mutability":"mutable","name":"_start","nameLocation":"12296:6:19","nodeType":"VariableDeclaration","scope":4534,"src":"12288:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4511,"name":"uint256","nodeType":"ElementaryTypeName","src":"12288:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:37:19"},"returnParameters":{"id":4516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4515,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4534,"src":"12327:5:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4514,"name":"uint8","nodeType":"ElementaryTypeName","src":"12327:5:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"12326:7:19"},"scope":4751,"src":"12250:311:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4559,"nodeType":"Block","src":"12655:228:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4544,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4536,"src":"12674:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"12674:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4546,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4538,"src":"12691:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":4547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12700:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12691:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12674:27:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e7431365f6f75744f66426f756e6473","id":4550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12703:22:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab","typeString":"literal_string \"toUint16_outOfBounds\""},"value":"toUint16_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab","typeString":"literal_string \"toUint16_outOfBounds\""}],"id":4543,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12666:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12666:60:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4552,"nodeType":"ExpressionStatement","src":"12666:60:19"},{"assignments":[4554],"declarations":[{"constant":false,"id":4554,"mutability":"mutable","name":"tempUint","nameLocation":"12744:8:19","nodeType":"VariableDeclaration","scope":4559,"src":"12737:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4553,"name":"uint16","nodeType":"ElementaryTypeName","src":"12737:6:19","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":4555,"nodeType":"VariableDeclarationStatement","src":"12737:15:19"},{"AST":{"nodeType":"YulBlock","src":"12774:74:19","statements":[{"nodeType":"YulAssignment","src":"12789:48:19","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"12815:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"12823:3:19","type":"","value":"0x2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12811:3:19"},"nodeType":"YulFunctionCall","src":"12811:16:19"},{"name":"_start","nodeType":"YulIdentifier","src":"12829:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12807:3:19"},"nodeType":"YulFunctionCall","src":"12807:29:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12801:5:19"},"nodeType":"YulFunctionCall","src":"12801:36:19"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"12789:8:19"}]}]},"evmVersion":"berlin","externalReferences":[{"declaration":4536,"isOffset":false,"isSlot":false,"src":"12815:6:19","valueSize":1},{"declaration":4538,"isOffset":false,"isSlot":false,"src":"12829:6:19","valueSize":1},{"declaration":4554,"isOffset":false,"isSlot":false,"src":"12789:8:19","valueSize":1}],"id":4556,"nodeType":"InlineAssembly","src":"12765:83:19"},{"expression":{"id":4557,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4554,"src":"12867:8:19","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":4542,"id":4558,"nodeType":"Return","src":"12860:15:19"}]},"id":4560,"implemented":true,"kind":"function","modifiers":[],"name":"toUint16","nameLocation":"12578:8:19","nodeType":"FunctionDefinition","parameters":{"id":4539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4536,"mutability":"mutable","name":"_bytes","nameLocation":"12600:6:19","nodeType":"VariableDeclaration","scope":4560,"src":"12587:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4535,"name":"bytes","nodeType":"ElementaryTypeName","src":"12587:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4538,"mutability":"mutable","name":"_start","nameLocation":"12616:6:19","nodeType":"VariableDeclaration","scope":4560,"src":"12608:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4537,"name":"uint256","nodeType":"ElementaryTypeName","src":"12608:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12586:37:19"},"returnParameters":{"id":4542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4541,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4560,"src":"12647:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4540,"name":"uint16","nodeType":"ElementaryTypeName","src":"12647:6:19","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"12646:8:19"},"scope":4751,"src":"12569:314:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4585,"nodeType":"Block","src":"12977:228:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4570,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4562,"src":"12996:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"12996:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4572,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4564,"src":"13013:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"34","id":4573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13022:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"13013:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12996:27:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e7433325f6f75744f66426f756e6473","id":4576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13025:22:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_e0a09853867d05bef4b1d534052126bc72acd3515e1725b9b280e16d988e6ccf","typeString":"literal_string \"toUint32_outOfBounds\""},"value":"toUint32_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e0a09853867d05bef4b1d534052126bc72acd3515e1725b9b280e16d988e6ccf","typeString":"literal_string \"toUint32_outOfBounds\""}],"id":4569,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12988:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12988:60:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4578,"nodeType":"ExpressionStatement","src":"12988:60:19"},{"assignments":[4580],"declarations":[{"constant":false,"id":4580,"mutability":"mutable","name":"tempUint","nameLocation":"13066:8:19","nodeType":"VariableDeclaration","scope":4585,"src":"13059:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4579,"name":"uint32","nodeType":"ElementaryTypeName","src":"13059:6:19","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":4581,"nodeType":"VariableDeclarationStatement","src":"13059:15:19"},{"AST":{"nodeType":"YulBlock","src":"13096:74:19","statements":[{"nodeType":"YulAssignment","src":"13111:48:19","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"13137:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"13145:3:19","type":"","value":"0x4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13133:3:19"},"nodeType":"YulFunctionCall","src":"13133:16:19"},{"name":"_start","nodeType":"YulIdentifier","src":"13151:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13129:3:19"},"nodeType":"YulFunctionCall","src":"13129:29:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13123:5:19"},"nodeType":"YulFunctionCall","src":"13123:36:19"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"13111:8:19"}]}]},"evmVersion":"berlin","externalReferences":[{"declaration":4562,"isOffset":false,"isSlot":false,"src":"13137:6:19","valueSize":1},{"declaration":4564,"isOffset":false,"isSlot":false,"src":"13151:6:19","valueSize":1},{"declaration":4580,"isOffset":false,"isSlot":false,"src":"13111:8:19","valueSize":1}],"id":4582,"nodeType":"InlineAssembly","src":"13087:83:19"},{"expression":{"id":4583,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4580,"src":"13189:8:19","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":4568,"id":4584,"nodeType":"Return","src":"13182:15:19"}]},"id":4586,"implemented":true,"kind":"function","modifiers":[],"name":"toUint32","nameLocation":"12900:8:19","nodeType":"FunctionDefinition","parameters":{"id":4565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4562,"mutability":"mutable","name":"_bytes","nameLocation":"12922:6:19","nodeType":"VariableDeclaration","scope":4586,"src":"12909:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4561,"name":"bytes","nodeType":"ElementaryTypeName","src":"12909:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4564,"mutability":"mutable","name":"_start","nameLocation":"12938:6:19","nodeType":"VariableDeclaration","scope":4586,"src":"12930:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4563,"name":"uint256","nodeType":"ElementaryTypeName","src":"12930:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12908:37:19"},"returnParameters":{"id":4568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4567,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4586,"src":"12969:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4566,"name":"uint32","nodeType":"ElementaryTypeName","src":"12969:6:19","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"12968:8:19"},"scope":4751,"src":"12891:314:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4611,"nodeType":"Block","src":"13299:228:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4596,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4588,"src":"13318:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"13318:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4598,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4590,"src":"13335:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"38","id":4599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13344:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"13335:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13318:27:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e7436345f6f75744f66426f756e6473","id":4602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13347:22:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_55885cc1e15ebd0ff3d9803b39476f6ee2279f42aa3070b40f2de433347c0145","typeString":"literal_string \"toUint64_outOfBounds\""},"value":"toUint64_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_55885cc1e15ebd0ff3d9803b39476f6ee2279f42aa3070b40f2de433347c0145","typeString":"literal_string \"toUint64_outOfBounds\""}],"id":4595,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13310:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13310:60:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4604,"nodeType":"ExpressionStatement","src":"13310:60:19"},{"assignments":[4606],"declarations":[{"constant":false,"id":4606,"mutability":"mutable","name":"tempUint","nameLocation":"13388:8:19","nodeType":"VariableDeclaration","scope":4611,"src":"13381:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4605,"name":"uint64","nodeType":"ElementaryTypeName","src":"13381:6:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":4607,"nodeType":"VariableDeclarationStatement","src":"13381:15:19"},{"AST":{"nodeType":"YulBlock","src":"13418:74:19","statements":[{"nodeType":"YulAssignment","src":"13433:48:19","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"13459:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"13467:3:19","type":"","value":"0x8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13455:3:19"},"nodeType":"YulFunctionCall","src":"13455:16:19"},{"name":"_start","nodeType":"YulIdentifier","src":"13473:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13451:3:19"},"nodeType":"YulFunctionCall","src":"13451:29:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13445:5:19"},"nodeType":"YulFunctionCall","src":"13445:36:19"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"13433:8:19"}]}]},"evmVersion":"berlin","externalReferences":[{"declaration":4588,"isOffset":false,"isSlot":false,"src":"13459:6:19","valueSize":1},{"declaration":4590,"isOffset":false,"isSlot":false,"src":"13473:6:19","valueSize":1},{"declaration":4606,"isOffset":false,"isSlot":false,"src":"13433:8:19","valueSize":1}],"id":4608,"nodeType":"InlineAssembly","src":"13409:83:19"},{"expression":{"id":4609,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4606,"src":"13511:8:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":4594,"id":4610,"nodeType":"Return","src":"13504:15:19"}]},"id":4612,"implemented":true,"kind":"function","modifiers":[],"name":"toUint64","nameLocation":"13222:8:19","nodeType":"FunctionDefinition","parameters":{"id":4591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4588,"mutability":"mutable","name":"_bytes","nameLocation":"13244:6:19","nodeType":"VariableDeclaration","scope":4612,"src":"13231:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4587,"name":"bytes","nodeType":"ElementaryTypeName","src":"13231:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4590,"mutability":"mutable","name":"_start","nameLocation":"13260:6:19","nodeType":"VariableDeclaration","scope":4612,"src":"13252:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4589,"name":"uint256","nodeType":"ElementaryTypeName","src":"13252:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13230:37:19"},"returnParameters":{"id":4594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4593,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4612,"src":"13291:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4592,"name":"uint64","nodeType":"ElementaryTypeName","src":"13291:6:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"13290:8:19"},"scope":4751,"src":"13213:314:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4637,"nodeType":"Block","src":"13621:229:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4622,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4614,"src":"13640:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"13640:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4624,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4616,"src":"13657:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3132","id":4625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13666:2:19","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"13657:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13640:28:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e7439365f6f75744f66426f756e6473","id":4628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13670:22:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_245175b34ac1d95c460f2a4fcb106dbfea12949a3cbb7ae3362c49144bb9feb7","typeString":"literal_string \"toUint96_outOfBounds\""},"value":"toUint96_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245175b34ac1d95c460f2a4fcb106dbfea12949a3cbb7ae3362c49144bb9feb7","typeString":"literal_string \"toUint96_outOfBounds\""}],"id":4621,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13632:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13632:61:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4630,"nodeType":"ExpressionStatement","src":"13632:61:19"},{"assignments":[4632],"declarations":[{"constant":false,"id":4632,"mutability":"mutable","name":"tempUint","nameLocation":"13711:8:19","nodeType":"VariableDeclaration","scope":4637,"src":"13704:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4631,"name":"uint96","nodeType":"ElementaryTypeName","src":"13704:6:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"id":4633,"nodeType":"VariableDeclarationStatement","src":"13704:15:19"},{"AST":{"nodeType":"YulBlock","src":"13741:74:19","statements":[{"nodeType":"YulAssignment","src":"13756:48:19","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"13782:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"13790:3:19","type":"","value":"0xc"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13778:3:19"},"nodeType":"YulFunctionCall","src":"13778:16:19"},{"name":"_start","nodeType":"YulIdentifier","src":"13796:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13774:3:19"},"nodeType":"YulFunctionCall","src":"13774:29:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13768:5:19"},"nodeType":"YulFunctionCall","src":"13768:36:19"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"13756:8:19"}]}]},"evmVersion":"berlin","externalReferences":[{"declaration":4614,"isOffset":false,"isSlot":false,"src":"13782:6:19","valueSize":1},{"declaration":4616,"isOffset":false,"isSlot":false,"src":"13796:6:19","valueSize":1},{"declaration":4632,"isOffset":false,"isSlot":false,"src":"13756:8:19","valueSize":1}],"id":4634,"nodeType":"InlineAssembly","src":"13732:83:19"},{"expression":{"id":4635,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4632,"src":"13834:8:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"functionReturnParameters":4620,"id":4636,"nodeType":"Return","src":"13827:15:19"}]},"id":4638,"implemented":true,"kind":"function","modifiers":[],"name":"toUint96","nameLocation":"13544:8:19","nodeType":"FunctionDefinition","parameters":{"id":4617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4614,"mutability":"mutable","name":"_bytes","nameLocation":"13566:6:19","nodeType":"VariableDeclaration","scope":4638,"src":"13553:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4613,"name":"bytes","nodeType":"ElementaryTypeName","src":"13553:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4616,"mutability":"mutable","name":"_start","nameLocation":"13582:6:19","nodeType":"VariableDeclaration","scope":4638,"src":"13574:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4615,"name":"uint256","nodeType":"ElementaryTypeName","src":"13574:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13552:37:19"},"returnParameters":{"id":4620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4619,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4638,"src":"13613:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4618,"name":"uint96","nodeType":"ElementaryTypeName","src":"13613:6:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"13612:8:19"},"scope":4751,"src":"13535:315:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4663,"nodeType":"Block","src":"13946:232:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4648,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4640,"src":"13965:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"13965:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4650,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4642,"src":"13982:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3136","id":4651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13991:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13982:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13965:28:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e743132385f6f75744f66426f756e6473","id":4654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13995:23:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_17474b965d7fdba029328487966488b63c32338e60aea74eafb22325bb8d90dc","typeString":"literal_string \"toUint128_outOfBounds\""},"value":"toUint128_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_17474b965d7fdba029328487966488b63c32338e60aea74eafb22325bb8d90dc","typeString":"literal_string \"toUint128_outOfBounds\""}],"id":4647,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13957:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13957:62:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4656,"nodeType":"ExpressionStatement","src":"13957:62:19"},{"assignments":[4658],"declarations":[{"constant":false,"id":4658,"mutability":"mutable","name":"tempUint","nameLocation":"14038:8:19","nodeType":"VariableDeclaration","scope":4663,"src":"14030:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":4657,"name":"uint128","nodeType":"ElementaryTypeName","src":"14030:7:19","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"id":4659,"nodeType":"VariableDeclarationStatement","src":"14030:16:19"},{"AST":{"nodeType":"YulBlock","src":"14068:75:19","statements":[{"nodeType":"YulAssignment","src":"14083:49:19","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"14109:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"14117:4:19","type":"","value":"0x10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14105:3:19"},"nodeType":"YulFunctionCall","src":"14105:17:19"},{"name":"_start","nodeType":"YulIdentifier","src":"14124:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14101:3:19"},"nodeType":"YulFunctionCall","src":"14101:30:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14095:5:19"},"nodeType":"YulFunctionCall","src":"14095:37:19"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"14083:8:19"}]}]},"evmVersion":"berlin","externalReferences":[{"declaration":4640,"isOffset":false,"isSlot":false,"src":"14109:6:19","valueSize":1},{"declaration":4642,"isOffset":false,"isSlot":false,"src":"14124:6:19","valueSize":1},{"declaration":4658,"isOffset":false,"isSlot":false,"src":"14083:8:19","valueSize":1}],"id":4660,"nodeType":"InlineAssembly","src":"14059:84:19"},{"expression":{"id":4661,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4658,"src":"14162:8:19","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":4646,"id":4662,"nodeType":"Return","src":"14155:15:19"}]},"id":4664,"implemented":true,"kind":"function","modifiers":[],"name":"toUint128","nameLocation":"13867:9:19","nodeType":"FunctionDefinition","parameters":{"id":4643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4640,"mutability":"mutable","name":"_bytes","nameLocation":"13890:6:19","nodeType":"VariableDeclaration","scope":4664,"src":"13877:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4639,"name":"bytes","nodeType":"ElementaryTypeName","src":"13877:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4642,"mutability":"mutable","name":"_start","nameLocation":"13906:6:19","nodeType":"VariableDeclaration","scope":4664,"src":"13898:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4641,"name":"uint256","nodeType":"ElementaryTypeName","src":"13898:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13876:37:19"},"returnParameters":{"id":4646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4645,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4664,"src":"13937:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":4644,"name":"uint128","nodeType":"ElementaryTypeName","src":"13937:7:19","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"13936:9:19"},"scope":4751,"src":"13858:320:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4689,"nodeType":"Block","src":"14274:232:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4674,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"14293:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"14293:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4676,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4668,"src":"14310:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3332","id":4677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14319:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14310:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14293:28:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e743235365f6f75744f66426f756e6473","id":4680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14323:23:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_87a32b96294a395a4fb365d8b27a23d532fa10419cffd7dc13367cdc71bf4d7b","typeString":"literal_string \"toUint256_outOfBounds\""},"value":"toUint256_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87a32b96294a395a4fb365d8b27a23d532fa10419cffd7dc13367cdc71bf4d7b","typeString":"literal_string \"toUint256_outOfBounds\""}],"id":4673,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14285:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14285:62:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4682,"nodeType":"ExpressionStatement","src":"14285:62:19"},{"assignments":[4684],"declarations":[{"constant":false,"id":4684,"mutability":"mutable","name":"tempUint","nameLocation":"14366:8:19","nodeType":"VariableDeclaration","scope":4689,"src":"14358:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4683,"name":"uint256","nodeType":"ElementaryTypeName","src":"14358:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4685,"nodeType":"VariableDeclarationStatement","src":"14358:16:19"},{"AST":{"nodeType":"YulBlock","src":"14396:75:19","statements":[{"nodeType":"YulAssignment","src":"14411:49:19","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"14437:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"14445:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14433:3:19"},"nodeType":"YulFunctionCall","src":"14433:17:19"},{"name":"_start","nodeType":"YulIdentifier","src":"14452:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14429:3:19"},"nodeType":"YulFunctionCall","src":"14429:30:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14423:5:19"},"nodeType":"YulFunctionCall","src":"14423:37:19"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"14411:8:19"}]}]},"evmVersion":"berlin","externalReferences":[{"declaration":4666,"isOffset":false,"isSlot":false,"src":"14437:6:19","valueSize":1},{"declaration":4668,"isOffset":false,"isSlot":false,"src":"14452:6:19","valueSize":1},{"declaration":4684,"isOffset":false,"isSlot":false,"src":"14411:8:19","valueSize":1}],"id":4686,"nodeType":"InlineAssembly","src":"14387:84:19"},{"expression":{"id":4687,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4684,"src":"14490:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4672,"id":4688,"nodeType":"Return","src":"14483:15:19"}]},"id":4690,"implemented":true,"kind":"function","modifiers":[],"name":"toUint256","nameLocation":"14195:9:19","nodeType":"FunctionDefinition","parameters":{"id":4669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4666,"mutability":"mutable","name":"_bytes","nameLocation":"14218:6:19","nodeType":"VariableDeclaration","scope":4690,"src":"14205:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4665,"name":"bytes","nodeType":"ElementaryTypeName","src":"14205:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4668,"mutability":"mutable","name":"_start","nameLocation":"14234:6:19","nodeType":"VariableDeclaration","scope":4690,"src":"14226:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4667,"name":"uint256","nodeType":"ElementaryTypeName","src":"14226:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14204:37:19"},"returnParameters":{"id":4672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4671,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4690,"src":"14265:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4670,"name":"uint256","nodeType":"ElementaryTypeName","src":"14265:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14264:9:19"},"scope":4751,"src":"14186:320:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4715,"nodeType":"Block","src":"14602:241:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4700,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4692,"src":"14621:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"14621:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4702,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4694,"src":"14638:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3332","id":4703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14647:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14638:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14621:28:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f427974657333325f6f75744f66426f756e6473","id":4706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14651:23:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_95abc635681816f3b423f999d8035c1cc722b70e3d801f56cd1748a4f5810fa2","typeString":"literal_string \"toBytes32_outOfBounds\""},"value":"toBytes32_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_95abc635681816f3b423f999d8035c1cc722b70e3d801f56cd1748a4f5810fa2","typeString":"literal_string \"toBytes32_outOfBounds\""}],"id":4699,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14613:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14613:62:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4708,"nodeType":"ExpressionStatement","src":"14613:62:19"},{"assignments":[4710],"declarations":[{"constant":false,"id":4710,"mutability":"mutable","name":"tempBytes32","nameLocation":"14694:11:19","nodeType":"VariableDeclaration","scope":4715,"src":"14686:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4709,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14686:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4711,"nodeType":"VariableDeclarationStatement","src":"14686:19:19"},{"AST":{"nodeType":"YulBlock","src":"14727:78:19","statements":[{"nodeType":"YulAssignment","src":"14742:52:19","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"14771:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"14779:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14767:3:19"},"nodeType":"YulFunctionCall","src":"14767:17:19"},{"name":"_start","nodeType":"YulIdentifier","src":"14786:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14763:3:19"},"nodeType":"YulFunctionCall","src":"14763:30:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14757:5:19"},"nodeType":"YulFunctionCall","src":"14757:37:19"},"variableNames":[{"name":"tempBytes32","nodeType":"YulIdentifier","src":"14742:11:19"}]}]},"evmVersion":"berlin","externalReferences":[{"declaration":4692,"isOffset":false,"isSlot":false,"src":"14771:6:19","valueSize":1},{"declaration":4694,"isOffset":false,"isSlot":false,"src":"14786:6:19","valueSize":1},{"declaration":4710,"isOffset":false,"isSlot":false,"src":"14742:11:19","valueSize":1}],"id":4712,"nodeType":"InlineAssembly","src":"14718:87:19"},{"expression":{"id":4713,"name":"tempBytes32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4710,"src":"14824:11:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4698,"id":4714,"nodeType":"Return","src":"14817:18:19"}]},"id":4716,"implemented":true,"kind":"function","modifiers":[],"name":"toBytes32","nameLocation":"14523:9:19","nodeType":"FunctionDefinition","parameters":{"id":4695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4692,"mutability":"mutable","name":"_bytes","nameLocation":"14546:6:19","nodeType":"VariableDeclaration","scope":4716,"src":"14533:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4691,"name":"bytes","nodeType":"ElementaryTypeName","src":"14533:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4694,"mutability":"mutable","name":"_start","nameLocation":"14562:6:19","nodeType":"VariableDeclaration","scope":4716,"src":"14554:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4693,"name":"uint256","nodeType":"ElementaryTypeName","src":"14554:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14532:37:19"},"returnParameters":{"id":4698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4697,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4716,"src":"14593:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4696,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14593:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"14592:9:19"},"scope":4751,"src":"14514:329:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4732,"nodeType":"Block","src":"14944:1332:19","statements":[{"assignments":[4726],"declarations":[{"constant":false,"id":4726,"mutability":"mutable","name":"success","nameLocation":"14960:7:19","nodeType":"VariableDeclaration","scope":4732,"src":"14955:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4725,"name":"bool","nodeType":"ElementaryTypeName","src":"14955:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4728,"initialValue":{"hexValue":"74727565","id":4727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14970:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"nodeType":"VariableDeclarationStatement","src":"14955:19:19"},{"AST":{"nodeType":"YulBlock","src":"14996:1246:19","statements":[{"nodeType":"YulVariableDeclaration","src":"15011:30:19","value":{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"15031:9:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15025:5:19"},"nodeType":"YulFunctionCall","src":"15025:16:19"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"15015:6:19","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"15174:962:19","statements":[{"nodeType":"YulVariableDeclaration","src":"15392:11:19","value":{"kind":"number","nodeType":"YulLiteral","src":"15402:1:19","type":"","value":"1"},"variables":[{"name":"cb","nodeType":"YulTypedName","src":"15396:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15423:30:19","value":{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"15437:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"15448:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15433:3:19"},"nodeType":"YulFunctionCall","src":"15433:20:19"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"15427:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15471:26:19","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"15486:2:19"},{"name":"length","nodeType":"YulIdentifier","src":"15490:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15482:3:19"},"nodeType":"YulFunctionCall","src":"15482:15:19"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"15475:3:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"15838:283:19","statements":[{"body":{"nodeType":"YulBlock","src":"15972:130:19","statements":[{"nodeType":"YulAssignment","src":"16034:12:19","value":{"kind":"number","nodeType":"YulLiteral","src":"16045:1:19","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"16034:7:19"}]},{"nodeType":"YulAssignment","src":"16072:7:19","value":{"kind":"number","nodeType":"YulLiteral","src":"16078:1:19","type":"","value":"0"},"variableNames":[{"name":"cb","nodeType":"YulIdentifier","src":"16072:2:19"}]}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"15955:2:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15949:5:19"},"nodeType":"YulFunctionCall","src":"15949:9:19"},{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"15966:2:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15960:5:19"},"nodeType":"YulFunctionCall","src":"15960:9:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15946:2:19"},"nodeType":"YulFunctionCall","src":"15946:24:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15939:6:19"},"nodeType":"YulFunctionCall","src":"15939:32:19"},"nodeType":"YulIf","src":"15936:2:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"15717:2:19"},{"name":"end","nodeType":"YulIdentifier","src":"15721:3:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15714:2:19"},"nodeType":"YulFunctionCall","src":"15714:11:19"},{"name":"cb","nodeType":"YulIdentifier","src":"15727:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15710:3:19"},"nodeType":"YulFunctionCall","src":"15710:20:19"},{"kind":"number","nodeType":"YulLiteral","src":"15732:1:19","type":"","value":"2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15707:2:19"},"nodeType":"YulFunctionCall","src":"15707:27:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"15735:102:19","statements":[{"nodeType":"YulAssignment","src":"15758:19:19","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"15768:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"15772:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15764:3:19"},"nodeType":"YulFunctionCall","src":"15764:13:19"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"15758:2:19"}]},{"nodeType":"YulAssignment","src":"15799:19:19","value":{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"15809:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"15813:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15805:3:19"},"nodeType":"YulFunctionCall","src":"15805:13:19"},"variableNames":[{"name":"cc","nodeType":"YulIdentifier","src":"15799:2:19"}]}]},"pre":{"nodeType":"YulBlock","src":"15521:185:19","statements":[{"nodeType":"YulVariableDeclaration","src":"15544:31:19","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"15558:10:19"},{"kind":"number","nodeType":"YulLiteral","src":"15570:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15554:3:19"},"nodeType":"YulFunctionCall","src":"15554:21:19"},"variables":[{"name":"cc","nodeType":"YulTypedName","src":"15548:2:19","type":""}]}]},"src":"15517:604:19"}]},"nodeType":"YulCase","src":"15167:969:19","value":{"kind":"number","nodeType":"YulLiteral","src":"15172:1:19","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"16158:73:19","statements":[{"nodeType":"YulAssignment","src":"16204:12:19","value":{"kind":"number","nodeType":"YulLiteral","src":"16215:1:19","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"16204:7:19"}]}]},"nodeType":"YulCase","src":"16150:81:19","value":"default"}],"expression":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15127:6:19"},{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"15141:10:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15135:5:19"},"nodeType":"YulFunctionCall","src":"15135:17:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15124:2:19"},"nodeType":"YulFunctionCall","src":"15124:29:19"},"nodeType":"YulSwitch","src":"15117:1114:19"}]},"evmVersion":"berlin","externalReferences":[{"declaration":4720,"isOffset":false,"isSlot":false,"src":"15141:10:19","valueSize":1},{"declaration":4720,"isOffset":false,"isSlot":false,"src":"15558:10:19","valueSize":1},{"declaration":4718,"isOffset":false,"isSlot":false,"src":"15031:9:19","valueSize":1},{"declaration":4718,"isOffset":false,"isSlot":false,"src":"15437:9:19","valueSize":1},{"declaration":4726,"isOffset":false,"isSlot":false,"src":"16034:7:19","valueSize":1},{"declaration":4726,"isOffset":false,"isSlot":false,"src":"16204:7:19","valueSize":1}],"id":4729,"nodeType":"InlineAssembly","src":"14987:1255:19"},{"expression":{"id":4730,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4726,"src":"16261:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4724,"id":4731,"nodeType":"Return","src":"16254:14:19"}]},"id":4733,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"14860:5:19","nodeType":"FunctionDefinition","parameters":{"id":4721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4718,"mutability":"mutable","name":"_preBytes","nameLocation":"14879:9:19","nodeType":"VariableDeclaration","scope":4733,"src":"14866:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4717,"name":"bytes","nodeType":"ElementaryTypeName","src":"14866:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4720,"mutability":"mutable","name":"_postBytes","nameLocation":"14903:10:19","nodeType":"VariableDeclaration","scope":4733,"src":"14890:23:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4719,"name":"bytes","nodeType":"ElementaryTypeName","src":"14890:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14865:49:19"},"returnParameters":{"id":4724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4723,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4733,"src":"14938:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4722,"name":"bool","nodeType":"ElementaryTypeName","src":"14938:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14937:6:19"},"scope":4751,"src":"14851:1425:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4749,"nodeType":"Block","src":"16430:2554:19","statements":[{"assignments":[4743],"declarations":[{"constant":false,"id":4743,"mutability":"mutable","name":"success","nameLocation":"16446:7:19","nodeType":"VariableDeclaration","scope":4749,"src":"16441:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4742,"name":"bool","nodeType":"ElementaryTypeName","src":"16441:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4745,"initialValue":{"hexValue":"74727565","id":4744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"16456:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"nodeType":"VariableDeclarationStatement","src":"16441:19:19"},{"AST":{"nodeType":"YulBlock","src":"16482:2468:19","statements":[{"nodeType":"YulVariableDeclaration","src":"16539:34:19","value":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"16558:14:19"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"16552:5:19"},"nodeType":"YulFunctionCall","src":"16552:21:19"},"variables":[{"name":"fslot","nodeType":"YulTypedName","src":"16543:5:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16662:76:19","value":{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"16685:5:19"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16700:5:19","type":"","value":"0x100"},{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"16718:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"16725:1:19","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16714:3:19"},"nodeType":"YulFunctionCall","src":"16714:13:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16707:6:19"},"nodeType":"YulFunctionCall","src":"16707:21:19"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"16696:3:19"},"nodeType":"YulFunctionCall","src":"16696:33:19"},{"kind":"number","nodeType":"YulLiteral","src":"16731:1:19","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16692:3:19"},"nodeType":"YulFunctionCall","src":"16692:41:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16681:3:19"},"nodeType":"YulFunctionCall","src":"16681:53:19"},{"kind":"number","nodeType":"YulLiteral","src":"16736:1:19","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"16677:3:19"},"nodeType":"YulFunctionCall","src":"16677:61:19"},"variables":[{"name":"slength","nodeType":"YulTypedName","src":"16666:7:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16752:32:19","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"16773:10:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16767:5:19"},"nodeType":"YulFunctionCall","src":"16767:17:19"},"variables":[{"name":"mlength","nodeType":"YulTypedName","src":"16756:7:19","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"16908:1936:19","statements":[{"body":{"nodeType":"YulBlock","src":"17211:1618:19","statements":[{"cases":[{"body":{"nodeType":"YulBlock","src":"17285:340:19","statements":[{"nodeType":"YulAssignment","src":"17376:38:19","value":{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"17393:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"17400:5:19","type":"","value":"0x100"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"17389:3:19"},"nodeType":"YulFunctionCall","src":"17389:17:19"},{"kind":"number","nodeType":"YulLiteral","src":"17408:5:19","type":"","value":"0x100"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"17385:3:19"},"nodeType":"YulFunctionCall","src":"17385:29:19"},"variableNames":[{"name":"fslot","nodeType":"YulIdentifier","src":"17376:5:19"}]},{"body":{"nodeType":"YulBlock","src":"17493:109:19","statements":[{"nodeType":"YulAssignment","src":"17563:12:19","value":{"kind":"number","nodeType":"YulLiteral","src":"17574:1:19","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"17563:7:19"}]}]},"condition":{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"17455:5:19"},{"arguments":[{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"17472:10:19"},{"kind":"number","nodeType":"YulLiteral","src":"17484:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17468:3:19"},"nodeType":"YulFunctionCall","src":"17468:21:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17462:5:19"},"nodeType":"YulFunctionCall","src":"17462:28:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"17452:2:19"},"nodeType":"YulFunctionCall","src":"17452:39:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17445:6:19"},"nodeType":"YulFunctionCall","src":"17445:47:19"},"nodeType":"YulIf","src":"17442:2:19"}]},"nodeType":"YulCase","src":"17278:347:19","value":{"kind":"number","nodeType":"YulLiteral","src":"17283:1:19","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"17655:1155:19","statements":[{"nodeType":"YulVariableDeclaration","src":"17913:11:19","value":{"kind":"number","nodeType":"YulLiteral","src":"17923:1:19","type":"","value":"1"},"variables":[{"name":"cb","nodeType":"YulTypedName","src":"17917:2:19","type":""}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18036:3:19","type":"","value":"0x0"},{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"18041:14:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18029:6:19"},"nodeType":"YulFunctionCall","src":"18029:27:19"},"nodeType":"YulExpressionStatement","src":"18029:27:19"},{"nodeType":"YulVariableDeclaration","src":"18082:30:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18102:3:19","type":"","value":"0x0"},{"kind":"number","nodeType":"YulLiteral","src":"18107:4:19","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"18092:9:19"},"nodeType":"YulFunctionCall","src":"18092:20:19"},"variables":[{"name":"sc","nodeType":"YulTypedName","src":"18086:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18140:31:19","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"18154:10:19"},{"kind":"number","nodeType":"YulLiteral","src":"18166:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18150:3:19"},"nodeType":"YulFunctionCall","src":"18150:21:19"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"18144:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18197:27:19","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"18212:2:19"},{"name":"mlength","nodeType":"YulIdentifier","src":"18216:7:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18208:3:19"},"nodeType":"YulFunctionCall","src":"18208:16:19"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"18201:3:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"18531:256:19","statements":[{"body":{"nodeType":"YulBlock","src":"18598:162:19","statements":[{"nodeType":"YulAssignment","src":"18676:12:19","value":{"kind":"number","nodeType":"YulLiteral","src":"18687:1:19","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"18676:7:19"}]},{"nodeType":"YulAssignment","src":"18722:7:19","value":{"kind":"number","nodeType":"YulLiteral","src":"18728:1:19","type":"","value":"0"},"variableNames":[{"name":"cb","nodeType":"YulIdentifier","src":"18722:2:19"}]}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"18581:2:19"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"18575:5:19"},"nodeType":"YulFunctionCall","src":"18575:9:19"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"18592:2:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18586:5:19"},"nodeType":"YulFunctionCall","src":"18586:9:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18572:2:19"},"nodeType":"YulFunctionCall","src":"18572:24:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18565:6:19"},"nodeType":"YulFunctionCall","src":"18565:32:19"},"nodeType":"YulIf","src":"18562:2:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"18389:2:19"},{"name":"end","nodeType":"YulIdentifier","src":"18393:3:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18386:2:19"},"nodeType":"YulFunctionCall","src":"18386:11:19"},{"name":"cb","nodeType":"YulIdentifier","src":"18399:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18382:3:19"},"nodeType":"YulFunctionCall","src":"18382:20:19"},{"kind":"number","nodeType":"YulLiteral","src":"18404:1:19","type":"","value":"2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18379:2:19"},"nodeType":"YulFunctionCall","src":"18379:27:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"18407:123:19","statements":[{"nodeType":"YulAssignment","src":"18438:16:19","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"18448:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"18452:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18444:3:19"},"nodeType":"YulFunctionCall","src":"18444:10:19"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"18438:2:19"}]},{"nodeType":"YulAssignment","src":"18484:19:19","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"18494:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"18498:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18490:3:19"},"nodeType":"YulFunctionCall","src":"18490:13:19"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"18484:2:19"}]}]},"pre":{"nodeType":"YulBlock","src":"18376:2:19","statements":[]},"src":"18372:415:19"}]},"nodeType":"YulCase","src":"17647:1163:19","value":"default"}],"expression":{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"17244:7:19"},{"kind":"number","nodeType":"YulLiteral","src":"17253:2:19","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17241:2:19"},"nodeType":"YulFunctionCall","src":"17241:15:19"},"nodeType":"YulSwitch","src":"17234:1576:19"}]},"condition":{"arguments":[{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"17201:7:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17194:6:19"},"nodeType":"YulFunctionCall","src":"17194:15:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17187:6:19"},"nodeType":"YulFunctionCall","src":"17187:23:19"},"nodeType":"YulIf","src":"17184:2:19"}]},"nodeType":"YulCase","src":"16901:1943:19","value":{"kind":"number","nodeType":"YulLiteral","src":"16906:1:19","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"18866:73:19","statements":[{"nodeType":"YulAssignment","src":"18912:12:19","value":{"kind":"number","nodeType":"YulLiteral","src":"18923:1:19","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"18912:7:19"}]}]},"nodeType":"YulCase","src":"18858:81:19","value":"default"}],"expression":{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"16870:7:19"},{"name":"mlength","nodeType":"YulIdentifier","src":"16879:7:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"16867:2:19"},"nodeType":"YulFunctionCall","src":"16867:20:19"},"nodeType":"YulSwitch","src":"16860:2079:19"}]},"evmVersion":"berlin","externalReferences":[{"declaration":4737,"isOffset":false,"isSlot":false,"src":"16773:10:19","valueSize":1},{"declaration":4737,"isOffset":false,"isSlot":false,"src":"17472:10:19","valueSize":1},{"declaration":4737,"isOffset":false,"isSlot":false,"src":"18154:10:19","valueSize":1},{"declaration":4735,"isOffset":false,"isSlot":true,"src":"16558:14:19","suffix":"slot","valueSize":1},{"declaration":4735,"isOffset":false,"isSlot":true,"src":"18041:14:19","suffix":"slot","valueSize":1},{"declaration":4743,"isOffset":false,"isSlot":false,"src":"17563:7:19","valueSize":1},{"declaration":4743,"isOffset":false,"isSlot":false,"src":"18676:7:19","valueSize":1},{"declaration":4743,"isOffset":false,"isSlot":false,"src":"18912:7:19","valueSize":1}],"id":4746,"nodeType":"InlineAssembly","src":"16473:2477:19"},{"expression":{"id":4747,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4743,"src":"18969:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4741,"id":4748,"nodeType":"Return","src":"18962:14:19"}]},"id":4750,"implemented":true,"kind":"function","modifiers":[],"name":"equalStorage","nameLocation":"16293:12:19","nodeType":"FunctionDefinition","parameters":{"id":4738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4735,"mutability":"mutable","name":"_preBytes","nameLocation":"16330:9:19","nodeType":"VariableDeclaration","scope":4750,"src":"16316:23:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4734,"name":"bytes","nodeType":"ElementaryTypeName","src":"16316:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4737,"mutability":"mutable","name":"_postBytes","nameLocation":"16363:10:19","nodeType":"VariableDeclaration","scope":4750,"src":"16350:23:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4736,"name":"bytes","nodeType":"ElementaryTypeName","src":"16350:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16305:75:19"},"returnParameters":{"id":4741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4740,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4750,"src":"16419:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4739,"name":"bool","nodeType":"ElementaryTypeName","src":"16419:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16418:6:19"},"scope":4751,"src":"16284:2700:19","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4752,"src":"381:18606:19","usedErrors":[]}],"src":"344:18643:19"},"id":19},"contracts/extensions/util/ExcessivelySafeCall.sol":{"ast":{"absolutePath":"contracts/extensions/util/ExcessivelySafeCall.sol","exportedSymbols":{"ExcessivelySafeCall":[4848]},"id":4849,"license":"MIT OR Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":4753,"literals":["solidity",">=","0.7",".6"],"nodeType":"PragmaDirective","src":"47:24:20"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":4848,"linearizedBaseContracts":[4848],"name":"ExcessivelySafeCall","nameLocation":"83:19:20","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":4756,"mutability":"constant","name":"LOW_28_MASK","nameLocation":"127:11:20","nodeType":"VariableDeclaration","scope":4848,"src":"110:102:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4754,"name":"uint256","nodeType":"ElementaryTypeName","src":"110:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307830303030303030306666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":4755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"146:66:20","typeDescriptions":{"typeIdentifier":"t_rational_26959946667150639794667015087019630673637144422540572481103610249215_by_1","typeString":"int_const 2695...(60 digits omitted)...9215"},"value":"0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},"visibility":"internal"},{"body":{"id":4790,"nodeType":"Block","src":"1322:1093:20","statements":[{"assignments":[4773],"declarations":[{"constant":false,"id":4773,"mutability":"mutable","name":"_toCopy","nameLocation":"1378:7:20","nodeType":"VariableDeclaration","scope":4790,"src":"1370:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4772,"name":"uint256","nodeType":"ElementaryTypeName","src":"1370:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4774,"nodeType":"VariableDeclarationStatement","src":"1370:15:20"},{"assignments":[4776],"declarations":[{"constant":false,"id":4776,"mutability":"mutable","name":"_success","nameLocation":"1401:8:20","nodeType":"VariableDeclaration","scope":4790,"src":"1396:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4775,"name":"bool","nodeType":"ElementaryTypeName","src":"1396:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4777,"nodeType":"VariableDeclarationStatement","src":"1396:13:20"},{"assignments":[4779],"declarations":[{"constant":false,"id":4779,"mutability":"mutable","name":"_returnData","nameLocation":"1433:11:20","nodeType":"VariableDeclaration","scope":4790,"src":"1420:24:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4778,"name":"bytes","nodeType":"ElementaryTypeName","src":"1420:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4784,"initialValue":{"arguments":[{"id":4782,"name":"_maxCopy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4763,"src":"1457:8:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":4781,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1447:9:20","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":4780,"name":"bytes","nodeType":"ElementaryTypeName","src":"1451:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":4783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1447:19:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1420:46:20"},{"AST":{"nodeType":"YulBlock","src":"1700:667:20","statements":[{"nodeType":"YulAssignment","src":"1715:259:20","value":{"arguments":[{"name":"_gas","nodeType":"YulIdentifier","src":"1746:4:20"},{"name":"_target","nodeType":"YulIdentifier","src":"1772:7:20"},{"kind":"number","nodeType":"YulLiteral","src":"1807:1:20","type":"","value":"0"},{"arguments":[{"name":"_calldata","nodeType":"YulIdentifier","src":"1842:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"1853:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1838:3:20"},"nodeType":"YulFunctionCall","src":"1838:20:20"},{"arguments":[{"name":"_calldata","nodeType":"YulIdentifier","src":"1888:9:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1882:5:20"},"nodeType":"YulFunctionCall","src":"1882:16:20"},{"kind":"number","nodeType":"YulLiteral","src":"1922:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1948:1:20","type":"","value":"0"}],"functionName":{"name":"call","nodeType":"YulIdentifier","src":"1727:4:20"},"nodeType":"YulFunctionCall","src":"1727:247:20"},"variableNames":[{"name":"_success","nodeType":"YulIdentifier","src":"1715:8:20"}]},{"nodeType":"YulAssignment","src":"2028:27:20","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"2039:14:20"},"nodeType":"YulFunctionCall","src":"2039:16:20"},"variableNames":[{"name":"_toCopy","nodeType":"YulIdentifier","src":"2028:7:20"}]},{"body":{"nodeType":"YulBlock","src":"2094:53:20","statements":[{"nodeType":"YulAssignment","src":"2113:19:20","value":{"name":"_maxCopy","nodeType":"YulIdentifier","src":"2124:8:20"},"variableNames":[{"name":"_toCopy","nodeType":"YulIdentifier","src":"2113:7:20"}]}]},"condition":{"arguments":[{"name":"_toCopy","nodeType":"YulIdentifier","src":"2075:7:20"},{"name":"_maxCopy","nodeType":"YulIdentifier","src":"2084:8:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2072:2:20"},"nodeType":"YulFunctionCall","src":"2072:21:20"},"nodeType":"YulIf","src":"2069:2:20"},{"expression":{"arguments":[{"name":"_returnData","nodeType":"YulIdentifier","src":"2217:11:20"},{"name":"_toCopy","nodeType":"YulIdentifier","src":"2230:7:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2210:6:20"},"nodeType":"YulFunctionCall","src":"2210:28:20"},"nodeType":"YulExpressionStatement","src":"2210:28:20"},{"expression":{"arguments":[{"arguments":[{"name":"_returnData","nodeType":"YulIdentifier","src":"2325:11:20"},{"kind":"number","nodeType":"YulLiteral","src":"2338:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2321:3:20"},"nodeType":"YulFunctionCall","src":"2321:22:20"},{"kind":"number","nodeType":"YulLiteral","src":"2345:1:20","type":"","value":"0"},{"name":"_toCopy","nodeType":"YulIdentifier","src":"2348:7:20"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"2306:14:20"},"nodeType":"YulFunctionCall","src":"2306:50:20"},"nodeType":"YulExpressionStatement","src":"2306:50:20"}]},"evmVersion":"berlin","externalReferences":[{"declaration":4765,"isOffset":false,"isSlot":false,"src":"1842:9:20","valueSize":1},{"declaration":4765,"isOffset":false,"isSlot":false,"src":"1888:9:20","valueSize":1},{"declaration":4761,"isOffset":false,"isSlot":false,"src":"1746:4:20","valueSize":1},{"declaration":4763,"isOffset":false,"isSlot":false,"src":"2084:8:20","valueSize":1},{"declaration":4763,"isOffset":false,"isSlot":false,"src":"2124:8:20","valueSize":1},{"declaration":4779,"isOffset":false,"isSlot":false,"src":"2217:11:20","valueSize":1},{"declaration":4779,"isOffset":false,"isSlot":false,"src":"2325:11:20","valueSize":1},{"declaration":4776,"isOffset":false,"isSlot":false,"src":"1715:8:20","valueSize":1},{"declaration":4759,"isOffset":false,"isSlot":false,"src":"1772:7:20","valueSize":1},{"declaration":4773,"isOffset":false,"isSlot":false,"src":"2028:7:20","valueSize":1},{"declaration":4773,"isOffset":false,"isSlot":false,"src":"2075:7:20","valueSize":1},{"declaration":4773,"isOffset":false,"isSlot":false,"src":"2113:7:20","valueSize":1},{"declaration":4773,"isOffset":false,"isSlot":false,"src":"2230:7:20","valueSize":1},{"declaration":4773,"isOffset":false,"isSlot":false,"src":"2348:7:20","valueSize":1}],"id":4785,"nodeType":"InlineAssembly","src":"1691:676:20"},{"expression":{"components":[{"id":4786,"name":"_success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4776,"src":"2385:8:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4787,"name":"_returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4779,"src":"2395:11:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":4788,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2384:23:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"functionReturnParameters":4771,"id":4789,"nodeType":"Return","src":"2377:30:20"}]},"documentation":{"id":4757,"nodeType":"StructuredDocumentation","src":"221:913:20","text":"@notice Use when you _really_ really _really_ don't trust the called\n contract. This prevents the called contract from causing reversion of\n the caller in as many ways as we can.\n @dev The main difference between this and a solidity low-level call is\n that we limit the number of bytes that the callee can cause to be\n copied to caller memory. This prevents stupid things like malicious\n contracts returning 10,000,000 bytes causing a local OOG when copying\n to memory.\n @param _target The address to call\n @param _gas The amount of gas to forward to the remote contract\n @param _maxCopy The maximum number of bytes of returndata to copy\n to memory.\n @param _calldata The data to send to the remote contract\n @return success and returndata, as `.call()`. Returndata is capped to\n `_maxCopy` bytes."},"id":4791,"implemented":true,"kind":"function","modifiers":[],"name":"excessivelySafeCall","nameLocation":"1149:19:20","nodeType":"FunctionDefinition","parameters":{"id":4766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4759,"mutability":"mutable","name":"_target","nameLocation":"1187:7:20","nodeType":"VariableDeclaration","scope":4791,"src":"1179:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4758,"name":"address","nodeType":"ElementaryTypeName","src":"1179:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4761,"mutability":"mutable","name":"_gas","nameLocation":"1213:4:20","nodeType":"VariableDeclaration","scope":4791,"src":"1205:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4760,"name":"uint256","nodeType":"ElementaryTypeName","src":"1205:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4763,"mutability":"mutable","name":"_maxCopy","nameLocation":"1235:8:20","nodeType":"VariableDeclaration","scope":4791,"src":"1228:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4762,"name":"uint16","nodeType":"ElementaryTypeName","src":"1228:6:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4765,"mutability":"mutable","name":"_calldata","nameLocation":"1267:9:20","nodeType":"VariableDeclaration","scope":4791,"src":"1254:22:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4764,"name":"bytes","nodeType":"ElementaryTypeName","src":"1254:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1168:115:20"},"returnParameters":{"id":4771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4768,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4791,"src":"1302:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4767,"name":"bool","nodeType":"ElementaryTypeName","src":"1302:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4770,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4791,"src":"1308:12:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4769,"name":"bytes","nodeType":"ElementaryTypeName","src":"1308:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1301:20:20"},"scope":4848,"src":"1140:1275:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4825,"nodeType":"Block","src":"3535:1068:20","statements":[{"assignments":[4808],"declarations":[{"constant":false,"id":4808,"mutability":"mutable","name":"_toCopy","nameLocation":"3591:7:20","nodeType":"VariableDeclaration","scope":4825,"src":"3583:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4807,"name":"uint256","nodeType":"ElementaryTypeName","src":"3583:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4809,"nodeType":"VariableDeclarationStatement","src":"3583:15:20"},{"assignments":[4811],"declarations":[{"constant":false,"id":4811,"mutability":"mutable","name":"_success","nameLocation":"3614:8:20","nodeType":"VariableDeclaration","scope":4825,"src":"3609:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4810,"name":"bool","nodeType":"ElementaryTypeName","src":"3609:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4812,"nodeType":"VariableDeclarationStatement","src":"3609:13:20"},{"assignments":[4814],"declarations":[{"constant":false,"id":4814,"mutability":"mutable","name":"_returnData","nameLocation":"3646:11:20","nodeType":"VariableDeclaration","scope":4825,"src":"3633:24:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4813,"name":"bytes","nodeType":"ElementaryTypeName","src":"3633:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4819,"initialValue":{"arguments":[{"id":4817,"name":"_maxCopy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4798,"src":"3670:8:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":4816,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3660:9:20","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":4815,"name":"bytes","nodeType":"ElementaryTypeName","src":"3664:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":4818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3660:19:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3633:46:20"},{"AST":{"nodeType":"YulBlock","src":"3913:642:20","statements":[{"nodeType":"YulAssignment","src":"3928:234:20","value":{"arguments":[{"name":"_gas","nodeType":"YulIdentifier","src":"3965:4:20"},{"name":"_target","nodeType":"YulIdentifier","src":"3991:7:20"},{"arguments":[{"name":"_calldata","nodeType":"YulIdentifier","src":"4030:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"4041:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4026:3:20"},"nodeType":"YulFunctionCall","src":"4026:20:20"},{"arguments":[{"name":"_calldata","nodeType":"YulIdentifier","src":"4076:9:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4070:5:20"},"nodeType":"YulFunctionCall","src":"4070:16:20"},{"kind":"number","nodeType":"YulLiteral","src":"4110:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4136:1:20","type":"","value":"0"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"3940:10:20"},"nodeType":"YulFunctionCall","src":"3940:222:20"},"variableNames":[{"name":"_success","nodeType":"YulIdentifier","src":"3928:8:20"}]},{"nodeType":"YulAssignment","src":"4216:27:20","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"4227:14:20"},"nodeType":"YulFunctionCall","src":"4227:16:20"},"variableNames":[{"name":"_toCopy","nodeType":"YulIdentifier","src":"4216:7:20"}]},{"body":{"nodeType":"YulBlock","src":"4282:53:20","statements":[{"nodeType":"YulAssignment","src":"4301:19:20","value":{"name":"_maxCopy","nodeType":"YulIdentifier","src":"4312:8:20"},"variableNames":[{"name":"_toCopy","nodeType":"YulIdentifier","src":"4301:7:20"}]}]},"condition":{"arguments":[{"name":"_toCopy","nodeType":"YulIdentifier","src":"4263:7:20"},{"name":"_maxCopy","nodeType":"YulIdentifier","src":"4272:8:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4260:2:20"},"nodeType":"YulFunctionCall","src":"4260:21:20"},"nodeType":"YulIf","src":"4257:2:20"},{"expression":{"arguments":[{"name":"_returnData","nodeType":"YulIdentifier","src":"4405:11:20"},{"name":"_toCopy","nodeType":"YulIdentifier","src":"4418:7:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4398:6:20"},"nodeType":"YulFunctionCall","src":"4398:28:20"},"nodeType":"YulExpressionStatement","src":"4398:28:20"},{"expression":{"arguments":[{"arguments":[{"name":"_returnData","nodeType":"YulIdentifier","src":"4513:11:20"},{"kind":"number","nodeType":"YulLiteral","src":"4526:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4509:3:20"},"nodeType":"YulFunctionCall","src":"4509:22:20"},{"kind":"number","nodeType":"YulLiteral","src":"4533:1:20","type":"","value":"0"},{"name":"_toCopy","nodeType":"YulIdentifier","src":"4536:7:20"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"4494:14:20"},"nodeType":"YulFunctionCall","src":"4494:50:20"},"nodeType":"YulExpressionStatement","src":"4494:50:20"}]},"evmVersion":"berlin","externalReferences":[{"declaration":4800,"isOffset":false,"isSlot":false,"src":"4030:9:20","valueSize":1},{"declaration":4800,"isOffset":false,"isSlot":false,"src":"4076:9:20","valueSize":1},{"declaration":4796,"isOffset":false,"isSlot":false,"src":"3965:4:20","valueSize":1},{"declaration":4798,"isOffset":false,"isSlot":false,"src":"4272:8:20","valueSize":1},{"declaration":4798,"isOffset":false,"isSlot":false,"src":"4312:8:20","valueSize":1},{"declaration":4814,"isOffset":false,"isSlot":false,"src":"4405:11:20","valueSize":1},{"declaration":4814,"isOffset":false,"isSlot":false,"src":"4513:11:20","valueSize":1},{"declaration":4811,"isOffset":false,"isSlot":false,"src":"3928:8:20","valueSize":1},{"declaration":4794,"isOffset":false,"isSlot":false,"src":"3991:7:20","valueSize":1},{"declaration":4808,"isOffset":false,"isSlot":false,"src":"4216:7:20","valueSize":1},{"declaration":4808,"isOffset":false,"isSlot":false,"src":"4263:7:20","valueSize":1},{"declaration":4808,"isOffset":false,"isSlot":false,"src":"4301:7:20","valueSize":1},{"declaration":4808,"isOffset":false,"isSlot":false,"src":"4418:7:20","valueSize":1},{"declaration":4808,"isOffset":false,"isSlot":false,"src":"4536:7:20","valueSize":1}],"id":4820,"nodeType":"InlineAssembly","src":"3904:651:20"},{"expression":{"components":[{"id":4821,"name":"_success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4811,"src":"4573:8:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4822,"name":"_returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4814,"src":"4583:11:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":4823,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4572:23:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"functionReturnParameters":4806,"id":4824,"nodeType":"Return","src":"4565:30:20"}]},"documentation":{"id":4792,"nodeType":"StructuredDocumentation","src":"2423:913:20","text":"@notice Use when you _really_ really _really_ don't trust the called\n contract. This prevents the called contract from causing reversion of\n the caller in as many ways as we can.\n @dev The main difference between this and a solidity low-level call is\n that we limit the number of bytes that the callee can cause to be\n copied to caller memory. This prevents stupid things like malicious\n contracts returning 10,000,000 bytes causing a local OOG when copying\n to memory.\n @param _target The address to call\n @param _gas The amount of gas to forward to the remote contract\n @param _maxCopy The maximum number of bytes of returndata to copy\n to memory.\n @param _calldata The data to send to the remote contract\n @return success and returndata, as `.call()`. Returndata is capped to\n `_maxCopy` bytes."},"id":4826,"implemented":true,"kind":"function","modifiers":[],"name":"excessivelySafeStaticCall","nameLocation":"3351:25:20","nodeType":"FunctionDefinition","parameters":{"id":4801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4794,"mutability":"mutable","name":"_target","nameLocation":"3395:7:20","nodeType":"VariableDeclaration","scope":4826,"src":"3387:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4793,"name":"address","nodeType":"ElementaryTypeName","src":"3387:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4796,"mutability":"mutable","name":"_gas","nameLocation":"3421:4:20","nodeType":"VariableDeclaration","scope":4826,"src":"3413:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4795,"name":"uint256","nodeType":"ElementaryTypeName","src":"3413:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4798,"mutability":"mutable","name":"_maxCopy","nameLocation":"3443:8:20","nodeType":"VariableDeclaration","scope":4826,"src":"3436:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4797,"name":"uint16","nodeType":"ElementaryTypeName","src":"3436:6:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4800,"mutability":"mutable","name":"_calldata","nameLocation":"3475:9:20","nodeType":"VariableDeclaration","scope":4826,"src":"3462:22:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4799,"name":"bytes","nodeType":"ElementaryTypeName","src":"3462:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3376:115:20"},"returnParameters":{"id":4806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4803,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4826,"src":"3515:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4802,"name":"bool","nodeType":"ElementaryTypeName","src":"3515:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4805,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4826,"src":"3521:12:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4804,"name":"bytes","nodeType":"ElementaryTypeName","src":"3521:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3514:20:20"},"scope":4848,"src":"3342:1261:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4846,"nodeType":"Block","src":"5158:379:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4835,"name":"_buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"5177:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5177:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"34","id":4837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5192:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"5177:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4834,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5169:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":4839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5169:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4840,"nodeType":"ExpressionStatement","src":"5169:25:20"},{"assignments":[4842],"declarations":[{"constant":false,"id":4842,"mutability":"mutable","name":"_mask","nameLocation":"5213:5:20","nodeType":"VariableDeclaration","scope":4846,"src":"5205:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4841,"name":"uint256","nodeType":"ElementaryTypeName","src":"5205:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4844,"initialValue":{"id":4843,"name":"LOW_28_MASK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"5221:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5205:27:20"},{"AST":{"nodeType":"YulBlock","src":"5252:278:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5302:35:20","value":{"arguments":[{"arguments":[{"name":"_buf","nodeType":"YulIdentifier","src":"5325:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"5331:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5321:3:20"},"nodeType":"YulFunctionCall","src":"5321:15:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5315:5:20"},"nodeType":"YulFunctionCall","src":"5315:22:20"},"variables":[{"name":"_word","nodeType":"YulTypedName","src":"5306:5:20","type":""}]},{"nodeType":"YulAssignment","src":"5403:26:20","value":{"arguments":[{"name":"_word","nodeType":"YulIdentifier","src":"5416:5:20"},{"name":"_mask","nodeType":"YulIdentifier","src":"5423:5:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5412:3:20"},"nodeType":"YulFunctionCall","src":"5412:17:20"},"variableNames":[{"name":"_word","nodeType":"YulIdentifier","src":"5403:5:20"}]},{"nodeType":"YulAssignment","src":"5443:32:20","value":{"arguments":[{"name":"_newSelector","nodeType":"YulIdentifier","src":"5455:12:20"},{"name":"_word","nodeType":"YulIdentifier","src":"5469:5:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5452:2:20"},"nodeType":"YulFunctionCall","src":"5452:23:20"},"variableNames":[{"name":"_word","nodeType":"YulIdentifier","src":"5443:5:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"_buf","nodeType":"YulIdentifier","src":"5500:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"5506:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5496:3:20"},"nodeType":"YulFunctionCall","src":"5496:15:20"},{"name":"_word","nodeType":"YulIdentifier","src":"5513:5:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5489:6:20"},"nodeType":"YulFunctionCall","src":"5489:30:20"},"nodeType":"YulExpressionStatement","src":"5489:30:20"}]},"evmVersion":"berlin","externalReferences":[{"declaration":4831,"isOffset":false,"isSlot":false,"src":"5325:4:20","valueSize":1},{"declaration":4831,"isOffset":false,"isSlot":false,"src":"5500:4:20","valueSize":1},{"declaration":4842,"isOffset":false,"isSlot":false,"src":"5423:5:20","valueSize":1},{"declaration":4829,"isOffset":false,"isSlot":false,"src":"5455:12:20","valueSize":1}],"id":4845,"nodeType":"InlineAssembly","src":"5243:287:20"}]},"documentation":{"id":4827,"nodeType":"StructuredDocumentation","src":"4611:450:20","text":" @notice Swaps function selectors in encoded contract calls\n @dev Allows reuse of encoded calldata for functions with identical\n argument types but different names. It simply swaps out the first 4 bytes\n for the new selector. This function modifies memory in place, and should\n only be used with caution.\n @param _newSelector The new 4-byte selector\n @param _buf The encoded contract args"},"id":4847,"implemented":true,"kind":"function","modifiers":[],"name":"swapSelector","nameLocation":"5076:12:20","nodeType":"FunctionDefinition","parameters":{"id":4832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4829,"mutability":"mutable","name":"_newSelector","nameLocation":"5096:12:20","nodeType":"VariableDeclaration","scope":4847,"src":"5089:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4828,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5089:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":4831,"mutability":"mutable","name":"_buf","nameLocation":"5123:4:20","nodeType":"VariableDeclaration","scope":4847,"src":"5110:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4830,"name":"bytes","nodeType":"ElementaryTypeName","src":"5110:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5088:40:20"},"returnParameters":{"id":4833,"nodeType":"ParameterList","parameters":[],"src":"5158:0:20"},"scope":4848,"src":"5067:470:20","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4849,"src":"75:5465:20","usedErrors":[]}],"src":"47:5493:20"},"id":20}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_175":{"entryPoint":null,"id":175,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":289,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":364,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":415,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":548,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":579,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":589,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":643,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":697,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":751,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x22":{"entryPoint":805,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":852,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":899,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":904,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":909,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":914,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":919,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4093:21","statements":[{"body":{"nodeType":"YulBlock","src":"102:326:21","statements":[{"nodeType":"YulAssignment","src":"112:75:21","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"179:6:21"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"137:41:21"},"nodeType":"YulFunctionCall","src":"137:49:21"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"121:15:21"},"nodeType":"YulFunctionCall","src":"121:66:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"112:5:21"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"203:5:21"},{"name":"length","nodeType":"YulIdentifier","src":"210:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"196:6:21"},"nodeType":"YulFunctionCall","src":"196:21:21"},"nodeType":"YulExpressionStatement","src":"196:21:21"},{"nodeType":"YulVariableDeclaration","src":"226:27:21","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"241:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"248:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"237:3:21"},"nodeType":"YulFunctionCall","src":"237:16:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"230:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"291:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"293:77:21"},"nodeType":"YulFunctionCall","src":"293:79:21"},"nodeType":"YulExpressionStatement","src":"293:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"272:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"277:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"268:3:21"},"nodeType":"YulFunctionCall","src":"268:16:21"},{"name":"end","nodeType":"YulIdentifier","src":"286:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"265:2:21"},"nodeType":"YulFunctionCall","src":"265:25:21"},"nodeType":"YulIf","src":"262:2:21"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"405:3:21"},{"name":"dst","nodeType":"YulIdentifier","src":"410:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"415:6:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"383:21:21"},"nodeType":"YulFunctionCall","src":"383:39:21"},"nodeType":"YulExpressionStatement","src":"383:39:21"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"75:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"80:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"88:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"96:5:21","type":""}],"src":"7:421:21"},{"body":{"nodeType":"YulBlock","src":"521:282:21","statements":[{"body":{"nodeType":"YulBlock","src":"570:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"572:77:21"},"nodeType":"YulFunctionCall","src":"572:79:21"},"nodeType":"YulExpressionStatement","src":"572:79:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"549:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"557:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"545:3:21"},"nodeType":"YulFunctionCall","src":"545:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"564:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"541:3:21"},"nodeType":"YulFunctionCall","src":"541:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"534:6:21"},"nodeType":"YulFunctionCall","src":"534:35:21"},"nodeType":"YulIf","src":"531:2:21"},{"nodeType":"YulVariableDeclaration","src":"662:27:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"682:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"676:5:21"},"nodeType":"YulFunctionCall","src":"676:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"666:6:21","type":""}]},{"nodeType":"YulAssignment","src":"698:99:21","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"770:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"778:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"766:3:21"},"nodeType":"YulFunctionCall","src":"766:17:21"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:21"},{"name":"end","nodeType":"YulIdentifier","src":"793:3:21"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"707:58:21"},"nodeType":"YulFunctionCall","src":"707:90:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"698:5:21"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"499:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"507:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"515:5:21","type":""}],"src":"448:355:21"},{"body":{"nodeType":"YulBlock","src":"923:739:21","statements":[{"body":{"nodeType":"YulBlock","src":"969:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"971:77:21"},"nodeType":"YulFunctionCall","src":"971:79:21"},"nodeType":"YulExpressionStatement","src":"971:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"944:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"953:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"940:3:21"},"nodeType":"YulFunctionCall","src":"940:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"965:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"936:3:21"},"nodeType":"YulFunctionCall","src":"936:32:21"},"nodeType":"YulIf","src":"933:2:21"},{"nodeType":"YulBlock","src":"1062:291:21","statements":[{"nodeType":"YulVariableDeclaration","src":"1077:38:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1101:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1112:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1097:3:21"},"nodeType":"YulFunctionCall","src":"1097:17:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1091:5:21"},"nodeType":"YulFunctionCall","src":"1091:24:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1081:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1162:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"1164:77:21"},"nodeType":"YulFunctionCall","src":"1164:79:21"},"nodeType":"YulExpressionStatement","src":"1164:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1134:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1142:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1131:2:21"},"nodeType":"YulFunctionCall","src":"1131:30:21"},"nodeType":"YulIf","src":"1128:2:21"},{"nodeType":"YulAssignment","src":"1259:84:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1315:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"1326:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1311:3:21"},"nodeType":"YulFunctionCall","src":"1311:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1335:7:21"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"1269:41:21"},"nodeType":"YulFunctionCall","src":"1269:74:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1259:6:21"}]}]},{"nodeType":"YulBlock","src":"1363:292:21","statements":[{"nodeType":"YulVariableDeclaration","src":"1378:39:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1402:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1413:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1398:3:21"},"nodeType":"YulFunctionCall","src":"1398:18:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1392:5:21"},"nodeType":"YulFunctionCall","src":"1392:25:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1382:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1464:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"1466:77:21"},"nodeType":"YulFunctionCall","src":"1466:79:21"},"nodeType":"YulExpressionStatement","src":"1466:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1436:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1444:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1433:2:21"},"nodeType":"YulFunctionCall","src":"1433:30:21"},"nodeType":"YulIf","src":"1430:2:21"},{"nodeType":"YulAssignment","src":"1561:84:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1617:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"1628:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1613:3:21"},"nodeType":"YulFunctionCall","src":"1613:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1637:7:21"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"1571:41:21"},"nodeType":"YulFunctionCall","src":"1571:74:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1561:6:21"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"885:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"896:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"908:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"916:6:21","type":""}],"src":"809:853:21"},{"body":{"nodeType":"YulBlock","src":"1709:88:21","statements":[{"nodeType":"YulAssignment","src":"1719:30:21","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1729:18:21"},"nodeType":"YulFunctionCall","src":"1729:20:21"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1719:6:21"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1778:6:21"},{"name":"size","nodeType":"YulIdentifier","src":"1786:4:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1758:19:21"},"nodeType":"YulFunctionCall","src":"1758:33:21"},"nodeType":"YulExpressionStatement","src":"1758:33:21"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1693:4:21","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1702:6:21","type":""}],"src":"1668:129:21"},{"body":{"nodeType":"YulBlock","src":"1843:35:21","statements":[{"nodeType":"YulAssignment","src":"1853:19:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1869:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1863:5:21"},"nodeType":"YulFunctionCall","src":"1863:9:21"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1853:6:21"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1836:6:21","type":""}],"src":"1803:75:21"},{"body":{"nodeType":"YulBlock","src":"1951:241:21","statements":[{"body":{"nodeType":"YulBlock","src":"2056:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2058:16:21"},"nodeType":"YulFunctionCall","src":"2058:18:21"},"nodeType":"YulExpressionStatement","src":"2058:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2028:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2036:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2025:2:21"},"nodeType":"YulFunctionCall","src":"2025:30:21"},"nodeType":"YulIf","src":"2022:2:21"},{"nodeType":"YulAssignment","src":"2088:37:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2118:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2096:21:21"},"nodeType":"YulFunctionCall","src":"2096:29:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2088:4:21"}]},{"nodeType":"YulAssignment","src":"2162:23:21","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2174:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"2180:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2170:3:21"},"nodeType":"YulFunctionCall","src":"2170:15:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2162:4:21"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1935:6:21","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1946:4:21","type":""}],"src":"1884:308:21"},{"body":{"nodeType":"YulBlock","src":"2247:258:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2257:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"2266:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2261:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2326:63:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2351:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"2356:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2347:3:21"},"nodeType":"YulFunctionCall","src":"2347:11:21"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2370:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"2375:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2366:3:21"},"nodeType":"YulFunctionCall","src":"2366:11:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2360:5:21"},"nodeType":"YulFunctionCall","src":"2360:18:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2340:6:21"},"nodeType":"YulFunctionCall","src":"2340:39:21"},"nodeType":"YulExpressionStatement","src":"2340:39:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2287:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"2290:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2284:2:21"},"nodeType":"YulFunctionCall","src":"2284:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2298:19:21","statements":[{"nodeType":"YulAssignment","src":"2300:15:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2309:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"2312:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2305:3:21"},"nodeType":"YulFunctionCall","src":"2305:10:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2300:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"2280:3:21","statements":[]},"src":"2276:113:21"},{"body":{"nodeType":"YulBlock","src":"2423:76:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2473:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"2478:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2469:3:21"},"nodeType":"YulFunctionCall","src":"2469:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"2487:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2462:6:21"},"nodeType":"YulFunctionCall","src":"2462:27:21"},"nodeType":"YulExpressionStatement","src":"2462:27:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2404:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"2407:6:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2401:2:21"},"nodeType":"YulFunctionCall","src":"2401:13:21"},"nodeType":"YulIf","src":"2398:2:21"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2229:3:21","type":""},{"name":"dst","nodeType":"YulTypedName","src":"2234:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"2239:6:21","type":""}],"src":"2198:307:21"},{"body":{"nodeType":"YulBlock","src":"2562:269:21","statements":[{"nodeType":"YulAssignment","src":"2572:22:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2586:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"2592:1:21","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2582:3:21"},"nodeType":"YulFunctionCall","src":"2582:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2572:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"2603:38:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2633:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"2639:1:21","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2629:3:21"},"nodeType":"YulFunctionCall","src":"2629:12:21"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2607:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2680:51:21","statements":[{"nodeType":"YulAssignment","src":"2694:27:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2708:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2716:4:21","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2704:3:21"},"nodeType":"YulFunctionCall","src":"2704:17:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2694:6:21"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2660:18:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2653:6:21"},"nodeType":"YulFunctionCall","src":"2653:26:21"},"nodeType":"YulIf","src":"2650:2:21"},{"body":{"nodeType":"YulBlock","src":"2783:42:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"2797:16:21"},"nodeType":"YulFunctionCall","src":"2797:18:21"},"nodeType":"YulExpressionStatement","src":"2797:18:21"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2747:18:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2770:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2778:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2767:2:21"},"nodeType":"YulFunctionCall","src":"2767:14:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2744:2:21"},"nodeType":"YulFunctionCall","src":"2744:38:21"},"nodeType":"YulIf","src":"2741:2:21"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2546:4:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2555:6:21","type":""}],"src":"2511:320:21"},{"body":{"nodeType":"YulBlock","src":"2880:238:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2890:58:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2912:6:21"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2942:4:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2920:21:21"},"nodeType":"YulFunctionCall","src":"2920:27:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2908:3:21"},"nodeType":"YulFunctionCall","src":"2908:40:21"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2894:10:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3059:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3061:16:21"},"nodeType":"YulFunctionCall","src":"3061:18:21"},"nodeType":"YulExpressionStatement","src":"3061:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3002:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"3014:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2999:2:21"},"nodeType":"YulFunctionCall","src":"2999:34:21"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3038:10:21"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3050:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3035:2:21"},"nodeType":"YulFunctionCall","src":"3035:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2996:2:21"},"nodeType":"YulFunctionCall","src":"2996:62:21"},"nodeType":"YulIf","src":"2993:2:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3097:2:21","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3101:10:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3090:6:21"},"nodeType":"YulFunctionCall","src":"3090:22:21"},"nodeType":"YulExpressionStatement","src":"3090:22:21"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2866:6:21","type":""},{"name":"size","nodeType":"YulTypedName","src":"2874:4:21","type":""}],"src":"2837:281:21"},{"body":{"nodeType":"YulBlock","src":"3152:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3169:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3172:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3162:6:21"},"nodeType":"YulFunctionCall","src":"3162:88:21"},"nodeType":"YulExpressionStatement","src":"3162:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3266:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3269:4:21","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3259:6:21"},"nodeType":"YulFunctionCall","src":"3259:15:21"},"nodeType":"YulExpressionStatement","src":"3259:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3290:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3293:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3283:6:21"},"nodeType":"YulFunctionCall","src":"3283:15:21"},"nodeType":"YulExpressionStatement","src":"3283:15:21"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"3124:180:21"},{"body":{"nodeType":"YulBlock","src":"3338:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3355:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3358:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3348:6:21"},"nodeType":"YulFunctionCall","src":"3348:88:21"},"nodeType":"YulExpressionStatement","src":"3348:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3452:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3455:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3445:6:21"},"nodeType":"YulFunctionCall","src":"3445:15:21"},"nodeType":"YulExpressionStatement","src":"3445:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3476:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3479:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3469:6:21"},"nodeType":"YulFunctionCall","src":"3469:15:21"},"nodeType":"YulExpressionStatement","src":"3469:15:21"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3310:180:21"},{"body":{"nodeType":"YulBlock","src":"3585:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3602:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3605:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3595:6:21"},"nodeType":"YulFunctionCall","src":"3595:12:21"},"nodeType":"YulExpressionStatement","src":"3595:12:21"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"3496:117:21"},{"body":{"nodeType":"YulBlock","src":"3708:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3725:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3728:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3718:6:21"},"nodeType":"YulFunctionCall","src":"3718:12:21"},"nodeType":"YulExpressionStatement","src":"3718:12:21"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"3619:117:21"},{"body":{"nodeType":"YulBlock","src":"3831:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3848:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3851:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3841:6:21"},"nodeType":"YulFunctionCall","src":"3841:12:21"},"nodeType":"YulExpressionStatement","src":"3841:12:21"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"3742:117:21"},{"body":{"nodeType":"YulBlock","src":"3954:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3971:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3974:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3964:6:21"},"nodeType":"YulFunctionCall","src":"3964:12:21"},"nodeType":"YulExpressionStatement","src":"3964:12:21"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"3865:117:21"},{"body":{"nodeType":"YulBlock","src":"4036:54:21","statements":[{"nodeType":"YulAssignment","src":"4046:38:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4064:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"4071:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4060:3:21"},"nodeType":"YulFunctionCall","src":"4060:14:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4080:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4076:3:21"},"nodeType":"YulFunctionCall","src":"4076:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4056:3:21"},"nodeType":"YulFunctionCall","src":"4056:28:21"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4046:6:21"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4019:5:21","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4029:6:21","type":""}],"src":"3988:102:21"}]},"contents":"{\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n}\n","id":21,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50604051620026da380380620026da83398181016040528101906200003791906200019f565b81600090805190602001906200004f92919062000071565b5080600190805190602001906200006892919062000071565b505050620003a8565b8280546200007f90620002b9565b90600052602060002090601f016020900481019282620000a35760008555620000ef565b82601f10620000be57805160ff1916838001178555620000ef565b82800160010185558215620000ef579182015b82811115620000ee578251825591602001919060010190620000d1565b5b509050620000fe919062000102565b5090565b5b808211156200011d57600081600090555060010162000103565b5090565b60006200013862000132846200024d565b62000224565b90508281526020810184848401111562000157576200015662000388565b5b6200016484828562000283565b509392505050565b600082601f83011262000184576200018362000383565b5b81516200019684826020860162000121565b91505092915050565b60008060408385031215620001b957620001b862000392565b5b600083015167ffffffffffffffff811115620001da57620001d96200038d565b5b620001e8858286016200016c565b925050602083015167ffffffffffffffff8111156200020c576200020b6200038d565b5b6200021a858286016200016c565b9150509250929050565b60006200023062000243565b90506200023e8282620002ef565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026b576200026a62000354565b5b620002768262000397565b9050602081019050919050565b60005b83811015620002a357808201518184015260208101905062000286565b83811115620002b3576000848401525b50505050565b60006002820490506001821680620002d257607f821691505b60208210811415620002e957620002e862000325565b5b50919050565b620002fa8262000397565b810181811067ffffffffffffffff821117156200031c576200031b62000354565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61232280620003b86000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e99190611863565b6102bc565b6040516100fb9190611b80565b60405180910390f35b61010c61039e565b6040516101199190611b9b565b60405180910390f35b61013c600480360381019061013791906118bd565b610430565b6040516101499190611b19565b60405180910390f35b61016c60048036038101906101679190611823565b610476565b005b6101886004803603810190610183919061170d565b61058e565b005b6101a4600480360381019061019f919061170d565b6105ee565b005b6101c060048036038101906101bb91906118bd565b61060e565b6040516101cd9190611b19565b60405180910390f35b6101f060048036038101906101eb91906116a0565b610695565b6040516101fd9190611cdd565b60405180910390f35b61020e61074d565b60405161021b9190611b9b565b60405180910390f35b61023e600480360381019061023991906117e3565b6107df565b005b61025a60048036038101906102559190611760565b6107f5565b005b610276600480360381019061027191906118bd565b610857565b6040516102839190611b9b565b60405180910390f35b6102a660048036038101906102a191906116cd565b6108bf565b6040516102b39190611b80565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610953565b5b9050919050565b6060600080546103ad90611ed1565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611ed1565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109bd565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e990611c9d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610511610a08565b73ffffffffffffffffffffffffffffffffffffffff161480610540575061053f8161053a610a08565b6108bf565b5b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690611cbd565b60405180910390fd5b6105898383610a10565b505050565b61059f610599610a08565b82610ac9565b6105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590611bbd565b60405180910390fd5b6105e9838383610b5e565b505050565b610609838383604051806020016040528060008152506107f5565b505050565b60008061061a83610e58565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611c7d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd90611c5d565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075c90611ed1565b80601f016020809104026020016040519081016040528092919081815260200182805461078890611ed1565b80156107d55780601f106107aa576101008083540402835291602001916107d5565b820191906000526020600020905b8154815290600101906020018083116107b857829003601f168201915b5050505050905090565b6107f16107ea610a08565b8383610e95565b5050565b610806610800610a08565b83610ac9565b610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c90611bbd565b60405180910390fd5b61085184848484611002565b50505050565b6060610862826109bd565b600061086c61105e565b9050600081511161088c57604051806020016040528060008152506108b7565b8061089684611075565b6040516020016108a7929190611af5565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c68161114d565b610a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fc90611c7d565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a838361060e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad58361060e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b175750610b1681856108bf565b5b80610b5557508373ffffffffffffffffffffffffffffffffffffffff16610b3d84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7e8261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611bfd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90611c1d565b60405180910390fd5b610c51838383600161118e565b8273ffffffffffffffffffffffffffffffffffffffff16610c718261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90611bfd565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e5383838360016112b4565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb90611c3d565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff59190611b80565b60405180910390a3505050565b61100d848484610b5e565b611019848484846112ba565b611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90611bdd565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161108484611451565b01905060008167ffffffffffffffff8111156110a3576110a2611fc1565b5b6040519080825280601f01601f1916602001820160405280156110d55781602001600182028036833780820191505090505b509050600082602001820190505b600115611142578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161112c5761112b611f63565b5b049450600085141561113d57611142565b6110e3565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116f83610e58565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60018111156112ae57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146112225780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461121a9190611de7565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146112ad5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112a59190611d91565b925050819055505b5b50505050565b50505050565b60006112db8473ffffffffffffffffffffffffffffffffffffffff166115a4565b15611444578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611304610a08565b8786866040518563ffffffff1660e01b81526004016113269493929190611b34565b602060405180830381600087803b15801561134057600080fd5b505af192505050801561137157506040513d601f19601f8201168201806040525081019061136e9190611890565b60015b6113f4573d80600081146113a1576040519150601f19603f3d011682016040523d82523d6000602084013e6113a6565b606091505b506000815114156113ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e390611bdd565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611449565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106114af577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816114a5576114a4611f63565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106114ec576d04ee2d6d415b85acef810000000083816114e2576114e1611f63565b5b0492506020810190505b662386f26fc10000831061151b57662386f26fc10000838161151157611510611f63565b5b0492506010810190505b6305f5e1008310611544576305f5e100838161153a57611539611f63565b5b0492506008810190505b612710831061156957612710838161155f5761155e611f63565b5b0492506004810190505b6064831061158c576064838161158257611581611f63565b5b0492506002810190505b600a831061159b576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60006115da6115d584611d1d565b611cf8565b9050828152602081018484840111156115f6576115f5611ff5565b5b611601848285611e8f565b509392505050565b60008135905061161881612290565b92915050565b60008135905061162d816122a7565b92915050565b600081359050611642816122be565b92915050565b600081519050611657816122be565b92915050565b600082601f83011261167257611671611ff0565b5b81356116828482602086016115c7565b91505092915050565b60008135905061169a816122d5565b92915050565b6000602082840312156116b6576116b5611fff565b5b60006116c484828501611609565b91505092915050565b600080604083850312156116e4576116e3611fff565b5b60006116f285828601611609565b925050602061170385828601611609565b9150509250929050565b60008060006060848603121561172657611725611fff565b5b600061173486828701611609565b935050602061174586828701611609565b92505060406117568682870161168b565b9150509250925092565b6000806000806080858703121561177a57611779611fff565b5b600061178887828801611609565b945050602061179987828801611609565b93505060406117aa8782880161168b565b925050606085013567ffffffffffffffff8111156117cb576117ca611ffa565b5b6117d78782880161165d565b91505092959194509250565b600080604083850312156117fa576117f9611fff565b5b600061180885828601611609565b92505060206118198582860161161e565b9150509250929050565b6000806040838503121561183a57611839611fff565b5b600061184885828601611609565b92505060206118598582860161168b565b9150509250929050565b60006020828403121561187957611878611fff565b5b600061188784828501611633565b91505092915050565b6000602082840312156118a6576118a5611fff565b5b60006118b484828501611648565b91505092915050565b6000602082840312156118d3576118d2611fff565b5b60006118e18482850161168b565b91505092915050565b6118f381611e1b565b82525050565b61190281611e2d565b82525050565b600061191382611d4e565b61191d8185611d64565b935061192d818560208601611e9e565b61193681612004565b840191505092915050565b600061194c82611d59565b6119568185611d75565b9350611966818560208601611e9e565b61196f81612004565b840191505092915050565b600061198582611d59565b61198f8185611d86565b935061199f818560208601611e9e565b80840191505092915050565b60006119b8602d83611d75565b91506119c382612015565b604082019050919050565b60006119db603283611d75565b91506119e682612064565b604082019050919050565b60006119fe602583611d75565b9150611a09826120b3565b604082019050919050565b6000611a21602483611d75565b9150611a2c82612102565b604082019050919050565b6000611a44601983611d75565b9150611a4f82612151565b602082019050919050565b6000611a67602983611d75565b9150611a728261217a565b604082019050919050565b6000611a8a601883611d75565b9150611a95826121c9565b602082019050919050565b6000611aad602183611d75565b9150611ab8826121f2565b604082019050919050565b6000611ad0603d83611d75565b9150611adb82612241565b604082019050919050565b611aef81611e85565b82525050565b6000611b01828561197a565b9150611b0d828461197a565b91508190509392505050565b6000602082019050611b2e60008301846118ea565b92915050565b6000608082019050611b4960008301876118ea565b611b5660208301866118ea565b611b636040830185611ae6565b8181036060830152611b758184611908565b905095945050505050565b6000602082019050611b9560008301846118f9565b92915050565b60006020820190508181036000830152611bb58184611941565b905092915050565b60006020820190508181036000830152611bd6816119ab565b9050919050565b60006020820190508181036000830152611bf6816119ce565b9050919050565b60006020820190508181036000830152611c16816119f1565b9050919050565b60006020820190508181036000830152611c3681611a14565b9050919050565b60006020820190508181036000830152611c5681611a37565b9050919050565b60006020820190508181036000830152611c7681611a5a565b9050919050565b60006020820190508181036000830152611c9681611a7d565b9050919050565b60006020820190508181036000830152611cb681611aa0565b9050919050565b60006020820190508181036000830152611cd681611ac3565b9050919050565b6000602082019050611cf26000830184611ae6565b92915050565b6000611d02611d13565b9050611d0e8282611f03565b919050565b6000604051905090565b600067ffffffffffffffff821115611d3857611d37611fc1565b5b611d4182612004565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611d9c82611e85565b9150611da783611e85565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ddc57611ddb611f34565b5b828201905092915050565b6000611df282611e85565b9150611dfd83611e85565b925082821015611e1057611e0f611f34565b5b828203905092915050565b6000611e2682611e65565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611ebc578082015181840152602081019050611ea1565b83811115611ecb576000848401525b50505050565b60006002820490506001821680611ee957607f821691505b60208210811415611efd57611efc611f92565b5b50919050565b611f0c82612004565b810181811067ffffffffffffffff82111715611f2b57611f2a611fc1565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b61229981611e1b565b81146122a457600080fd5b50565b6122b081611e2d565b81146122bb57600080fd5b50565b6122c781611e39565b81146122d257600080fd5b50565b6122de81611e85565b81146122e957600080fd5b5056fea2646970667358221220a024ed13883dd1fe352733e0632b3403592227559d263654a5da2c893131b18364736f6c63430008060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x26DA CODESIZE SUB DUP1 PUSH3 0x26DA DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x19F JUMP JUMPDEST DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x4F SWAP3 SWAP2 SWAP1 PUSH3 0x71 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x68 SWAP3 SWAP2 SWAP1 PUSH3 0x71 JUMP JUMPDEST POP POP POP PUSH3 0x3A8 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x7F SWAP1 PUSH3 0x2B9 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xA3 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xEF JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xBE JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xEF JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xEF JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xEE JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xD1 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0xFE SWAP2 SWAP1 PUSH3 0x102 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x11D JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x103 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x138 PUSH3 0x132 DUP5 PUSH3 0x24D JUMP JUMPDEST PUSH3 0x224 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x157 JUMPI PUSH3 0x156 PUSH3 0x388 JUMP JUMPDEST JUMPDEST PUSH3 0x164 DUP5 DUP3 DUP6 PUSH3 0x283 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x184 JUMPI PUSH3 0x183 PUSH3 0x383 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x196 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x121 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1B9 JUMPI PUSH3 0x1B8 PUSH3 0x392 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1DA JUMPI PUSH3 0x1D9 PUSH3 0x38D JUMP JUMPDEST JUMPDEST PUSH3 0x1E8 DUP6 DUP3 DUP7 ADD PUSH3 0x16C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x20C JUMPI PUSH3 0x20B PUSH3 0x38D JUMP JUMPDEST JUMPDEST PUSH3 0x21A DUP6 DUP3 DUP7 ADD PUSH3 0x16C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x230 PUSH3 0x243 JUMP JUMPDEST SWAP1 POP PUSH3 0x23E DUP3 DUP3 PUSH3 0x2EF JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x26B JUMPI PUSH3 0x26A PUSH3 0x354 JUMP JUMPDEST JUMPDEST PUSH3 0x276 DUP3 PUSH3 0x397 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x2A3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x286 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x2B3 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x2D2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x2E9 JUMPI PUSH3 0x2E8 PUSH3 0x325 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x2FA DUP3 PUSH3 0x397 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x31C JUMPI PUSH3 0x31B PUSH3 0x354 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2322 DUP1 PUSH3 0x3B8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1863 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x1B19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x1823 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x170D JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x170D JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x1B19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x16A0 JUMP JUMPDEST PUSH2 0x695 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x17E3 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x7F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x16CD JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x953 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E9 SWAP1 PUSH2 0x1C9D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x511 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x540 JUMPI POP PUSH2 0x53F DUP2 PUSH2 0x53A PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP1 PUSH2 0x1CBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x589 DUP4 DUP4 PUSH2 0xA10 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59F PUSH2 0x599 PUSH2 0xA08 JUMP JUMPDEST DUP3 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D5 SWAP1 PUSH2 0x1BBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E9 DUP4 DUP4 DUP4 PUSH2 0xB5E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x609 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x61A DUP4 PUSH2 0xE58 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x68C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x683 SWAP1 PUSH2 0x1C7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FD SWAP1 PUSH2 0x1C5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x75C SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x788 SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7AA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x7EA PUSH2 0xA08 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE95 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x806 PUSH2 0x800 PUSH2 0xA08 JUMP JUMPDEST DUP4 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x83C SWAP1 PUSH2 0x1BBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x851 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1002 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x862 DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86C PUSH2 0x105E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x88C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B7 JUMP JUMPDEST DUP1 PUSH2 0x896 DUP5 PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A7 SWAP3 SWAP2 SWAP1 PUSH2 0x1AF5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C6 DUP2 PUSH2 0x114D JUMP JUMPDEST PUSH2 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9FC SWAP1 PUSH2 0x1C7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA83 DUP4 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD5 DUP4 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB17 JUMPI POP PUSH2 0xB16 DUP2 DUP6 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB55 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3D DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7E DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCB SWAP1 PUSH2 0x1BFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3B SWAP1 PUSH2 0x1C1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC51 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x118E JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC71 DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1BFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE53 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x12B4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEFB SWAP1 PUSH2 0x1C3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF5 SWAP2 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x100D DUP5 DUP5 DUP5 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x1019 DUP5 DUP5 DUP5 DUP5 PUSH2 0x12BA JUMP JUMPDEST PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x1BDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1084 DUP5 PUSH2 0x1451 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10A3 JUMPI PUSH2 0x10A2 PUSH2 0x1FC1 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1142 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x112C JUMPI PUSH2 0x112B PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x113D JUMPI PUSH2 0x1142 JUMP JUMPDEST PUSH2 0x10E3 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x116F DUP4 PUSH2 0xE58 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x12AE JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1222 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x121A SWAP2 SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12AD JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12A5 SWAP2 SWAP1 PUSH2 0x1D91 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12DB DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x15A4 JUMP JUMPDEST ISZERO PUSH2 0x1444 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1304 PUSH2 0xA08 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1326 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B34 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1371 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x136E SWAP2 SWAP1 PUSH2 0x1890 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x13F4 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x13A1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13A6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x13EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13E3 SWAP1 PUSH2 0x1BDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1449 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x14AF JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x14A5 JUMPI PUSH2 0x14A4 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x14EC JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x14E2 JUMPI PUSH2 0x14E1 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x151B JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1511 JUMPI PUSH2 0x1510 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1544 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x153A JUMPI PUSH2 0x1539 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1569 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x155F JUMPI PUSH2 0x155E PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x158C JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1582 JUMPI PUSH2 0x1581 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x159B JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15DA PUSH2 0x15D5 DUP5 PUSH2 0x1D1D JUMP JUMPDEST PUSH2 0x1CF8 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x15F6 JUMPI PUSH2 0x15F5 PUSH2 0x1FF5 JUMP JUMPDEST JUMPDEST PUSH2 0x1601 DUP5 DUP3 DUP6 PUSH2 0x1E8F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1618 DUP2 PUSH2 0x2290 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x162D DUP2 PUSH2 0x22A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1642 DUP2 PUSH2 0x22BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1657 DUP2 PUSH2 0x22BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1672 JUMPI PUSH2 0x1671 PUSH2 0x1FF0 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1682 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x15C7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x169A DUP2 PUSH2 0x22D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16B6 JUMPI PUSH2 0x16B5 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16C4 DUP5 DUP3 DUP6 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16E4 JUMPI PUSH2 0x16E3 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16F2 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1703 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1726 JUMPI PUSH2 0x1725 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1734 DUP7 DUP3 DUP8 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1745 DUP7 DUP3 DUP8 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1756 DUP7 DUP3 DUP8 ADD PUSH2 0x168B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x177A JUMPI PUSH2 0x1779 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1788 DUP8 DUP3 DUP9 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1799 DUP8 DUP3 DUP9 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x17AA DUP8 DUP3 DUP9 ADD PUSH2 0x168B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17CB JUMPI PUSH2 0x17CA PUSH2 0x1FFA JUMP JUMPDEST JUMPDEST PUSH2 0x17D7 DUP8 DUP3 DUP9 ADD PUSH2 0x165D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17FA JUMPI PUSH2 0x17F9 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1808 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1819 DUP6 DUP3 DUP7 ADD PUSH2 0x161E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x183A JUMPI PUSH2 0x1839 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1848 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1859 DUP6 DUP3 DUP7 ADD PUSH2 0x168B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1879 JUMPI PUSH2 0x1878 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1887 DUP5 DUP3 DUP6 ADD PUSH2 0x1633 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18A6 JUMPI PUSH2 0x18A5 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18B4 DUP5 DUP3 DUP6 ADD PUSH2 0x1648 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18D3 JUMPI PUSH2 0x18D2 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18E1 DUP5 DUP3 DUP6 ADD PUSH2 0x168B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x18F3 DUP2 PUSH2 0x1E1B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1902 DUP2 PUSH2 0x1E2D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1913 DUP3 PUSH2 0x1D4E JUMP JUMPDEST PUSH2 0x191D DUP2 DUP6 PUSH2 0x1D64 JUMP JUMPDEST SWAP4 POP PUSH2 0x192D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x1936 DUP2 PUSH2 0x2004 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x194C DUP3 PUSH2 0x1D59 JUMP JUMPDEST PUSH2 0x1956 DUP2 DUP6 PUSH2 0x1D75 JUMP JUMPDEST SWAP4 POP PUSH2 0x1966 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x196F DUP2 PUSH2 0x2004 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1985 DUP3 PUSH2 0x1D59 JUMP JUMPDEST PUSH2 0x198F DUP2 DUP6 PUSH2 0x1D86 JUMP JUMPDEST SWAP4 POP PUSH2 0x199F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E9E JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B8 PUSH1 0x2D DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x19C3 DUP3 PUSH2 0x2015 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19DB PUSH1 0x32 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x19E6 DUP3 PUSH2 0x2064 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19FE PUSH1 0x25 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A09 DUP3 PUSH2 0x20B3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A21 PUSH1 0x24 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A2C DUP3 PUSH2 0x2102 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A44 PUSH1 0x19 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A4F DUP3 PUSH2 0x2151 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A67 PUSH1 0x29 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A72 DUP3 PUSH2 0x217A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A8A PUSH1 0x18 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A95 DUP3 PUSH2 0x21C9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AAD PUSH1 0x21 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AB8 DUP3 PUSH2 0x21F2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AD0 PUSH1 0x3D DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1ADB DUP3 PUSH2 0x2241 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AEF DUP2 PUSH2 0x1E85 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B01 DUP3 DUP6 PUSH2 0x197A JUMP JUMPDEST SWAP2 POP PUSH2 0x1B0D DUP3 DUP5 PUSH2 0x197A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B2E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1B49 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x18EA JUMP JUMPDEST PUSH2 0x1B56 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x18EA JUMP JUMPDEST PUSH2 0x1B63 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1AE6 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1B75 DUP2 DUP5 PUSH2 0x1908 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B95 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BB5 DUP2 DUP5 PUSH2 0x1941 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BD6 DUP2 PUSH2 0x19AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BF6 DUP2 PUSH2 0x19CE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C16 DUP2 PUSH2 0x19F1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C36 DUP2 PUSH2 0x1A14 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C56 DUP2 PUSH2 0x1A37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C76 DUP2 PUSH2 0x1A5A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C96 DUP2 PUSH2 0x1A7D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CB6 DUP2 PUSH2 0x1AA0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CD6 DUP2 PUSH2 0x1AC3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CF2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1AE6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D02 PUSH2 0x1D13 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D0E DUP3 DUP3 PUSH2 0x1F03 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1D38 JUMPI PUSH2 0x1D37 PUSH2 0x1FC1 JUMP JUMPDEST JUMPDEST PUSH2 0x1D41 DUP3 PUSH2 0x2004 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D9C DUP3 PUSH2 0x1E85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DA7 DUP4 PUSH2 0x1E85 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1DDC JUMPI PUSH2 0x1DDB PUSH2 0x1F34 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DF2 DUP3 PUSH2 0x1E85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DFD DUP4 PUSH2 0x1E85 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1E10 JUMPI PUSH2 0x1E0F PUSH2 0x1F34 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E26 DUP3 PUSH2 0x1E65 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1EBC JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1EA1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1ECB JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1EE9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1EFD JUMPI PUSH2 0x1EFC PUSH2 0x1F92 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F0C DUP3 PUSH2 0x2004 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1F2B JUMPI PUSH2 0x1F2A PUSH2 0x1FC1 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x2299 DUP2 PUSH2 0x1E1B JUMP JUMPDEST DUP2 EQ PUSH2 0x22A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x22B0 DUP2 PUSH2 0x1E2D JUMP JUMPDEST DUP2 EQ PUSH2 0x22BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x22C7 DUP2 PUSH2 0x1E39 JUMP JUMPDEST DUP2 EQ PUSH2 0x22D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x22DE DUP2 PUSH2 0x1E85 JUMP JUMPDEST DUP2 EQ PUSH2 0x22E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 0x24 0xED SGT DUP9 RETURNDATASIZE 0xD1 INVALID CALLDATALOAD 0x27 CALLER 0xE0 PUSH4 0x2B340359 0x22 0x27 SSTORE SWAP14 0x26 CALLDATASIZE SLOAD 0xA5 0xDA 0x2C DUP10 BALANCE BALANCE 0xB1 DUP4 PUSH5 0x736F6C6343 STOP ADDMOD MOD STOP CALLER ","sourceMap":"628:16327:1:-:0;;;1390:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1464:5;1456;:13;;;;;;;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;;;;;;;:::i;:::-;;1390:113;;628:16327;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:421:21:-;96:5;121:66;137:49;179:6;137:49;:::i;:::-;121:66;:::i;:::-;112:75;;210:6;203:5;196:21;248:4;241:5;237:16;286:3;277:6;272:3;268:16;265:25;262:2;;;293:79;;:::i;:::-;262:2;383:39;415:6;410:3;405;383:39;:::i;:::-;102:326;;;;;;:::o;448:355::-;515:5;564:3;557:4;549:6;545:17;541:27;531:2;;572:79;;:::i;:::-;531:2;682:6;676:13;707:90;793:3;785:6;778:4;770:6;766:17;707:90;:::i;:::-;698:99;;521:282;;;;;:::o;809:853::-;908:6;916;965:2;953:9;944:7;940:23;936:32;933:2;;;971:79;;:::i;:::-;933:2;1112:1;1101:9;1097:17;1091:24;1142:18;1134:6;1131:30;1128:2;;;1164:79;;:::i;:::-;1128:2;1269:74;1335:7;1326:6;1315:9;1311:22;1269:74;:::i;:::-;1259:84;;1062:291;1413:2;1402:9;1398:18;1392:25;1444:18;1436:6;1433:30;1430:2;;;1466:79;;:::i;:::-;1430:2;1571:74;1637:7;1628:6;1617:9;1613:22;1571:74;:::i;:::-;1561:84;;1363:292;923:739;;;;;:::o;1668:129::-;1702:6;1729:20;;:::i;:::-;1719:30;;1758:33;1786:4;1778:6;1758:33;:::i;:::-;1709:88;;;:::o;1803:75::-;1836:6;1869:2;1863:9;1853:19;;1843:35;:::o;1884:308::-;1946:4;2036:18;2028:6;2025:30;2022:2;;;2058:18;;:::i;:::-;2022:2;2096:29;2118:6;2096:29;:::i;:::-;2088:37;;2180:4;2174;2170:15;2162:23;;1951:241;;;:::o;2198:307::-;2266:1;2276:113;2290:6;2287:1;2284:13;2276:113;;;2375:1;2370:3;2366:11;2360:18;2356:1;2351:3;2347:11;2340:39;2312:2;2309:1;2305:10;2300:15;;2276:113;;;2407:6;2404:1;2401:13;2398:2;;;2487:1;2478:6;2473:3;2469:16;2462:27;2398:2;2247:258;;;;:::o;2511:320::-;2555:6;2592:1;2586:4;2582:12;2572:22;;2639:1;2633:4;2629:12;2660:18;2650:2;;2716:4;2708:6;2704:17;2694:27;;2650:2;2778;2770:6;2767:14;2747:18;2744:38;2741:2;;;2797:18;;:::i;:::-;2741:2;2562:269;;;;:::o;2837:281::-;2920:27;2942:4;2920:27;:::i;:::-;2912:6;2908:40;3050:6;3038:10;3035:22;3014:18;3002:10;2999:34;2996:62;2993:2;;;3061:18;;:::i;:::-;2993:2;3101:10;3097:2;3090:22;2880:238;;;:::o;3124:180::-;3172:77;3169:1;3162:88;3269:4;3266:1;3259:15;3293:4;3290:1;3283:15;3310:180;3358:77;3355:1;3348:88;3455:4;3452:1;3445:15;3479:4;3476:1;3469:15;3496:117;3605:1;3602;3595:12;3619:117;3728:1;3725;3718:12;3742:117;3851:1;3848;3841:12;3865:117;3974:1;3971;3964:12;3988:102;4029:6;4080:2;4076:7;4071:2;4064:5;4060:14;4056:28;4046:38;;4036:54;;;:::o;628:16327:1:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1056":{"entryPoint":4788,"id":1056,"parameterSlots":4,"returnSlots":0},"@_approve_889":{"entryPoint":2576,"id":889,"parameterSlots":2,"returnSlots":0},"@_baseURI_326":{"entryPoint":4190,"id":326,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1043":{"entryPoint":4494,"id":1043,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_997":{"entryPoint":4794,"id":997,"parameterSlots":4,"returnSlots":1},"@_exists_558":{"entryPoint":4429,"id":558,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_592":{"entryPoint":2761,"id":592,"parameterSlots":2,"returnSlots":1},"@_msgSender_1560":{"entryPoint":2568,"id":1560,"parameterSlots":0,"returnSlots":1},"@_ownerOf_540":{"entryPoint":3672,"id":540,"parameterSlots":1,"returnSlots":1},"@_requireMinted_935":{"entryPoint":2493,"id":935,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_527":{"entryPoint":4098,"id":527,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_921":{"entryPoint":3733,"id":921,"parameterSlots":3,"returnSlots":0},"@_transfer_865":{"entryPoint":2910,"id":865,"parameterSlots":3,"returnSlots":0},"@approve_369":{"entryPoint":1142,"id":369,"parameterSlots":2,"returnSlots":0},"@balanceOf_230":{"entryPoint":1685,"id":230,"parameterSlots":1,"returnSlots":1},"@getApproved_387":{"entryPoint":1072,"id":387,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_422":{"entryPoint":2239,"id":422,"parameterSlots":2,"returnSlots":1},"@isContract_1236":{"entryPoint":5540,"id":1236,"parameterSlots":1,"returnSlots":1},"@log10_2483":{"entryPoint":5201,"id":2483,"parameterSlots":1,"returnSlots":1},"@name_268":{"entryPoint":926,"id":268,"parameterSlots":0,"returnSlots":1},"@ownerOf_258":{"entryPoint":1550,"id":258,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_468":{"entryPoint":1518,"id":468,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_498":{"entryPoint":2037,"id":498,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_404":{"entryPoint":2015,"id":404,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1768":{"entryPoint":2387,"id":1768,"parameterSlots":1,"returnSlots":1},"@supportsInterface_206":{"entryPoint":700,"id":206,"parameterSlots":1,"returnSlots":1},"@symbol_278":{"entryPoint":1869,"id":278,"parameterSlots":0,"returnSlots":1},"@toString_1628":{"entryPoint":4213,"id":1628,"parameterSlots":1,"returnSlots":1},"@tokenURI_317":{"entryPoint":2135,"id":317,"parameterSlots":1,"returnSlots":1},"@transferFrom_449":{"entryPoint":1422,"id":449,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":5575,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":5641,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":5662,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":5683,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":5704,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":5725,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":5771,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":5792,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":5837,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":5901,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":5984,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":6115,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":6179,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":6243,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":6288,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":6333,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":6378,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":6393,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":6408,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":6465,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":6522,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":6571,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":6606,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":6641,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":6676,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":6711,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":6746,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":6781,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":6816,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":6851,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":6886,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":6901,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":6937,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":6964,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":7040,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7067,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7101,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7133,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7165,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7197,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7229,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7261,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7293,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7325,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7357,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":7389,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":7416,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":7443,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":7453,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":7502,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":7513,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":7524,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":7541,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7558,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":7569,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":7655,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":7707,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":7725,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":7737,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":7781,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":7813,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":7823,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":7838,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":7889,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":7939,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x11":{"entryPoint":7988,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":8035,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":8082,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":8129,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":8176,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":8181,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":8186,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":8191,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":8196,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":8213,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":8292,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":8371,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":8450,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":8529,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":8570,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":8649,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":8690,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":8769,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":8848,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":8871,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":8894,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":8917,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:23861:21","statements":[{"body":{"nodeType":"YulBlock","src":"90:327:21","statements":[{"nodeType":"YulAssignment","src":"100:74:21","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"166:6:21"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"125:40:21"},"nodeType":"YulFunctionCall","src":"125:48:21"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"109:15:21"},"nodeType":"YulFunctionCall","src":"109:65:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"100:5:21"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"190:5:21"},{"name":"length","nodeType":"YulIdentifier","src":"197:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"183:6:21"},"nodeType":"YulFunctionCall","src":"183:21:21"},"nodeType":"YulExpressionStatement","src":"183:21:21"},{"nodeType":"YulVariableDeclaration","src":"213:27:21","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"228:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"235:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"224:3:21"},"nodeType":"YulFunctionCall","src":"224:16:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"217:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"278:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"280:77:21"},"nodeType":"YulFunctionCall","src":"280:79:21"},"nodeType":"YulExpressionStatement","src":"280:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"259:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"264:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"255:3:21"},"nodeType":"YulFunctionCall","src":"255:16:21"},{"name":"end","nodeType":"YulIdentifier","src":"273:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"252:2:21"},"nodeType":"YulFunctionCall","src":"252:25:21"},"nodeType":"YulIf","src":"249:2:21"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"394:3:21"},{"name":"dst","nodeType":"YulIdentifier","src":"399:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"404:6:21"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"370:23:21"},"nodeType":"YulFunctionCall","src":"370:41:21"},"nodeType":"YulExpressionStatement","src":"370:41:21"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"63:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"68:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"76:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"84:5:21","type":""}],"src":"7:410:21"},{"body":{"nodeType":"YulBlock","src":"475:87:21","statements":[{"nodeType":"YulAssignment","src":"485:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"507:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"494:12:21"},"nodeType":"YulFunctionCall","src":"494:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"485:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:21"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"523:26:21"},"nodeType":"YulFunctionCall","src":"523:33:21"},"nodeType":"YulExpressionStatement","src":"523:33:21"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"453:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"461:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"469:5:21","type":""}],"src":"423:139:21"},{"body":{"nodeType":"YulBlock","src":"617:84:21","statements":[{"nodeType":"YulAssignment","src":"627:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"649:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"636:12:21"},"nodeType":"YulFunctionCall","src":"636:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"627:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"689:5:21"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"665:23:21"},"nodeType":"YulFunctionCall","src":"665:30:21"},"nodeType":"YulExpressionStatement","src":"665:30:21"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"595:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"603:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"611:5:21","type":""}],"src":"568:133:21"},{"body":{"nodeType":"YulBlock","src":"758:86:21","statements":[{"nodeType":"YulAssignment","src":"768:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"790:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"777:12:21"},"nodeType":"YulFunctionCall","src":"777:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"768:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"832:5:21"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"806:25:21"},"nodeType":"YulFunctionCall","src":"806:32:21"},"nodeType":"YulExpressionStatement","src":"806:32:21"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"736:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"744:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"752:5:21","type":""}],"src":"707:137:21"},{"body":{"nodeType":"YulBlock","src":"912:79:21","statements":[{"nodeType":"YulAssignment","src":"922:22:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"937:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"931:5:21"},"nodeType":"YulFunctionCall","src":"931:13:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"922:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"979:5:21"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"953:25:21"},"nodeType":"YulFunctionCall","src":"953:32:21"},"nodeType":"YulExpressionStatement","src":"953:32:21"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"890:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"898:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"906:5:21","type":""}],"src":"850:141:21"},{"body":{"nodeType":"YulBlock","src":"1071:277:21","statements":[{"body":{"nodeType":"YulBlock","src":"1120:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"1122:77:21"},"nodeType":"YulFunctionCall","src":"1122:79:21"},"nodeType":"YulExpressionStatement","src":"1122:79:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1099:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1107:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1095:3:21"},"nodeType":"YulFunctionCall","src":"1095:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"1114:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1091:3:21"},"nodeType":"YulFunctionCall","src":"1091:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1084:6:21"},"nodeType":"YulFunctionCall","src":"1084:35:21"},"nodeType":"YulIf","src":"1081:2:21"},{"nodeType":"YulVariableDeclaration","src":"1212:34:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1239:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1226:12:21"},"nodeType":"YulFunctionCall","src":"1226:20:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1216:6:21","type":""}]},{"nodeType":"YulAssignment","src":"1255:87:21","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1315:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1323:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1311:3:21"},"nodeType":"YulFunctionCall","src":"1311:17:21"},{"name":"length","nodeType":"YulIdentifier","src":"1330:6:21"},{"name":"end","nodeType":"YulIdentifier","src":"1338:3:21"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"1264:46:21"},"nodeType":"YulFunctionCall","src":"1264:78:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1255:5:21"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1049:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"1057:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1065:5:21","type":""}],"src":"1010:338:21"},{"body":{"nodeType":"YulBlock","src":"1406:87:21","statements":[{"nodeType":"YulAssignment","src":"1416:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1438:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1425:12:21"},"nodeType":"YulFunctionCall","src":"1425:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1416:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1481:5:21"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1454:26:21"},"nodeType":"YulFunctionCall","src":"1454:33:21"},"nodeType":"YulExpressionStatement","src":"1454:33:21"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1384:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"1392:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1400:5:21","type":""}],"src":"1354:139:21"},{"body":{"nodeType":"YulBlock","src":"1565:263:21","statements":[{"body":{"nodeType":"YulBlock","src":"1611:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1613:77:21"},"nodeType":"YulFunctionCall","src":"1613:79:21"},"nodeType":"YulExpressionStatement","src":"1613:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1586:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1595:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1582:3:21"},"nodeType":"YulFunctionCall","src":"1582:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1607:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1578:3:21"},"nodeType":"YulFunctionCall","src":"1578:32:21"},"nodeType":"YulIf","src":"1575:2:21"},{"nodeType":"YulBlock","src":"1704:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"1719:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"1733:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1723:6:21","type":""}]},{"nodeType":"YulAssignment","src":"1748:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1783:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"1794:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1779:3:21"},"nodeType":"YulFunctionCall","src":"1779:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1803:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1758:20:21"},"nodeType":"YulFunctionCall","src":"1758:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1748:6:21"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1535:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1546:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1558:6:21","type":""}],"src":"1499:329:21"},{"body":{"nodeType":"YulBlock","src":"1917:391:21","statements":[{"body":{"nodeType":"YulBlock","src":"1963:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1965:77:21"},"nodeType":"YulFunctionCall","src":"1965:79:21"},"nodeType":"YulExpressionStatement","src":"1965:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1938:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1947:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1934:3:21"},"nodeType":"YulFunctionCall","src":"1934:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1959:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1930:3:21"},"nodeType":"YulFunctionCall","src":"1930:32:21"},"nodeType":"YulIf","src":"1927:2:21"},{"nodeType":"YulBlock","src":"2056:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2071:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"2085:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2075:6:21","type":""}]},{"nodeType":"YulAssignment","src":"2100:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2135:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"2146:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2131:3:21"},"nodeType":"YulFunctionCall","src":"2131:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2155:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2110:20:21"},"nodeType":"YulFunctionCall","src":"2110:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2100:6:21"}]}]},{"nodeType":"YulBlock","src":"2183:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2198:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"2212:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2202:6:21","type":""}]},{"nodeType":"YulAssignment","src":"2228:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2263:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"2274:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2259:3:21"},"nodeType":"YulFunctionCall","src":"2259:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2283:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2238:20:21"},"nodeType":"YulFunctionCall","src":"2238:53:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2228:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1879:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1890:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1902:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1910:6:21","type":""}],"src":"1834:474:21"},{"body":{"nodeType":"YulBlock","src":"2414:519:21","statements":[{"body":{"nodeType":"YulBlock","src":"2460:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2462:77:21"},"nodeType":"YulFunctionCall","src":"2462:79:21"},"nodeType":"YulExpressionStatement","src":"2462:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2435:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2444:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2431:3:21"},"nodeType":"YulFunctionCall","src":"2431:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2456:2:21","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2427:3:21"},"nodeType":"YulFunctionCall","src":"2427:32:21"},"nodeType":"YulIf","src":"2424:2:21"},{"nodeType":"YulBlock","src":"2553:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2568:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"2582:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2572:6:21","type":""}]},{"nodeType":"YulAssignment","src":"2597:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2632:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"2643:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2628:3:21"},"nodeType":"YulFunctionCall","src":"2628:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2652:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2607:20:21"},"nodeType":"YulFunctionCall","src":"2607:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2597:6:21"}]}]},{"nodeType":"YulBlock","src":"2680:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2695:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"2709:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2699:6:21","type":""}]},{"nodeType":"YulAssignment","src":"2725:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2760:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"2771:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2756:3:21"},"nodeType":"YulFunctionCall","src":"2756:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2780:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2735:20:21"},"nodeType":"YulFunctionCall","src":"2735:53:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2725:6:21"}]}]},{"nodeType":"YulBlock","src":"2808:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2823:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"2837:2:21","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2827:6:21","type":""}]},{"nodeType":"YulAssignment","src":"2853:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2888:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"2899:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2884:3:21"},"nodeType":"YulFunctionCall","src":"2884:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2908:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2863:20:21"},"nodeType":"YulFunctionCall","src":"2863:53:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2853:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2368:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2379:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2391:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2399:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2407:6:21","type":""}],"src":"2314:619:21"},{"body":{"nodeType":"YulBlock","src":"3065:817:21","statements":[{"body":{"nodeType":"YulBlock","src":"3112:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3114:77:21"},"nodeType":"YulFunctionCall","src":"3114:79:21"},"nodeType":"YulExpressionStatement","src":"3114:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3086:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"3095:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3082:3:21"},"nodeType":"YulFunctionCall","src":"3082:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"3107:3:21","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3078:3:21"},"nodeType":"YulFunctionCall","src":"3078:33:21"},"nodeType":"YulIf","src":"3075:2:21"},{"nodeType":"YulBlock","src":"3205:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3220:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3234:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3224:6:21","type":""}]},{"nodeType":"YulAssignment","src":"3249:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3284:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"3295:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3280:3:21"},"nodeType":"YulFunctionCall","src":"3280:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3304:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3259:20:21"},"nodeType":"YulFunctionCall","src":"3259:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3249:6:21"}]}]},{"nodeType":"YulBlock","src":"3332:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3347:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3361:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3351:6:21","type":""}]},{"nodeType":"YulAssignment","src":"3377:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3412:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"3423:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3408:3:21"},"nodeType":"YulFunctionCall","src":"3408:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3432:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3387:20:21"},"nodeType":"YulFunctionCall","src":"3387:53:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3377:6:21"}]}]},{"nodeType":"YulBlock","src":"3460:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3475:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3489:2:21","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3479:6:21","type":""}]},{"nodeType":"YulAssignment","src":"3505:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3540:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"3551:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3536:3:21"},"nodeType":"YulFunctionCall","src":"3536:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3560:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3515:20:21"},"nodeType":"YulFunctionCall","src":"3515:53:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3505:6:21"}]}]},{"nodeType":"YulBlock","src":"3588:287:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3603:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3634:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3645:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3630:3:21"},"nodeType":"YulFunctionCall","src":"3630:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3617:12:21"},"nodeType":"YulFunctionCall","src":"3617:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3607:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3696:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3698:77:21"},"nodeType":"YulFunctionCall","src":"3698:79:21"},"nodeType":"YulExpressionStatement","src":"3698:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3668:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3676:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3665:2:21"},"nodeType":"YulFunctionCall","src":"3665:30:21"},"nodeType":"YulIf","src":"3662:2:21"},{"nodeType":"YulAssignment","src":"3793:72:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3837:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"3848:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3833:3:21"},"nodeType":"YulFunctionCall","src":"3833:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3857:7:21"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"3803:29:21"},"nodeType":"YulFunctionCall","src":"3803:62:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3793:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3011:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3022:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3034:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3042:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3050:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3058:6:21","type":""}],"src":"2939:943:21"},{"body":{"nodeType":"YulBlock","src":"3968:388:21","statements":[{"body":{"nodeType":"YulBlock","src":"4014:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4016:77:21"},"nodeType":"YulFunctionCall","src":"4016:79:21"},"nodeType":"YulExpressionStatement","src":"4016:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3989:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"3998:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3985:3:21"},"nodeType":"YulFunctionCall","src":"3985:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"4010:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3981:3:21"},"nodeType":"YulFunctionCall","src":"3981:32:21"},"nodeType":"YulIf","src":"3978:2:21"},{"nodeType":"YulBlock","src":"4107:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"4122:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"4136:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4126:6:21","type":""}]},{"nodeType":"YulAssignment","src":"4151:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4186:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4197:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4182:3:21"},"nodeType":"YulFunctionCall","src":"4182:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4206:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4161:20:21"},"nodeType":"YulFunctionCall","src":"4161:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4151:6:21"}]}]},{"nodeType":"YulBlock","src":"4234:115:21","statements":[{"nodeType":"YulVariableDeclaration","src":"4249:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"4263:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4253:6:21","type":""}]},{"nodeType":"YulAssignment","src":"4279:60:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4311:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4322:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4307:3:21"},"nodeType":"YulFunctionCall","src":"4307:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4331:7:21"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"4289:17:21"},"nodeType":"YulFunctionCall","src":"4289:50:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4279:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3930:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3941:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3953:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3961:6:21","type":""}],"src":"3888:468:21"},{"body":{"nodeType":"YulBlock","src":"4445:391:21","statements":[{"body":{"nodeType":"YulBlock","src":"4491:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4493:77:21"},"nodeType":"YulFunctionCall","src":"4493:79:21"},"nodeType":"YulExpressionStatement","src":"4493:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4466:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"4475:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4462:3:21"},"nodeType":"YulFunctionCall","src":"4462:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"4487:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4458:3:21"},"nodeType":"YulFunctionCall","src":"4458:32:21"},"nodeType":"YulIf","src":"4455:2:21"},{"nodeType":"YulBlock","src":"4584:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"4599:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"4613:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4603:6:21","type":""}]},{"nodeType":"YulAssignment","src":"4628:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4663:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4674:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4659:3:21"},"nodeType":"YulFunctionCall","src":"4659:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4683:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4638:20:21"},"nodeType":"YulFunctionCall","src":"4638:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4628:6:21"}]}]},{"nodeType":"YulBlock","src":"4711:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"4726:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"4740:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4730:6:21","type":""}]},{"nodeType":"YulAssignment","src":"4756:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4791:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4802:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4787:3:21"},"nodeType":"YulFunctionCall","src":"4787:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4811:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4766:20:21"},"nodeType":"YulFunctionCall","src":"4766:53:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4756:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4407:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4418:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4430:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4438:6:21","type":""}],"src":"4362:474:21"},{"body":{"nodeType":"YulBlock","src":"4907:262:21","statements":[{"body":{"nodeType":"YulBlock","src":"4953:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4955:77:21"},"nodeType":"YulFunctionCall","src":"4955:79:21"},"nodeType":"YulExpressionStatement","src":"4955:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4928:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"4937:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4924:3:21"},"nodeType":"YulFunctionCall","src":"4924:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"4949:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4920:3:21"},"nodeType":"YulFunctionCall","src":"4920:32:21"},"nodeType":"YulIf","src":"4917:2:21"},{"nodeType":"YulBlock","src":"5046:116:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5061:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"5075:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5065:6:21","type":""}]},{"nodeType":"YulAssignment","src":"5090:62:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5124:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"5135:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5120:3:21"},"nodeType":"YulFunctionCall","src":"5120:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5144:7:21"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"5100:19:21"},"nodeType":"YulFunctionCall","src":"5100:52:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5090:6:21"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4877:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4888:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4900:6:21","type":""}],"src":"4842:327:21"},{"body":{"nodeType":"YulBlock","src":"5251:273:21","statements":[{"body":{"nodeType":"YulBlock","src":"5297:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5299:77:21"},"nodeType":"YulFunctionCall","src":"5299:79:21"},"nodeType":"YulExpressionStatement","src":"5299:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5272:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"5281:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5268:3:21"},"nodeType":"YulFunctionCall","src":"5268:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"5293:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5264:3:21"},"nodeType":"YulFunctionCall","src":"5264:32:21"},"nodeType":"YulIf","src":"5261:2:21"},{"nodeType":"YulBlock","src":"5390:127:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5405:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"5419:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5409:6:21","type":""}]},{"nodeType":"YulAssignment","src":"5434:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5479:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"5490:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5475:3:21"},"nodeType":"YulFunctionCall","src":"5475:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5499:7:21"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"5444:30:21"},"nodeType":"YulFunctionCall","src":"5444:63:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5434:6:21"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5221:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5232:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5244:6:21","type":""}],"src":"5175:349:21"},{"body":{"nodeType":"YulBlock","src":"5596:263:21","statements":[{"body":{"nodeType":"YulBlock","src":"5642:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5644:77:21"},"nodeType":"YulFunctionCall","src":"5644:79:21"},"nodeType":"YulExpressionStatement","src":"5644:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5617:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"5626:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5613:3:21"},"nodeType":"YulFunctionCall","src":"5613:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"5638:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5609:3:21"},"nodeType":"YulFunctionCall","src":"5609:32:21"},"nodeType":"YulIf","src":"5606:2:21"},{"nodeType":"YulBlock","src":"5735:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5750:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"5764:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5754:6:21","type":""}]},{"nodeType":"YulAssignment","src":"5779:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5814:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"5825:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5810:3:21"},"nodeType":"YulFunctionCall","src":"5810:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5834:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5789:20:21"},"nodeType":"YulFunctionCall","src":"5789:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5779:6:21"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5566:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5577:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5589:6:21","type":""}],"src":"5530:329:21"},{"body":{"nodeType":"YulBlock","src":"5930:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5947:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5970:5:21"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5952:17:21"},"nodeType":"YulFunctionCall","src":"5952:24:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5940:6:21"},"nodeType":"YulFunctionCall","src":"5940:37:21"},"nodeType":"YulExpressionStatement","src":"5940:37:21"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5918:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5925:3:21","type":""}],"src":"5865:118:21"},{"body":{"nodeType":"YulBlock","src":"6048:50:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6065:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6085:5:21"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"6070:14:21"},"nodeType":"YulFunctionCall","src":"6070:21:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6058:6:21"},"nodeType":"YulFunctionCall","src":"6058:34:21"},"nodeType":"YulExpressionStatement","src":"6058:34:21"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6036:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6043:3:21","type":""}],"src":"5989:109:21"},{"body":{"nodeType":"YulBlock","src":"6194:270:21","statements":[{"nodeType":"YulVariableDeclaration","src":"6204:52:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6250:5:21"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"6218:31:21"},"nodeType":"YulFunctionCall","src":"6218:38:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6208:6:21","type":""}]},{"nodeType":"YulAssignment","src":"6265:77:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6330:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"6335:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6272:57:21"},"nodeType":"YulFunctionCall","src":"6272:70:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6265:3:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6377:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"6384:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6373:3:21"},"nodeType":"YulFunctionCall","src":"6373:16:21"},{"name":"pos","nodeType":"YulIdentifier","src":"6391:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"6396:6:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"6351:21:21"},"nodeType":"YulFunctionCall","src":"6351:52:21"},"nodeType":"YulExpressionStatement","src":"6351:52:21"},{"nodeType":"YulAssignment","src":"6412:46:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6423:3:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6450:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"6428:21:21"},"nodeType":"YulFunctionCall","src":"6428:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6419:3:21"},"nodeType":"YulFunctionCall","src":"6419:39:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6412:3:21"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6175:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6182:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6190:3:21","type":""}],"src":"6104:360:21"},{"body":{"nodeType":"YulBlock","src":"6562:272:21","statements":[{"nodeType":"YulVariableDeclaration","src":"6572:53:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6619:5:21"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"6586:32:21"},"nodeType":"YulFunctionCall","src":"6586:39:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6576:6:21","type":""}]},{"nodeType":"YulAssignment","src":"6634:78:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6700:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"6705:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6641:58:21"},"nodeType":"YulFunctionCall","src":"6641:71:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6634:3:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6747:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"6754:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6743:3:21"},"nodeType":"YulFunctionCall","src":"6743:16:21"},{"name":"pos","nodeType":"YulIdentifier","src":"6761:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"6766:6:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"6721:21:21"},"nodeType":"YulFunctionCall","src":"6721:52:21"},"nodeType":"YulExpressionStatement","src":"6721:52:21"},{"nodeType":"YulAssignment","src":"6782:46:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6793:3:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6820:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"6798:21:21"},"nodeType":"YulFunctionCall","src":"6798:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6789:3:21"},"nodeType":"YulFunctionCall","src":"6789:39:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6782:3:21"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6543:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6550:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6558:3:21","type":""}],"src":"6470:364:21"},{"body":{"nodeType":"YulBlock","src":"6950:267:21","statements":[{"nodeType":"YulVariableDeclaration","src":"6960:53:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7007:5:21"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"6974:32:21"},"nodeType":"YulFunctionCall","src":"6974:39:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6964:6:21","type":""}]},{"nodeType":"YulAssignment","src":"7022:96:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7106:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"7111:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"7029:76:21"},"nodeType":"YulFunctionCall","src":"7029:89:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7022:3:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7153:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"7160:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7149:3:21"},"nodeType":"YulFunctionCall","src":"7149:16:21"},{"name":"pos","nodeType":"YulIdentifier","src":"7167:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"7172:6:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"7127:21:21"},"nodeType":"YulFunctionCall","src":"7127:52:21"},"nodeType":"YulExpressionStatement","src":"7127:52:21"},{"nodeType":"YulAssignment","src":"7188:23:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7199:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"7204:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7195:3:21"},"nodeType":"YulFunctionCall","src":"7195:16:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7188:3:21"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6931:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6938:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6946:3:21","type":""}],"src":"6840:377:21"},{"body":{"nodeType":"YulBlock","src":"7369:220:21","statements":[{"nodeType":"YulAssignment","src":"7379:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7445:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"7450:2:21","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7386:58:21"},"nodeType":"YulFunctionCall","src":"7386:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7379:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7551:3:21"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"7462:88:21"},"nodeType":"YulFunctionCall","src":"7462:93:21"},"nodeType":"YulExpressionStatement","src":"7462:93:21"},{"nodeType":"YulAssignment","src":"7564:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7575:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"7580:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7571:3:21"},"nodeType":"YulFunctionCall","src":"7571:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7564:3:21"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7357:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7365:3:21","type":""}],"src":"7223:366:21"},{"body":{"nodeType":"YulBlock","src":"7741:220:21","statements":[{"nodeType":"YulAssignment","src":"7751:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7817:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"7822:2:21","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7758:58:21"},"nodeType":"YulFunctionCall","src":"7758:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7751:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7923:3:21"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"7834:88:21"},"nodeType":"YulFunctionCall","src":"7834:93:21"},"nodeType":"YulExpressionStatement","src":"7834:93:21"},{"nodeType":"YulAssignment","src":"7936:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7947:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"7952:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7943:3:21"},"nodeType":"YulFunctionCall","src":"7943:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7936:3:21"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7729:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7737:3:21","type":""}],"src":"7595:366:21"},{"body":{"nodeType":"YulBlock","src":"8113:220:21","statements":[{"nodeType":"YulAssignment","src":"8123:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8189:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"8194:2:21","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8130:58:21"},"nodeType":"YulFunctionCall","src":"8130:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8123:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8295:3:21"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"8206:88:21"},"nodeType":"YulFunctionCall","src":"8206:93:21"},"nodeType":"YulExpressionStatement","src":"8206:93:21"},{"nodeType":"YulAssignment","src":"8308:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8319:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"8324:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8315:3:21"},"nodeType":"YulFunctionCall","src":"8315:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8308:3:21"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8101:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8109:3:21","type":""}],"src":"7967:366:21"},{"body":{"nodeType":"YulBlock","src":"8485:220:21","statements":[{"nodeType":"YulAssignment","src":"8495:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8561:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"8566:2:21","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8502:58:21"},"nodeType":"YulFunctionCall","src":"8502:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8495:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8667:3:21"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"8578:88:21"},"nodeType":"YulFunctionCall","src":"8578:93:21"},"nodeType":"YulExpressionStatement","src":"8578:93:21"},{"nodeType":"YulAssignment","src":"8680:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8691:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"8696:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8687:3:21"},"nodeType":"YulFunctionCall","src":"8687:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8680:3:21"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8473:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8481:3:21","type":""}],"src":"8339:366:21"},{"body":{"nodeType":"YulBlock","src":"8857:220:21","statements":[{"nodeType":"YulAssignment","src":"8867:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8933:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"8938:2:21","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8874:58:21"},"nodeType":"YulFunctionCall","src":"8874:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8867:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9039:3:21"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"8950:88:21"},"nodeType":"YulFunctionCall","src":"8950:93:21"},"nodeType":"YulExpressionStatement","src":"8950:93:21"},{"nodeType":"YulAssignment","src":"9052:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9063:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"9068:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9059:3:21"},"nodeType":"YulFunctionCall","src":"9059:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9052:3:21"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8845:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8853:3:21","type":""}],"src":"8711:366:21"},{"body":{"nodeType":"YulBlock","src":"9229:220:21","statements":[{"nodeType":"YulAssignment","src":"9239:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9305:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"9310:2:21","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9246:58:21"},"nodeType":"YulFunctionCall","src":"9246:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9239:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9411:3:21"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"9322:88:21"},"nodeType":"YulFunctionCall","src":"9322:93:21"},"nodeType":"YulExpressionStatement","src":"9322:93:21"},{"nodeType":"YulAssignment","src":"9424:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9435:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"9440:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9431:3:21"},"nodeType":"YulFunctionCall","src":"9431:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9424:3:21"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9217:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9225:3:21","type":""}],"src":"9083:366:21"},{"body":{"nodeType":"YulBlock","src":"9601:220:21","statements":[{"nodeType":"YulAssignment","src":"9611:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9677:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"9682:2:21","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9618:58:21"},"nodeType":"YulFunctionCall","src":"9618:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9611:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9783:3:21"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"9694:88:21"},"nodeType":"YulFunctionCall","src":"9694:93:21"},"nodeType":"YulExpressionStatement","src":"9694:93:21"},{"nodeType":"YulAssignment","src":"9796:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9807:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"9812:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9803:3:21"},"nodeType":"YulFunctionCall","src":"9803:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9796:3:21"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9589:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9597:3:21","type":""}],"src":"9455:366:21"},{"body":{"nodeType":"YulBlock","src":"9973:220:21","statements":[{"nodeType":"YulAssignment","src":"9983:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10049:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"10054:2:21","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9990:58:21"},"nodeType":"YulFunctionCall","src":"9990:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9983:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10155:3:21"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"10066:88:21"},"nodeType":"YulFunctionCall","src":"10066:93:21"},"nodeType":"YulExpressionStatement","src":"10066:93:21"},{"nodeType":"YulAssignment","src":"10168:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10179:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"10184:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10175:3:21"},"nodeType":"YulFunctionCall","src":"10175:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10168:3:21"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9961:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9969:3:21","type":""}],"src":"9827:366:21"},{"body":{"nodeType":"YulBlock","src":"10345:220:21","statements":[{"nodeType":"YulAssignment","src":"10355:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10421:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"10426:2:21","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10362:58:21"},"nodeType":"YulFunctionCall","src":"10362:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10355:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10527:3:21"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"10438:88:21"},"nodeType":"YulFunctionCall","src":"10438:93:21"},"nodeType":"YulExpressionStatement","src":"10438:93:21"},{"nodeType":"YulAssignment","src":"10540:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10551:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"10556:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10547:3:21"},"nodeType":"YulFunctionCall","src":"10547:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10540:3:21"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10333:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10341:3:21","type":""}],"src":"10199:366:21"},{"body":{"nodeType":"YulBlock","src":"10636:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10653:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10676:5:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10658:17:21"},"nodeType":"YulFunctionCall","src":"10658:24:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10646:6:21"},"nodeType":"YulFunctionCall","src":"10646:37:21"},"nodeType":"YulExpressionStatement","src":"10646:37:21"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10624:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10631:3:21","type":""}],"src":"10571:118:21"},{"body":{"nodeType":"YulBlock","src":"10879:251:21","statements":[{"nodeType":"YulAssignment","src":"10890:102:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10979:6:21"},{"name":"pos","nodeType":"YulIdentifier","src":"10988:3:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"10897:81:21"},"nodeType":"YulFunctionCall","src":"10897:95:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10890:3:21"}]},{"nodeType":"YulAssignment","src":"11002:102:21","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11091:6:21"},{"name":"pos","nodeType":"YulIdentifier","src":"11100:3:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"11009:81:21"},"nodeType":"YulFunctionCall","src":"11009:95:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11002:3:21"}]},{"nodeType":"YulAssignment","src":"11114:10:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"11121:3:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11114:3:21"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10850:3:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10856:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10864:6:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10875:3:21","type":""}],"src":"10695:435:21"},{"body":{"nodeType":"YulBlock","src":"11234:124:21","statements":[{"nodeType":"YulAssignment","src":"11244:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11256:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11267:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11252:3:21"},"nodeType":"YulFunctionCall","src":"11252:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11244:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11324:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11337:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11348:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11333:3:21"},"nodeType":"YulFunctionCall","src":"11333:17:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11280:43:21"},"nodeType":"YulFunctionCall","src":"11280:71:21"},"nodeType":"YulExpressionStatement","src":"11280:71:21"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11206:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11218:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11229:4:21","type":""}],"src":"11136:222:21"},{"body":{"nodeType":"YulBlock","src":"11564:440:21","statements":[{"nodeType":"YulAssignment","src":"11574:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11586:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11597:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11582:3:21"},"nodeType":"YulFunctionCall","src":"11582:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11574:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11655:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11668:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11679:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11664:3:21"},"nodeType":"YulFunctionCall","src":"11664:17:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11611:43:21"},"nodeType":"YulFunctionCall","src":"11611:71:21"},"nodeType":"YulExpressionStatement","src":"11611:71:21"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11736:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11749:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11760:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11745:3:21"},"nodeType":"YulFunctionCall","src":"11745:18:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11692:43:21"},"nodeType":"YulFunctionCall","src":"11692:72:21"},"nodeType":"YulExpressionStatement","src":"11692:72:21"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"11818:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11831:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11842:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11827:3:21"},"nodeType":"YulFunctionCall","src":"11827:18:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"11774:43:21"},"nodeType":"YulFunctionCall","src":"11774:72:21"},"nodeType":"YulExpressionStatement","src":"11774:72:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11867:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11878:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11863:3:21"},"nodeType":"YulFunctionCall","src":"11863:18:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11887:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"11893:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11883:3:21"},"nodeType":"YulFunctionCall","src":"11883:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11856:6:21"},"nodeType":"YulFunctionCall","src":"11856:48:21"},"nodeType":"YulExpressionStatement","src":"11856:48:21"},{"nodeType":"YulAssignment","src":"11913:84:21","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"11983:6:21"},{"name":"tail","nodeType":"YulIdentifier","src":"11992:4:21"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11921:61:21"},"nodeType":"YulFunctionCall","src":"11921:76:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11913:4:21"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11512:9:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11524:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11532:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11540:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11548:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11559:4:21","type":""}],"src":"11364:640:21"},{"body":{"nodeType":"YulBlock","src":"12102:118:21","statements":[{"nodeType":"YulAssignment","src":"12112:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12124:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12135:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12120:3:21"},"nodeType":"YulFunctionCall","src":"12120:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12112:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12186:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12199:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12210:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12195:3:21"},"nodeType":"YulFunctionCall","src":"12195:17:21"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"12148:37:21"},"nodeType":"YulFunctionCall","src":"12148:65:21"},"nodeType":"YulExpressionStatement","src":"12148:65:21"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12074:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12086:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12097:4:21","type":""}],"src":"12010:210:21"},{"body":{"nodeType":"YulBlock","src":"12344:195:21","statements":[{"nodeType":"YulAssignment","src":"12354:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12366:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12377:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12362:3:21"},"nodeType":"YulFunctionCall","src":"12362:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12354:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12401:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12412:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12397:3:21"},"nodeType":"YulFunctionCall","src":"12397:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12420:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"12426:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12416:3:21"},"nodeType":"YulFunctionCall","src":"12416:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12390:6:21"},"nodeType":"YulFunctionCall","src":"12390:47:21"},"nodeType":"YulExpressionStatement","src":"12390:47:21"},{"nodeType":"YulAssignment","src":"12446:86:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12518:6:21"},{"name":"tail","nodeType":"YulIdentifier","src":"12527:4:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12454:63:21"},"nodeType":"YulFunctionCall","src":"12454:78:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12446:4:21"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12316:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12328:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12339:4:21","type":""}],"src":"12226:313:21"},{"body":{"nodeType":"YulBlock","src":"12716:248:21","statements":[{"nodeType":"YulAssignment","src":"12726:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12738:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12749:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12734:3:21"},"nodeType":"YulFunctionCall","src":"12734:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12726:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12773:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12784:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12769:3:21"},"nodeType":"YulFunctionCall","src":"12769:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12792:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"12798:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12788:3:21"},"nodeType":"YulFunctionCall","src":"12788:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12762:6:21"},"nodeType":"YulFunctionCall","src":"12762:47:21"},"nodeType":"YulExpressionStatement","src":"12762:47:21"},{"nodeType":"YulAssignment","src":"12818:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12952:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12826:124:21"},"nodeType":"YulFunctionCall","src":"12826:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12818:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12696:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12711:4:21","type":""}],"src":"12545:419:21"},{"body":{"nodeType":"YulBlock","src":"13141:248:21","statements":[{"nodeType":"YulAssignment","src":"13151:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13163:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13174:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13159:3:21"},"nodeType":"YulFunctionCall","src":"13159:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13151:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13198:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13209:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13194:3:21"},"nodeType":"YulFunctionCall","src":"13194:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13217:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"13223:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13213:3:21"},"nodeType":"YulFunctionCall","src":"13213:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13187:6:21"},"nodeType":"YulFunctionCall","src":"13187:47:21"},"nodeType":"YulExpressionStatement","src":"13187:47:21"},{"nodeType":"YulAssignment","src":"13243:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13377:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13251:124:21"},"nodeType":"YulFunctionCall","src":"13251:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13243:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13121:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13136:4:21","type":""}],"src":"12970:419:21"},{"body":{"nodeType":"YulBlock","src":"13566:248:21","statements":[{"nodeType":"YulAssignment","src":"13576:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13588:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13599:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13584:3:21"},"nodeType":"YulFunctionCall","src":"13584:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13576:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13623:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13634:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13619:3:21"},"nodeType":"YulFunctionCall","src":"13619:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13642:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"13648:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13638:3:21"},"nodeType":"YulFunctionCall","src":"13638:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13612:6:21"},"nodeType":"YulFunctionCall","src":"13612:47:21"},"nodeType":"YulExpressionStatement","src":"13612:47:21"},{"nodeType":"YulAssignment","src":"13668:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13802:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13676:124:21"},"nodeType":"YulFunctionCall","src":"13676:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13668:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13546:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13561:4:21","type":""}],"src":"13395:419:21"},{"body":{"nodeType":"YulBlock","src":"13991:248:21","statements":[{"nodeType":"YulAssignment","src":"14001:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14013:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14024:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14009:3:21"},"nodeType":"YulFunctionCall","src":"14009:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14001:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14048:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14059:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14044:3:21"},"nodeType":"YulFunctionCall","src":"14044:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14067:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"14073:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14063:3:21"},"nodeType":"YulFunctionCall","src":"14063:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14037:6:21"},"nodeType":"YulFunctionCall","src":"14037:47:21"},"nodeType":"YulExpressionStatement","src":"14037:47:21"},{"nodeType":"YulAssignment","src":"14093:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14227:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14101:124:21"},"nodeType":"YulFunctionCall","src":"14101:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14093:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13971:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13986:4:21","type":""}],"src":"13820:419:21"},{"body":{"nodeType":"YulBlock","src":"14416:248:21","statements":[{"nodeType":"YulAssignment","src":"14426:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14438:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14449:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14434:3:21"},"nodeType":"YulFunctionCall","src":"14434:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14426:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14473:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14484:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14469:3:21"},"nodeType":"YulFunctionCall","src":"14469:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14492:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"14498:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14488:3:21"},"nodeType":"YulFunctionCall","src":"14488:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14462:6:21"},"nodeType":"YulFunctionCall","src":"14462:47:21"},"nodeType":"YulExpressionStatement","src":"14462:47:21"},{"nodeType":"YulAssignment","src":"14518:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14652:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14526:124:21"},"nodeType":"YulFunctionCall","src":"14526:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14518:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14396:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14411:4:21","type":""}],"src":"14245:419:21"},{"body":{"nodeType":"YulBlock","src":"14841:248:21","statements":[{"nodeType":"YulAssignment","src":"14851:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14863:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14874:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14859:3:21"},"nodeType":"YulFunctionCall","src":"14859:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14851:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14898:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14909:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14894:3:21"},"nodeType":"YulFunctionCall","src":"14894:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14917:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"14923:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14913:3:21"},"nodeType":"YulFunctionCall","src":"14913:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14887:6:21"},"nodeType":"YulFunctionCall","src":"14887:47:21"},"nodeType":"YulExpressionStatement","src":"14887:47:21"},{"nodeType":"YulAssignment","src":"14943:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15077:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14951:124:21"},"nodeType":"YulFunctionCall","src":"14951:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14943:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14821:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14836:4:21","type":""}],"src":"14670:419:21"},{"body":{"nodeType":"YulBlock","src":"15266:248:21","statements":[{"nodeType":"YulAssignment","src":"15276:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15288:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15299:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15284:3:21"},"nodeType":"YulFunctionCall","src":"15284:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15276:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15323:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15334:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15319:3:21"},"nodeType":"YulFunctionCall","src":"15319:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15342:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"15348:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15338:3:21"},"nodeType":"YulFunctionCall","src":"15338:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15312:6:21"},"nodeType":"YulFunctionCall","src":"15312:47:21"},"nodeType":"YulExpressionStatement","src":"15312:47:21"},{"nodeType":"YulAssignment","src":"15368:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15502:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15376:124:21"},"nodeType":"YulFunctionCall","src":"15376:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15368:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15246:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15261:4:21","type":""}],"src":"15095:419:21"},{"body":{"nodeType":"YulBlock","src":"15691:248:21","statements":[{"nodeType":"YulAssignment","src":"15701:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15713:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15724:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15709:3:21"},"nodeType":"YulFunctionCall","src":"15709:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15701:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15748:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15759:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15744:3:21"},"nodeType":"YulFunctionCall","src":"15744:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15767:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"15773:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15763:3:21"},"nodeType":"YulFunctionCall","src":"15763:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15737:6:21"},"nodeType":"YulFunctionCall","src":"15737:47:21"},"nodeType":"YulExpressionStatement","src":"15737:47:21"},{"nodeType":"YulAssignment","src":"15793:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15927:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15801:124:21"},"nodeType":"YulFunctionCall","src":"15801:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15793:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15671:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15686:4:21","type":""}],"src":"15520:419:21"},{"body":{"nodeType":"YulBlock","src":"16116:248:21","statements":[{"nodeType":"YulAssignment","src":"16126:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16138:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16149:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16134:3:21"},"nodeType":"YulFunctionCall","src":"16134:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16126:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16173:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16184:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16169:3:21"},"nodeType":"YulFunctionCall","src":"16169:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16192:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"16198:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16188:3:21"},"nodeType":"YulFunctionCall","src":"16188:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16162:6:21"},"nodeType":"YulFunctionCall","src":"16162:47:21"},"nodeType":"YulExpressionStatement","src":"16162:47:21"},{"nodeType":"YulAssignment","src":"16218:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16352:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16226:124:21"},"nodeType":"YulFunctionCall","src":"16226:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16218:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16096:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16111:4:21","type":""}],"src":"15945:419:21"},{"body":{"nodeType":"YulBlock","src":"16468:124:21","statements":[{"nodeType":"YulAssignment","src":"16478:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16490:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16501:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16486:3:21"},"nodeType":"YulFunctionCall","src":"16486:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16478:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16558:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16571:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16582:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16567:3:21"},"nodeType":"YulFunctionCall","src":"16567:17:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"16514:43:21"},"nodeType":"YulFunctionCall","src":"16514:71:21"},"nodeType":"YulExpressionStatement","src":"16514:71:21"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16440:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16452:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16463:4:21","type":""}],"src":"16370:222:21"},{"body":{"nodeType":"YulBlock","src":"16639:88:21","statements":[{"nodeType":"YulAssignment","src":"16649:30:21","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"16659:18:21"},"nodeType":"YulFunctionCall","src":"16659:20:21"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16649:6:21"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16708:6:21"},{"name":"size","nodeType":"YulIdentifier","src":"16716:4:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"16688:19:21"},"nodeType":"YulFunctionCall","src":"16688:33:21"},"nodeType":"YulExpressionStatement","src":"16688:33:21"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"16623:4:21","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"16632:6:21","type":""}],"src":"16598:129:21"},{"body":{"nodeType":"YulBlock","src":"16773:35:21","statements":[{"nodeType":"YulAssignment","src":"16783:19:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16799:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16793:5:21"},"nodeType":"YulFunctionCall","src":"16793:9:21"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16783:6:21"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"16766:6:21","type":""}],"src":"16733:75:21"},{"body":{"nodeType":"YulBlock","src":"16880:241:21","statements":[{"body":{"nodeType":"YulBlock","src":"16985:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"16987:16:21"},"nodeType":"YulFunctionCall","src":"16987:18:21"},"nodeType":"YulExpressionStatement","src":"16987:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16957:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"16965:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16954:2:21"},"nodeType":"YulFunctionCall","src":"16954:30:21"},"nodeType":"YulIf","src":"16951:2:21"},{"nodeType":"YulAssignment","src":"17017:37:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"17047:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"17025:21:21"},"nodeType":"YulFunctionCall","src":"17025:29:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"17017:4:21"}]},{"nodeType":"YulAssignment","src":"17091:23:21","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"17103:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"17109:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17099:3:21"},"nodeType":"YulFunctionCall","src":"17099:15:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"17091:4:21"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"16864:6:21","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"16875:4:21","type":""}],"src":"16814:307:21"},{"body":{"nodeType":"YulBlock","src":"17185:40:21","statements":[{"nodeType":"YulAssignment","src":"17196:22:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17212:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17206:5:21"},"nodeType":"YulFunctionCall","src":"17206:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"17196:6:21"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17168:5:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"17178:6:21","type":""}],"src":"17127:98:21"},{"body":{"nodeType":"YulBlock","src":"17290:40:21","statements":[{"nodeType":"YulAssignment","src":"17301:22:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17317:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17311:5:21"},"nodeType":"YulFunctionCall","src":"17311:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"17301:6:21"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17273:5:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"17283:6:21","type":""}],"src":"17231:99:21"},{"body":{"nodeType":"YulBlock","src":"17431:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17448:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"17453:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17441:6:21"},"nodeType":"YulFunctionCall","src":"17441:19:21"},"nodeType":"YulExpressionStatement","src":"17441:19:21"},{"nodeType":"YulAssignment","src":"17469:29:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17488:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"17493:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17484:3:21"},"nodeType":"YulFunctionCall","src":"17484:14:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"17469:11:21"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17403:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"17408:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"17419:11:21","type":""}],"src":"17336:168:21"},{"body":{"nodeType":"YulBlock","src":"17606:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17623:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"17628:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17616:6:21"},"nodeType":"YulFunctionCall","src":"17616:19:21"},"nodeType":"YulExpressionStatement","src":"17616:19:21"},{"nodeType":"YulAssignment","src":"17644:29:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17663:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"17668:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17659:3:21"},"nodeType":"YulFunctionCall","src":"17659:14:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"17644:11:21"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17578:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"17583:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"17594:11:21","type":""}],"src":"17510:169:21"},{"body":{"nodeType":"YulBlock","src":"17799:34:21","statements":[{"nodeType":"YulAssignment","src":"17809:18:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"17824:3:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"17809:11:21"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17771:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"17776:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"17787:11:21","type":""}],"src":"17685:148:21"},{"body":{"nodeType":"YulBlock","src":"17883:261:21","statements":[{"nodeType":"YulAssignment","src":"17893:25:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17916:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17898:17:21"},"nodeType":"YulFunctionCall","src":"17898:20:21"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"17893:1:21"}]},{"nodeType":"YulAssignment","src":"17927:25:21","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"17950:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17932:17:21"},"nodeType":"YulFunctionCall","src":"17932:20:21"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"17927:1:21"}]},{"body":{"nodeType":"YulBlock","src":"18090:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18092:16:21"},"nodeType":"YulFunctionCall","src":"18092:18:21"},"nodeType":"YulExpressionStatement","src":"18092:18:21"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18011:1:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18018:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"18086:1:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18014:3:21"},"nodeType":"YulFunctionCall","src":"18014:74:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18008:2:21"},"nodeType":"YulFunctionCall","src":"18008:81:21"},"nodeType":"YulIf","src":"18005:2:21"},{"nodeType":"YulAssignment","src":"18122:16:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18133:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"18136:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18129:3:21"},"nodeType":"YulFunctionCall","src":"18129:9:21"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"18122:3:21"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"17870:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"17873:1:21","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"17879:3:21","type":""}],"src":"17839:305:21"},{"body":{"nodeType":"YulBlock","src":"18195:146:21","statements":[{"nodeType":"YulAssignment","src":"18205:25:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18228:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"18210:17:21"},"nodeType":"YulFunctionCall","src":"18210:20:21"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"18205:1:21"}]},{"nodeType":"YulAssignment","src":"18239:25:21","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"18262:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"18244:17:21"},"nodeType":"YulFunctionCall","src":"18244:20:21"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"18239:1:21"}]},{"body":{"nodeType":"YulBlock","src":"18286:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18288:16:21"},"nodeType":"YulFunctionCall","src":"18288:18:21"},"nodeType":"YulExpressionStatement","src":"18288:18:21"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18280:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"18283:1:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18277:2:21"},"nodeType":"YulFunctionCall","src":"18277:8:21"},"nodeType":"YulIf","src":"18274:2:21"},{"nodeType":"YulAssignment","src":"18318:17:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18330:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"18333:1:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18326:3:21"},"nodeType":"YulFunctionCall","src":"18326:9:21"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"18318:4:21"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"18181:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"18184:1:21","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"18190:4:21","type":""}],"src":"18150:191:21"},{"body":{"nodeType":"YulBlock","src":"18392:51:21","statements":[{"nodeType":"YulAssignment","src":"18402:35:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18431:5:21"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"18413:17:21"},"nodeType":"YulFunctionCall","src":"18413:24:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18402:7:21"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18374:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18384:7:21","type":""}],"src":"18347:96:21"},{"body":{"nodeType":"YulBlock","src":"18491:48:21","statements":[{"nodeType":"YulAssignment","src":"18501:32:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18526:5:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18519:6:21"},"nodeType":"YulFunctionCall","src":"18519:13:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18512:6:21"},"nodeType":"YulFunctionCall","src":"18512:21:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18501:7:21"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18473:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18483:7:21","type":""}],"src":"18449:90:21"},{"body":{"nodeType":"YulBlock","src":"18589:105:21","statements":[{"nodeType":"YulAssignment","src":"18599:89:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18614:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"18621:66:21","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18610:3:21"},"nodeType":"YulFunctionCall","src":"18610:78:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18599:7:21"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18571:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18581:7:21","type":""}],"src":"18545:149:21"},{"body":{"nodeType":"YulBlock","src":"18745:81:21","statements":[{"nodeType":"YulAssignment","src":"18755:65:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18770:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"18777:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18766:3:21"},"nodeType":"YulFunctionCall","src":"18766:54:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18755:7:21"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18727:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18737:7:21","type":""}],"src":"18700:126:21"},{"body":{"nodeType":"YulBlock","src":"18877:32:21","statements":[{"nodeType":"YulAssignment","src":"18887:16:21","value":{"name":"value","nodeType":"YulIdentifier","src":"18898:5:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18887:7:21"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18859:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18869:7:21","type":""}],"src":"18832:77:21"},{"body":{"nodeType":"YulBlock","src":"18966:103:21","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"18989:3:21"},{"name":"src","nodeType":"YulIdentifier","src":"18994:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"18999:6:21"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"18976:12:21"},"nodeType":"YulFunctionCall","src":"18976:30:21"},"nodeType":"YulExpressionStatement","src":"18976:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"19047:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"19052:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19043:3:21"},"nodeType":"YulFunctionCall","src":"19043:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"19061:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19036:6:21"},"nodeType":"YulFunctionCall","src":"19036:27:21"},"nodeType":"YulExpressionStatement","src":"19036:27:21"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"18948:3:21","type":""},{"name":"dst","nodeType":"YulTypedName","src":"18953:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"18958:6:21","type":""}],"src":"18915:154:21"},{"body":{"nodeType":"YulBlock","src":"19124:258:21","statements":[{"nodeType":"YulVariableDeclaration","src":"19134:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"19143:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"19138:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"19203:63:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"19228:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"19233:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19224:3:21"},"nodeType":"YulFunctionCall","src":"19224:11:21"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"19247:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"19252:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19243:3:21"},"nodeType":"YulFunctionCall","src":"19243:11:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19237:5:21"},"nodeType":"YulFunctionCall","src":"19237:18:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19217:6:21"},"nodeType":"YulFunctionCall","src":"19217:39:21"},"nodeType":"YulExpressionStatement","src":"19217:39:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19164:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"19167:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19161:2:21"},"nodeType":"YulFunctionCall","src":"19161:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"19175:19:21","statements":[{"nodeType":"YulAssignment","src":"19177:15:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19186:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"19189:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19182:3:21"},"nodeType":"YulFunctionCall","src":"19182:10:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"19177:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"19157:3:21","statements":[]},"src":"19153:113:21"},{"body":{"nodeType":"YulBlock","src":"19300:76:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"19350:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"19355:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19346:3:21"},"nodeType":"YulFunctionCall","src":"19346:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"19364:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19339:6:21"},"nodeType":"YulFunctionCall","src":"19339:27:21"},"nodeType":"YulExpressionStatement","src":"19339:27:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19281:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"19284:6:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19278:2:21"},"nodeType":"YulFunctionCall","src":"19278:13:21"},"nodeType":"YulIf","src":"19275:2:21"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"19106:3:21","type":""},{"name":"dst","nodeType":"YulTypedName","src":"19111:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"19116:6:21","type":""}],"src":"19075:307:21"},{"body":{"nodeType":"YulBlock","src":"19439:269:21","statements":[{"nodeType":"YulAssignment","src":"19449:22:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"19463:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"19469:1:21","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"19459:3:21"},"nodeType":"YulFunctionCall","src":"19459:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"19449:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"19480:38:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"19510:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"19516:1:21","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19506:3:21"},"nodeType":"YulFunctionCall","src":"19506:12:21"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"19484:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"19557:51:21","statements":[{"nodeType":"YulAssignment","src":"19571:27:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19585:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"19593:4:21","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19581:3:21"},"nodeType":"YulFunctionCall","src":"19581:17:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"19571:6:21"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"19537:18:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19530:6:21"},"nodeType":"YulFunctionCall","src":"19530:26:21"},"nodeType":"YulIf","src":"19527:2:21"},{"body":{"nodeType":"YulBlock","src":"19660:42:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"19674:16:21"},"nodeType":"YulFunctionCall","src":"19674:18:21"},"nodeType":"YulExpressionStatement","src":"19674:18:21"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"19624:18:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19647:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"19655:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19644:2:21"},"nodeType":"YulFunctionCall","src":"19644:14:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"19621:2:21"},"nodeType":"YulFunctionCall","src":"19621:38:21"},"nodeType":"YulIf","src":"19618:2:21"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"19423:4:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"19432:6:21","type":""}],"src":"19388:320:21"},{"body":{"nodeType":"YulBlock","src":"19757:238:21","statements":[{"nodeType":"YulVariableDeclaration","src":"19767:58:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19789:6:21"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"19819:4:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"19797:21:21"},"nodeType":"YulFunctionCall","src":"19797:27:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19785:3:21"},"nodeType":"YulFunctionCall","src":"19785:40:21"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"19771:10:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"19936:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"19938:16:21"},"nodeType":"YulFunctionCall","src":"19938:18:21"},"nodeType":"YulExpressionStatement","src":"19938:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"19879:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"19891:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19876:2:21"},"nodeType":"YulFunctionCall","src":"19876:34:21"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"19915:10:21"},{"name":"memPtr","nodeType":"YulIdentifier","src":"19927:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19912:2:21"},"nodeType":"YulFunctionCall","src":"19912:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"19873:2:21"},"nodeType":"YulFunctionCall","src":"19873:62:21"},"nodeType":"YulIf","src":"19870:2:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19974:2:21","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"19978:10:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19967:6:21"},"nodeType":"YulFunctionCall","src":"19967:22:21"},"nodeType":"YulExpressionStatement","src":"19967:22:21"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19743:6:21","type":""},{"name":"size","nodeType":"YulTypedName","src":"19751:4:21","type":""}],"src":"19714:281:21"},{"body":{"nodeType":"YulBlock","src":"20029:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20046:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20049:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20039:6:21"},"nodeType":"YulFunctionCall","src":"20039:88:21"},"nodeType":"YulExpressionStatement","src":"20039:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20143:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"20146:4:21","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20136:6:21"},"nodeType":"YulFunctionCall","src":"20136:15:21"},"nodeType":"YulExpressionStatement","src":"20136:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20167:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20170:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20160:6:21"},"nodeType":"YulFunctionCall","src":"20160:15:21"},"nodeType":"YulExpressionStatement","src":"20160:15:21"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"20001:180:21"},{"body":{"nodeType":"YulBlock","src":"20215:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20232:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20235:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20225:6:21"},"nodeType":"YulFunctionCall","src":"20225:88:21"},"nodeType":"YulExpressionStatement","src":"20225:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20329:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"20332:4:21","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20322:6:21"},"nodeType":"YulFunctionCall","src":"20322:15:21"},"nodeType":"YulExpressionStatement","src":"20322:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20353:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20356:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20346:6:21"},"nodeType":"YulFunctionCall","src":"20346:15:21"},"nodeType":"YulExpressionStatement","src":"20346:15:21"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"20187:180:21"},{"body":{"nodeType":"YulBlock","src":"20401:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20418:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20421:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20411:6:21"},"nodeType":"YulFunctionCall","src":"20411:88:21"},"nodeType":"YulExpressionStatement","src":"20411:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20515:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"20518:4:21","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20508:6:21"},"nodeType":"YulFunctionCall","src":"20508:15:21"},"nodeType":"YulExpressionStatement","src":"20508:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20539:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20542:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20532:6:21"},"nodeType":"YulFunctionCall","src":"20532:15:21"},"nodeType":"YulExpressionStatement","src":"20532:15:21"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"20373:180:21"},{"body":{"nodeType":"YulBlock","src":"20587:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20604:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20607:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20597:6:21"},"nodeType":"YulFunctionCall","src":"20597:88:21"},"nodeType":"YulExpressionStatement","src":"20597:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20701:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"20704:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20694:6:21"},"nodeType":"YulFunctionCall","src":"20694:15:21"},"nodeType":"YulExpressionStatement","src":"20694:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20725:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20728:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20718:6:21"},"nodeType":"YulFunctionCall","src":"20718:15:21"},"nodeType":"YulExpressionStatement","src":"20718:15:21"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"20559:180:21"},{"body":{"nodeType":"YulBlock","src":"20834:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20851:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20854:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20844:6:21"},"nodeType":"YulFunctionCall","src":"20844:12:21"},"nodeType":"YulExpressionStatement","src":"20844:12:21"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"20745:117:21"},{"body":{"nodeType":"YulBlock","src":"20957:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20974:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20977:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20967:6:21"},"nodeType":"YulFunctionCall","src":"20967:12:21"},"nodeType":"YulExpressionStatement","src":"20967:12:21"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"20868:117:21"},{"body":{"nodeType":"YulBlock","src":"21080:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21097:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21100:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21090:6:21"},"nodeType":"YulFunctionCall","src":"21090:12:21"},"nodeType":"YulExpressionStatement","src":"21090:12:21"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"20991:117:21"},{"body":{"nodeType":"YulBlock","src":"21203:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21220:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21223:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21213:6:21"},"nodeType":"YulFunctionCall","src":"21213:12:21"},"nodeType":"YulExpressionStatement","src":"21213:12:21"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"21114:117:21"},{"body":{"nodeType":"YulBlock","src":"21285:54:21","statements":[{"nodeType":"YulAssignment","src":"21295:38:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21313:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"21320:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21309:3:21"},"nodeType":"YulFunctionCall","src":"21309:14:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21329:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"21325:3:21"},"nodeType":"YulFunctionCall","src":"21325:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21305:3:21"},"nodeType":"YulFunctionCall","src":"21305:28:21"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"21295:6:21"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21268:5:21","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"21278:6:21","type":""}],"src":"21237:102:21"},{"body":{"nodeType":"YulBlock","src":"21451:126:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21473:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"21481:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21469:3:21"},"nodeType":"YulFunctionCall","src":"21469:14:21"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"21485:34:21","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21462:6:21"},"nodeType":"YulFunctionCall","src":"21462:58:21"},"nodeType":"YulExpressionStatement","src":"21462:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21541:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"21549:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21537:3:21"},"nodeType":"YulFunctionCall","src":"21537:15:21"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"21554:15:21","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21530:6:21"},"nodeType":"YulFunctionCall","src":"21530:40:21"},"nodeType":"YulExpressionStatement","src":"21530:40:21"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21443:6:21","type":""}],"src":"21345:232:21"},{"body":{"nodeType":"YulBlock","src":"21689:131:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21711:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"21719:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21707:3:21"},"nodeType":"YulFunctionCall","src":"21707:14:21"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"21723:34:21","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21700:6:21"},"nodeType":"YulFunctionCall","src":"21700:58:21"},"nodeType":"YulExpressionStatement","src":"21700:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21779:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"21787:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21775:3:21"},"nodeType":"YulFunctionCall","src":"21775:15:21"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"21792:20:21","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21768:6:21"},"nodeType":"YulFunctionCall","src":"21768:45:21"},"nodeType":"YulExpressionStatement","src":"21768:45:21"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21681:6:21","type":""}],"src":"21583:237:21"},{"body":{"nodeType":"YulBlock","src":"21932:118:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21954:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"21962:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21950:3:21"},"nodeType":"YulFunctionCall","src":"21950:14:21"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"21966:34:21","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21943:6:21"},"nodeType":"YulFunctionCall","src":"21943:58:21"},"nodeType":"YulExpressionStatement","src":"21943:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22022:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"22030:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22018:3:21"},"nodeType":"YulFunctionCall","src":"22018:15:21"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"22035:7:21","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22011:6:21"},"nodeType":"YulFunctionCall","src":"22011:32:21"},"nodeType":"YulExpressionStatement","src":"22011:32:21"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21924:6:21","type":""}],"src":"21826:224:21"},{"body":{"nodeType":"YulBlock","src":"22162:117:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22184:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"22192:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22180:3:21"},"nodeType":"YulFunctionCall","src":"22180:14:21"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"22196:34:21","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22173:6:21"},"nodeType":"YulFunctionCall","src":"22173:58:21"},"nodeType":"YulExpressionStatement","src":"22173:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22252:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"22260:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22248:3:21"},"nodeType":"YulFunctionCall","src":"22248:15:21"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"22265:6:21","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22241:6:21"},"nodeType":"YulFunctionCall","src":"22241:31:21"},"nodeType":"YulExpressionStatement","src":"22241:31:21"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22154:6:21","type":""}],"src":"22056:223:21"},{"body":{"nodeType":"YulBlock","src":"22391:69:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22413:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"22421:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22409:3:21"},"nodeType":"YulFunctionCall","src":"22409:14:21"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"22425:27:21","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22402:6:21"},"nodeType":"YulFunctionCall","src":"22402:51:21"},"nodeType":"YulExpressionStatement","src":"22402:51:21"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22383:6:21","type":""}],"src":"22285:175:21"},{"body":{"nodeType":"YulBlock","src":"22572:122:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22594:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"22602:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22590:3:21"},"nodeType":"YulFunctionCall","src":"22590:14:21"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"22606:34:21","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22583:6:21"},"nodeType":"YulFunctionCall","src":"22583:58:21"},"nodeType":"YulExpressionStatement","src":"22583:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22662:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"22670:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22658:3:21"},"nodeType":"YulFunctionCall","src":"22658:15:21"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"22675:11:21","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22651:6:21"},"nodeType":"YulFunctionCall","src":"22651:36:21"},"nodeType":"YulExpressionStatement","src":"22651:36:21"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22564:6:21","type":""}],"src":"22466:228:21"},{"body":{"nodeType":"YulBlock","src":"22806:68:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22828:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"22836:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22824:3:21"},"nodeType":"YulFunctionCall","src":"22824:14:21"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"22840:26:21","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22817:6:21"},"nodeType":"YulFunctionCall","src":"22817:50:21"},"nodeType":"YulExpressionStatement","src":"22817:50:21"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22798:6:21","type":""}],"src":"22700:174:21"},{"body":{"nodeType":"YulBlock","src":"22986:114:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23008:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"23016:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23004:3:21"},"nodeType":"YulFunctionCall","src":"23004:14:21"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"23020:34:21","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22997:6:21"},"nodeType":"YulFunctionCall","src":"22997:58:21"},"nodeType":"YulExpressionStatement","src":"22997:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23076:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"23084:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23072:3:21"},"nodeType":"YulFunctionCall","src":"23072:15:21"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"23089:3:21","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23065:6:21"},"nodeType":"YulFunctionCall","src":"23065:28:21"},"nodeType":"YulExpressionStatement","src":"23065:28:21"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22978:6:21","type":""}],"src":"22880:220:21"},{"body":{"nodeType":"YulBlock","src":"23212:142:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23234:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"23242:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23230:3:21"},"nodeType":"YulFunctionCall","src":"23230:14:21"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"23246:34:21","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23223:6:21"},"nodeType":"YulFunctionCall","src":"23223:58:21"},"nodeType":"YulExpressionStatement","src":"23223:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23302:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"23310:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23298:3:21"},"nodeType":"YulFunctionCall","src":"23298:15:21"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"23315:31:21","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23291:6:21"},"nodeType":"YulFunctionCall","src":"23291:56:21"},"nodeType":"YulExpressionStatement","src":"23291:56:21"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"23204:6:21","type":""}],"src":"23106:248:21"},{"body":{"nodeType":"YulBlock","src":"23403:79:21","statements":[{"body":{"nodeType":"YulBlock","src":"23460:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23469:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23472:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23462:6:21"},"nodeType":"YulFunctionCall","src":"23462:12:21"},"nodeType":"YulExpressionStatement","src":"23462:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23426:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23451:5:21"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"23433:17:21"},"nodeType":"YulFunctionCall","src":"23433:24:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"23423:2:21"},"nodeType":"YulFunctionCall","src":"23423:35:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23416:6:21"},"nodeType":"YulFunctionCall","src":"23416:43:21"},"nodeType":"YulIf","src":"23413:2:21"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23396:5:21","type":""}],"src":"23360:122:21"},{"body":{"nodeType":"YulBlock","src":"23528:76:21","statements":[{"body":{"nodeType":"YulBlock","src":"23582:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23591:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23594:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23584:6:21"},"nodeType":"YulFunctionCall","src":"23584:12:21"},"nodeType":"YulExpressionStatement","src":"23584:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23551:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23573:5:21"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"23558:14:21"},"nodeType":"YulFunctionCall","src":"23558:21:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"23548:2:21"},"nodeType":"YulFunctionCall","src":"23548:32:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23541:6:21"},"nodeType":"YulFunctionCall","src":"23541:40:21"},"nodeType":"YulIf","src":"23538:2:21"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23521:5:21","type":""}],"src":"23488:116:21"},{"body":{"nodeType":"YulBlock","src":"23652:78:21","statements":[{"body":{"nodeType":"YulBlock","src":"23708:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23717:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23720:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23710:6:21"},"nodeType":"YulFunctionCall","src":"23710:12:21"},"nodeType":"YulExpressionStatement","src":"23710:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23675:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23699:5:21"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"23682:16:21"},"nodeType":"YulFunctionCall","src":"23682:23:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"23672:2:21"},"nodeType":"YulFunctionCall","src":"23672:34:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23665:6:21"},"nodeType":"YulFunctionCall","src":"23665:42:21"},"nodeType":"YulIf","src":"23662:2:21"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23645:5:21","type":""}],"src":"23610:120:21"},{"body":{"nodeType":"YulBlock","src":"23779:79:21","statements":[{"body":{"nodeType":"YulBlock","src":"23836:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23845:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23848:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23838:6:21"},"nodeType":"YulFunctionCall","src":"23838:12:21"},"nodeType":"YulExpressionStatement","src":"23838:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23802:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23827:5:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"23809:17:21"},"nodeType":"YulFunctionCall","src":"23809:24:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"23799:2:21"},"nodeType":"YulFunctionCall","src":"23799:35:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23792:6:21"},"nodeType":"YulFunctionCall","src":"23792:43:21"},"nodeType":"YulIf","src":"23789:2:21"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23772:5:21","type":""}],"src":"23736:122:21"}]},"contents":"{\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e99190611863565b6102bc565b6040516100fb9190611b80565b60405180910390f35b61010c61039e565b6040516101199190611b9b565b60405180910390f35b61013c600480360381019061013791906118bd565b610430565b6040516101499190611b19565b60405180910390f35b61016c60048036038101906101679190611823565b610476565b005b6101886004803603810190610183919061170d565b61058e565b005b6101a4600480360381019061019f919061170d565b6105ee565b005b6101c060048036038101906101bb91906118bd565b61060e565b6040516101cd9190611b19565b60405180910390f35b6101f060048036038101906101eb91906116a0565b610695565b6040516101fd9190611cdd565b60405180910390f35b61020e61074d565b60405161021b9190611b9b565b60405180910390f35b61023e600480360381019061023991906117e3565b6107df565b005b61025a60048036038101906102559190611760565b6107f5565b005b610276600480360381019061027191906118bd565b610857565b6040516102839190611b9b565b60405180910390f35b6102a660048036038101906102a191906116cd565b6108bf565b6040516102b39190611b80565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610953565b5b9050919050565b6060600080546103ad90611ed1565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611ed1565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109bd565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e990611c9d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610511610a08565b73ffffffffffffffffffffffffffffffffffffffff161480610540575061053f8161053a610a08565b6108bf565b5b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690611cbd565b60405180910390fd5b6105898383610a10565b505050565b61059f610599610a08565b82610ac9565b6105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590611bbd565b60405180910390fd5b6105e9838383610b5e565b505050565b610609838383604051806020016040528060008152506107f5565b505050565b60008061061a83610e58565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611c7d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd90611c5d565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075c90611ed1565b80601f016020809104026020016040519081016040528092919081815260200182805461078890611ed1565b80156107d55780601f106107aa576101008083540402835291602001916107d5565b820191906000526020600020905b8154815290600101906020018083116107b857829003601f168201915b5050505050905090565b6107f16107ea610a08565b8383610e95565b5050565b610806610800610a08565b83610ac9565b610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c90611bbd565b60405180910390fd5b61085184848484611002565b50505050565b6060610862826109bd565b600061086c61105e565b9050600081511161088c57604051806020016040528060008152506108b7565b8061089684611075565b6040516020016108a7929190611af5565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c68161114d565b610a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fc90611c7d565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a838361060e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad58361060e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b175750610b1681856108bf565b5b80610b5557508373ffffffffffffffffffffffffffffffffffffffff16610b3d84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7e8261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611bfd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90611c1d565b60405180910390fd5b610c51838383600161118e565b8273ffffffffffffffffffffffffffffffffffffffff16610c718261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90611bfd565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e5383838360016112b4565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb90611c3d565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff59190611b80565b60405180910390a3505050565b61100d848484610b5e565b611019848484846112ba565b611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90611bdd565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161108484611451565b01905060008167ffffffffffffffff8111156110a3576110a2611fc1565b5b6040519080825280601f01601f1916602001820160405280156110d55781602001600182028036833780820191505090505b509050600082602001820190505b600115611142578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161112c5761112b611f63565b5b049450600085141561113d57611142565b6110e3565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116f83610e58565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60018111156112ae57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146112225780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461121a9190611de7565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146112ad5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112a59190611d91565b925050819055505b5b50505050565b50505050565b60006112db8473ffffffffffffffffffffffffffffffffffffffff166115a4565b15611444578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611304610a08565b8786866040518563ffffffff1660e01b81526004016113269493929190611b34565b602060405180830381600087803b15801561134057600080fd5b505af192505050801561137157506040513d601f19601f8201168201806040525081019061136e9190611890565b60015b6113f4573d80600081146113a1576040519150601f19603f3d011682016040523d82523d6000602084013e6113a6565b606091505b506000815114156113ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e390611bdd565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611449565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106114af577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816114a5576114a4611f63565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106114ec576d04ee2d6d415b85acef810000000083816114e2576114e1611f63565b5b0492506020810190505b662386f26fc10000831061151b57662386f26fc10000838161151157611510611f63565b5b0492506010810190505b6305f5e1008310611544576305f5e100838161153a57611539611f63565b5b0492506008810190505b612710831061156957612710838161155f5761155e611f63565b5b0492506004810190505b6064831061158c576064838161158257611581611f63565b5b0492506002810190505b600a831061159b576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60006115da6115d584611d1d565b611cf8565b9050828152602081018484840111156115f6576115f5611ff5565b5b611601848285611e8f565b509392505050565b60008135905061161881612290565b92915050565b60008135905061162d816122a7565b92915050565b600081359050611642816122be565b92915050565b600081519050611657816122be565b92915050565b600082601f83011261167257611671611ff0565b5b81356116828482602086016115c7565b91505092915050565b60008135905061169a816122d5565b92915050565b6000602082840312156116b6576116b5611fff565b5b60006116c484828501611609565b91505092915050565b600080604083850312156116e4576116e3611fff565b5b60006116f285828601611609565b925050602061170385828601611609565b9150509250929050565b60008060006060848603121561172657611725611fff565b5b600061173486828701611609565b935050602061174586828701611609565b92505060406117568682870161168b565b9150509250925092565b6000806000806080858703121561177a57611779611fff565b5b600061178887828801611609565b945050602061179987828801611609565b93505060406117aa8782880161168b565b925050606085013567ffffffffffffffff8111156117cb576117ca611ffa565b5b6117d78782880161165d565b91505092959194509250565b600080604083850312156117fa576117f9611fff565b5b600061180885828601611609565b92505060206118198582860161161e565b9150509250929050565b6000806040838503121561183a57611839611fff565b5b600061184885828601611609565b92505060206118598582860161168b565b9150509250929050565b60006020828403121561187957611878611fff565b5b600061188784828501611633565b91505092915050565b6000602082840312156118a6576118a5611fff565b5b60006118b484828501611648565b91505092915050565b6000602082840312156118d3576118d2611fff565b5b60006118e18482850161168b565b91505092915050565b6118f381611e1b565b82525050565b61190281611e2d565b82525050565b600061191382611d4e565b61191d8185611d64565b935061192d818560208601611e9e565b61193681612004565b840191505092915050565b600061194c82611d59565b6119568185611d75565b9350611966818560208601611e9e565b61196f81612004565b840191505092915050565b600061198582611d59565b61198f8185611d86565b935061199f818560208601611e9e565b80840191505092915050565b60006119b8602d83611d75565b91506119c382612015565b604082019050919050565b60006119db603283611d75565b91506119e682612064565b604082019050919050565b60006119fe602583611d75565b9150611a09826120b3565b604082019050919050565b6000611a21602483611d75565b9150611a2c82612102565b604082019050919050565b6000611a44601983611d75565b9150611a4f82612151565b602082019050919050565b6000611a67602983611d75565b9150611a728261217a565b604082019050919050565b6000611a8a601883611d75565b9150611a95826121c9565b602082019050919050565b6000611aad602183611d75565b9150611ab8826121f2565b604082019050919050565b6000611ad0603d83611d75565b9150611adb82612241565b604082019050919050565b611aef81611e85565b82525050565b6000611b01828561197a565b9150611b0d828461197a565b91508190509392505050565b6000602082019050611b2e60008301846118ea565b92915050565b6000608082019050611b4960008301876118ea565b611b5660208301866118ea565b611b636040830185611ae6565b8181036060830152611b758184611908565b905095945050505050565b6000602082019050611b9560008301846118f9565b92915050565b60006020820190508181036000830152611bb58184611941565b905092915050565b60006020820190508181036000830152611bd6816119ab565b9050919050565b60006020820190508181036000830152611bf6816119ce565b9050919050565b60006020820190508181036000830152611c16816119f1565b9050919050565b60006020820190508181036000830152611c3681611a14565b9050919050565b60006020820190508181036000830152611c5681611a37565b9050919050565b60006020820190508181036000830152611c7681611a5a565b9050919050565b60006020820190508181036000830152611c9681611a7d565b9050919050565b60006020820190508181036000830152611cb681611aa0565b9050919050565b60006020820190508181036000830152611cd681611ac3565b9050919050565b6000602082019050611cf26000830184611ae6565b92915050565b6000611d02611d13565b9050611d0e8282611f03565b919050565b6000604051905090565b600067ffffffffffffffff821115611d3857611d37611fc1565b5b611d4182612004565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611d9c82611e85565b9150611da783611e85565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ddc57611ddb611f34565b5b828201905092915050565b6000611df282611e85565b9150611dfd83611e85565b925082821015611e1057611e0f611f34565b5b828203905092915050565b6000611e2682611e65565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611ebc578082015181840152602081019050611ea1565b83811115611ecb576000848401525b50505050565b60006002820490506001821680611ee957607f821691505b60208210811415611efd57611efc611f92565b5b50919050565b611f0c82612004565b810181811067ffffffffffffffff82111715611f2b57611f2a611fc1565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b61229981611e1b565b81146122a457600080fd5b50565b6122b081611e2d565b81146122bb57600080fd5b50565b6122c781611e39565b81146122d257600080fd5b50565b6122de81611e85565b81146122e957600080fd5b5056fea2646970667358221220a024ed13883dd1fe352733e0632b3403592227559d263654a5da2c893131b18364736f6c63430008060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1863 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x1B19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x1823 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x170D JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x170D JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x1B19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x16A0 JUMP JUMPDEST PUSH2 0x695 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x17E3 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x7F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x16CD JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x953 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E9 SWAP1 PUSH2 0x1C9D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x511 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x540 JUMPI POP PUSH2 0x53F DUP2 PUSH2 0x53A PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP1 PUSH2 0x1CBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x589 DUP4 DUP4 PUSH2 0xA10 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59F PUSH2 0x599 PUSH2 0xA08 JUMP JUMPDEST DUP3 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D5 SWAP1 PUSH2 0x1BBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E9 DUP4 DUP4 DUP4 PUSH2 0xB5E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x609 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x61A DUP4 PUSH2 0xE58 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x68C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x683 SWAP1 PUSH2 0x1C7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FD SWAP1 PUSH2 0x1C5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x75C SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x788 SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7AA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x7EA PUSH2 0xA08 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE95 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x806 PUSH2 0x800 PUSH2 0xA08 JUMP JUMPDEST DUP4 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x83C SWAP1 PUSH2 0x1BBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x851 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1002 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x862 DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86C PUSH2 0x105E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x88C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B7 JUMP JUMPDEST DUP1 PUSH2 0x896 DUP5 PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A7 SWAP3 SWAP2 SWAP1 PUSH2 0x1AF5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C6 DUP2 PUSH2 0x114D JUMP JUMPDEST PUSH2 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9FC SWAP1 PUSH2 0x1C7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA83 DUP4 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD5 DUP4 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB17 JUMPI POP PUSH2 0xB16 DUP2 DUP6 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB55 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3D DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7E DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCB SWAP1 PUSH2 0x1BFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3B SWAP1 PUSH2 0x1C1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC51 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x118E JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC71 DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1BFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE53 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x12B4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEFB SWAP1 PUSH2 0x1C3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF5 SWAP2 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x100D DUP5 DUP5 DUP5 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x1019 DUP5 DUP5 DUP5 DUP5 PUSH2 0x12BA JUMP JUMPDEST PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x1BDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1084 DUP5 PUSH2 0x1451 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10A3 JUMPI PUSH2 0x10A2 PUSH2 0x1FC1 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1142 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x112C JUMPI PUSH2 0x112B PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x113D JUMPI PUSH2 0x1142 JUMP JUMPDEST PUSH2 0x10E3 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x116F DUP4 PUSH2 0xE58 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x12AE JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1222 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x121A SWAP2 SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12AD JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12A5 SWAP2 SWAP1 PUSH2 0x1D91 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12DB DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x15A4 JUMP JUMPDEST ISZERO PUSH2 0x1444 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1304 PUSH2 0xA08 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1326 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B34 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1371 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x136E SWAP2 SWAP1 PUSH2 0x1890 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x13F4 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x13A1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13A6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x13EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13E3 SWAP1 PUSH2 0x1BDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1449 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x14AF JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x14A5 JUMPI PUSH2 0x14A4 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x14EC JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x14E2 JUMPI PUSH2 0x14E1 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x151B JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1511 JUMPI PUSH2 0x1510 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1544 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x153A JUMPI PUSH2 0x1539 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1569 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x155F JUMPI PUSH2 0x155E PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x158C JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1582 JUMPI PUSH2 0x1581 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x159B JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15DA PUSH2 0x15D5 DUP5 PUSH2 0x1D1D JUMP JUMPDEST PUSH2 0x1CF8 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x15F6 JUMPI PUSH2 0x15F5 PUSH2 0x1FF5 JUMP JUMPDEST JUMPDEST PUSH2 0x1601 DUP5 DUP3 DUP6 PUSH2 0x1E8F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1618 DUP2 PUSH2 0x2290 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x162D DUP2 PUSH2 0x22A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1642 DUP2 PUSH2 0x22BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1657 DUP2 PUSH2 0x22BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1672 JUMPI PUSH2 0x1671 PUSH2 0x1FF0 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1682 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x15C7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x169A DUP2 PUSH2 0x22D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16B6 JUMPI PUSH2 0x16B5 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16C4 DUP5 DUP3 DUP6 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16E4 JUMPI PUSH2 0x16E3 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16F2 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1703 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1726 JUMPI PUSH2 0x1725 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1734 DUP7 DUP3 DUP8 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1745 DUP7 DUP3 DUP8 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1756 DUP7 DUP3 DUP8 ADD PUSH2 0x168B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x177A JUMPI PUSH2 0x1779 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1788 DUP8 DUP3 DUP9 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1799 DUP8 DUP3 DUP9 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x17AA DUP8 DUP3 DUP9 ADD PUSH2 0x168B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17CB JUMPI PUSH2 0x17CA PUSH2 0x1FFA JUMP JUMPDEST JUMPDEST PUSH2 0x17D7 DUP8 DUP3 DUP9 ADD PUSH2 0x165D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17FA JUMPI PUSH2 0x17F9 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1808 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1819 DUP6 DUP3 DUP7 ADD PUSH2 0x161E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x183A JUMPI PUSH2 0x1839 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1848 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1859 DUP6 DUP3 DUP7 ADD PUSH2 0x168B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1879 JUMPI PUSH2 0x1878 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1887 DUP5 DUP3 DUP6 ADD PUSH2 0x1633 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18A6 JUMPI PUSH2 0x18A5 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18B4 DUP5 DUP3 DUP6 ADD PUSH2 0x1648 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18D3 JUMPI PUSH2 0x18D2 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18E1 DUP5 DUP3 DUP6 ADD PUSH2 0x168B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x18F3 DUP2 PUSH2 0x1E1B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1902 DUP2 PUSH2 0x1E2D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1913 DUP3 PUSH2 0x1D4E JUMP JUMPDEST PUSH2 0x191D DUP2 DUP6 PUSH2 0x1D64 JUMP JUMPDEST SWAP4 POP PUSH2 0x192D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x1936 DUP2 PUSH2 0x2004 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x194C DUP3 PUSH2 0x1D59 JUMP JUMPDEST PUSH2 0x1956 DUP2 DUP6 PUSH2 0x1D75 JUMP JUMPDEST SWAP4 POP PUSH2 0x1966 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x196F DUP2 PUSH2 0x2004 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1985 DUP3 PUSH2 0x1D59 JUMP JUMPDEST PUSH2 0x198F DUP2 DUP6 PUSH2 0x1D86 JUMP JUMPDEST SWAP4 POP PUSH2 0x199F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E9E JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B8 PUSH1 0x2D DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x19C3 DUP3 PUSH2 0x2015 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19DB PUSH1 0x32 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x19E6 DUP3 PUSH2 0x2064 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19FE PUSH1 0x25 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A09 DUP3 PUSH2 0x20B3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A21 PUSH1 0x24 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A2C DUP3 PUSH2 0x2102 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A44 PUSH1 0x19 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A4F DUP3 PUSH2 0x2151 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A67 PUSH1 0x29 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A72 DUP3 PUSH2 0x217A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A8A PUSH1 0x18 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A95 DUP3 PUSH2 0x21C9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AAD PUSH1 0x21 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AB8 DUP3 PUSH2 0x21F2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AD0 PUSH1 0x3D DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1ADB DUP3 PUSH2 0x2241 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AEF DUP2 PUSH2 0x1E85 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B01 DUP3 DUP6 PUSH2 0x197A JUMP JUMPDEST SWAP2 POP PUSH2 0x1B0D DUP3 DUP5 PUSH2 0x197A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B2E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1B49 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x18EA JUMP JUMPDEST PUSH2 0x1B56 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x18EA JUMP JUMPDEST PUSH2 0x1B63 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1AE6 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1B75 DUP2 DUP5 PUSH2 0x1908 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B95 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BB5 DUP2 DUP5 PUSH2 0x1941 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BD6 DUP2 PUSH2 0x19AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BF6 DUP2 PUSH2 0x19CE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C16 DUP2 PUSH2 0x19F1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C36 DUP2 PUSH2 0x1A14 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C56 DUP2 PUSH2 0x1A37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C76 DUP2 PUSH2 0x1A5A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C96 DUP2 PUSH2 0x1A7D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CB6 DUP2 PUSH2 0x1AA0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CD6 DUP2 PUSH2 0x1AC3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CF2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1AE6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D02 PUSH2 0x1D13 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D0E DUP3 DUP3 PUSH2 0x1F03 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1D38 JUMPI PUSH2 0x1D37 PUSH2 0x1FC1 JUMP JUMPDEST JUMPDEST PUSH2 0x1D41 DUP3 PUSH2 0x2004 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D9C DUP3 PUSH2 0x1E85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DA7 DUP4 PUSH2 0x1E85 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1DDC JUMPI PUSH2 0x1DDB PUSH2 0x1F34 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DF2 DUP3 PUSH2 0x1E85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DFD DUP4 PUSH2 0x1E85 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1E10 JUMPI PUSH2 0x1E0F PUSH2 0x1F34 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E26 DUP3 PUSH2 0x1E65 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1EBC JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1EA1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1ECB JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1EE9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1EFD JUMPI PUSH2 0x1EFC PUSH2 0x1F92 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F0C DUP3 PUSH2 0x2004 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1F2B JUMPI PUSH2 0x1F2A PUSH2 0x1FC1 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x2299 DUP2 PUSH2 0x1E1B JUMP JUMPDEST DUP2 EQ PUSH2 0x22A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x22B0 DUP2 PUSH2 0x1E2D JUMP JUMPDEST DUP2 EQ PUSH2 0x22BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x22C7 DUP2 PUSH2 0x1E39 JUMP JUMPDEST DUP2 EQ PUSH2 0x22D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x22DE DUP2 PUSH2 0x1E85 JUMP JUMPDEST DUP2 EQ PUSH2 0x22E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 0x24 0xED SGT DUP9 RETURNDATASIZE 0xD1 INVALID CALLDATALOAD 0x27 CALLER 0xE0 PUSH4 0x2B340359 0x22 0x27 SSTORE SWAP14 0x26 CALLDATASIZE SLOAD 0xA5 0xDA 0x2C DUP10 BALANCE BALANCE 0xB1 DUP4 PUSH5 0x736F6C6343 STOP ADDMOD MOD STOP CALLER ","sourceMap":"628:16327:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4612:326;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5004:179;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2190:219;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5249:314;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2801:276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1570:300;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:326::-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;5004:179::-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;2190:219::-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;1929:204::-;2001:7;2045:1;2028:19;;:5;:19;;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4169:153::-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;4388:162::-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;829:155:8:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13466:133:1:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:6:-;693:7;719:10;712:17;;640:96;:::o;12768:171:1:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;6838:115::-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;13075:307::-;13225:8;13216:17;;:5;:17;;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;415:696:7:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;:::i;:::-;;;;;1045:1;1036:5;:10;1032:21;;;1048:5;;1032:21;788:280;;;1088:6;1081:13;;;;;415:696;;;:::o;7256:126:1:-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;15698:396::-;15882:1;15870:9;:13;15866:222;;;15919:1;15903:18;;:4;:18;;;15899:85;;15960:9;15941;:15;15951:4;15941:15;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;15899:85;16015:1;16001:16;;:2;:16;;;15997:81;;16054:9;16037;:13;16047:2;16037:13;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;15997:81;15866:222;15698:396;;;;:::o;16800:153::-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;9889:890:10:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;:::i;:::-;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;:::i;:::-;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;:::i;:::-;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;:::i;:::-;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;:::i;:::-;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;:::i;:::-;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;1175:320:5:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;7:410:21:-;84:5;109:65;125:48;166:6;125:48;:::i;:::-;109:65;:::i;:::-;100:74;;197:6;190:5;183:21;235:4;228:5;224:16;273:3;264:6;259:3;255:16;252:25;249:2;;;280:79;;:::i;:::-;249:2;370:41;404:6;399:3;394;370:41;:::i;:::-;90:327;;;;;;:::o;423:139::-;469:5;507:6;494:20;485:29;;523:33;550:5;523:33;:::i;:::-;475:87;;;;:::o;568:133::-;611:5;649:6;636:20;627:29;;665:30;689:5;665:30;:::i;:::-;617:84;;;;:::o;707:137::-;752:5;790:6;777:20;768:29;;806:32;832:5;806:32;:::i;:::-;758:86;;;;:::o;850:141::-;906:5;937:6;931:13;922:22;;953:32;979:5;953:32;:::i;:::-;912:79;;;;:::o;1010:338::-;1065:5;1114:3;1107:4;1099:6;1095:17;1091:27;1081:2;;1122:79;;:::i;:::-;1081:2;1239:6;1226:20;1264:78;1338:3;1330:6;1323:4;1315:6;1311:17;1264:78;:::i;:::-;1255:87;;1071:277;;;;;:::o;1354:139::-;1400:5;1438:6;1425:20;1416:29;;1454:33;1481:5;1454:33;:::i;:::-;1406:87;;;;:::o;1499:329::-;1558:6;1607:2;1595:9;1586:7;1582:23;1578:32;1575:2;;;1613:79;;:::i;:::-;1575:2;1733:1;1758:53;1803:7;1794:6;1783:9;1779:22;1758:53;:::i;:::-;1748:63;;1704:117;1565:263;;;;:::o;1834:474::-;1902:6;1910;1959:2;1947:9;1938:7;1934:23;1930:32;1927:2;;;1965:79;;:::i;:::-;1927:2;2085:1;2110:53;2155:7;2146:6;2135:9;2131:22;2110:53;:::i;:::-;2100:63;;2056:117;2212:2;2238:53;2283:7;2274:6;2263:9;2259:22;2238:53;:::i;:::-;2228:63;;2183:118;1917:391;;;;;:::o;2314:619::-;2391:6;2399;2407;2456:2;2444:9;2435:7;2431:23;2427:32;2424:2;;;2462:79;;:::i;:::-;2424:2;2582:1;2607:53;2652:7;2643:6;2632:9;2628:22;2607:53;:::i;:::-;2597:63;;2553:117;2709:2;2735:53;2780:7;2771:6;2760:9;2756:22;2735:53;:::i;:::-;2725:63;;2680:118;2837:2;2863:53;2908:7;2899:6;2888:9;2884:22;2863:53;:::i;:::-;2853:63;;2808:118;2414:519;;;;;:::o;2939:943::-;3034:6;3042;3050;3058;3107:3;3095:9;3086:7;3082:23;3078:33;3075:2;;;3114:79;;:::i;:::-;3075:2;3234:1;3259:53;3304:7;3295:6;3284:9;3280:22;3259:53;:::i;:::-;3249:63;;3205:117;3361:2;3387:53;3432:7;3423:6;3412:9;3408:22;3387:53;:::i;:::-;3377:63;;3332:118;3489:2;3515:53;3560:7;3551:6;3540:9;3536:22;3515:53;:::i;:::-;3505:63;;3460:118;3645:2;3634:9;3630:18;3617:32;3676:18;3668:6;3665:30;3662:2;;;3698:79;;:::i;:::-;3662:2;3803:62;3857:7;3848:6;3837:9;3833:22;3803:62;:::i;:::-;3793:72;;3588:287;3065:817;;;;;;;:::o;3888:468::-;3953:6;3961;4010:2;3998:9;3989:7;3985:23;3981:32;3978:2;;;4016:79;;:::i;:::-;3978:2;4136:1;4161:53;4206:7;4197:6;4186:9;4182:22;4161:53;:::i;:::-;4151:63;;4107:117;4263:2;4289:50;4331:7;4322:6;4311:9;4307:22;4289:50;:::i;:::-;4279:60;;4234:115;3968:388;;;;;:::o;4362:474::-;4430:6;4438;4487:2;4475:9;4466:7;4462:23;4458:32;4455:2;;;4493:79;;:::i;:::-;4455:2;4613:1;4638:53;4683:7;4674:6;4663:9;4659:22;4638:53;:::i;:::-;4628:63;;4584:117;4740:2;4766:53;4811:7;4802:6;4791:9;4787:22;4766:53;:::i;:::-;4756:63;;4711:118;4445:391;;;;;:::o;4842:327::-;4900:6;4949:2;4937:9;4928:7;4924:23;4920:32;4917:2;;;4955:79;;:::i;:::-;4917:2;5075:1;5100:52;5144:7;5135:6;5124:9;5120:22;5100:52;:::i;:::-;5090:62;;5046:116;4907:262;;;;:::o;5175:349::-;5244:6;5293:2;5281:9;5272:7;5268:23;5264:32;5261:2;;;5299:79;;:::i;:::-;5261:2;5419:1;5444:63;5499:7;5490:6;5479:9;5475:22;5444:63;:::i;:::-;5434:73;;5390:127;5251:273;;;;:::o;5530:329::-;5589:6;5638:2;5626:9;5617:7;5613:23;5609:32;5606:2;;;5644:79;;:::i;:::-;5606:2;5764:1;5789:53;5834:7;5825:6;5814:9;5810:22;5789:53;:::i;:::-;5779:63;;5735:117;5596:263;;;;:::o;5865:118::-;5952:24;5970:5;5952:24;:::i;:::-;5947:3;5940:37;5930:53;;:::o;5989:109::-;6070:21;6085:5;6070:21;:::i;:::-;6065:3;6058:34;6048:50;;:::o;6104:360::-;6190:3;6218:38;6250:5;6218:38;:::i;:::-;6272:70;6335:6;6330:3;6272:70;:::i;:::-;6265:77;;6351:52;6396:6;6391:3;6384:4;6377:5;6373:16;6351:52;:::i;:::-;6428:29;6450:6;6428:29;:::i;:::-;6423:3;6419:39;6412:46;;6194:270;;;;;:::o;6470:364::-;6558:3;6586:39;6619:5;6586:39;:::i;:::-;6641:71;6705:6;6700:3;6641:71;:::i;:::-;6634:78;;6721:52;6766:6;6761:3;6754:4;6747:5;6743:16;6721:52;:::i;:::-;6798:29;6820:6;6798:29;:::i;:::-;6793:3;6789:39;6782:46;;6562:272;;;;;:::o;6840:377::-;6946:3;6974:39;7007:5;6974:39;:::i;:::-;7029:89;7111:6;7106:3;7029:89;:::i;:::-;7022:96;;7127:52;7172:6;7167:3;7160:4;7153:5;7149:16;7127:52;:::i;:::-;7204:6;7199:3;7195:16;7188:23;;6950:267;;;;;:::o;7223:366::-;7365:3;7386:67;7450:2;7445:3;7386:67;:::i;:::-;7379:74;;7462:93;7551:3;7462:93;:::i;:::-;7580:2;7575:3;7571:12;7564:19;;7369:220;;;:::o;7595:366::-;7737:3;7758:67;7822:2;7817:3;7758:67;:::i;:::-;7751:74;;7834:93;7923:3;7834:93;:::i;:::-;7952:2;7947:3;7943:12;7936:19;;7741:220;;;:::o;7967:366::-;8109:3;8130:67;8194:2;8189:3;8130:67;:::i;:::-;8123:74;;8206:93;8295:3;8206:93;:::i;:::-;8324:2;8319:3;8315:12;8308:19;;8113:220;;;:::o;8339:366::-;8481:3;8502:67;8566:2;8561:3;8502:67;:::i;:::-;8495:74;;8578:93;8667:3;8578:93;:::i;:::-;8696:2;8691:3;8687:12;8680:19;;8485:220;;;:::o;8711:366::-;8853:3;8874:67;8938:2;8933:3;8874:67;:::i;:::-;8867:74;;8950:93;9039:3;8950:93;:::i;:::-;9068:2;9063:3;9059:12;9052:19;;8857:220;;;:::o;9083:366::-;9225:3;9246:67;9310:2;9305:3;9246:67;:::i;:::-;9239:74;;9322:93;9411:3;9322:93;:::i;:::-;9440:2;9435:3;9431:12;9424:19;;9229:220;;;:::o;9455:366::-;9597:3;9618:67;9682:2;9677:3;9618:67;:::i;:::-;9611:74;;9694:93;9783:3;9694:93;:::i;:::-;9812:2;9807:3;9803:12;9796:19;;9601:220;;;:::o;9827:366::-;9969:3;9990:67;10054:2;10049:3;9990:67;:::i;:::-;9983:74;;10066:93;10155:3;10066:93;:::i;:::-;10184:2;10179:3;10175:12;10168:19;;9973:220;;;:::o;10199:366::-;10341:3;10362:67;10426:2;10421:3;10362:67;:::i;:::-;10355:74;;10438:93;10527:3;10438:93;:::i;:::-;10556:2;10551:3;10547:12;10540:19;;10345:220;;;:::o;10571:118::-;10658:24;10676:5;10658:24;:::i;:::-;10653:3;10646:37;10636:53;;:::o;10695:435::-;10875:3;10897:95;10988:3;10979:6;10897:95;:::i;:::-;10890:102;;11009:95;11100:3;11091:6;11009:95;:::i;:::-;11002:102;;11121:3;11114:10;;10879:251;;;;;:::o;11136:222::-;11229:4;11267:2;11256:9;11252:18;11244:26;;11280:71;11348:1;11337:9;11333:17;11324:6;11280:71;:::i;:::-;11234:124;;;;:::o;11364:640::-;11559:4;11597:3;11586:9;11582:19;11574:27;;11611:71;11679:1;11668:9;11664:17;11655:6;11611:71;:::i;:::-;11692:72;11760:2;11749:9;11745:18;11736:6;11692:72;:::i;:::-;11774;11842:2;11831:9;11827:18;11818:6;11774:72;:::i;:::-;11893:9;11887:4;11883:20;11878:2;11867:9;11863:18;11856:48;11921:76;11992:4;11983:6;11921:76;:::i;:::-;11913:84;;11564:440;;;;;;;:::o;12010:210::-;12097:4;12135:2;12124:9;12120:18;12112:26;;12148:65;12210:1;12199:9;12195:17;12186:6;12148:65;:::i;:::-;12102:118;;;;:::o;12226:313::-;12339:4;12377:2;12366:9;12362:18;12354:26;;12426:9;12420:4;12416:20;12412:1;12401:9;12397:17;12390:47;12454:78;12527:4;12518:6;12454:78;:::i;:::-;12446:86;;12344:195;;;;:::o;12545:419::-;12711:4;12749:2;12738:9;12734:18;12726:26;;12798:9;12792:4;12788:20;12784:1;12773:9;12769:17;12762:47;12826:131;12952:4;12826:131;:::i;:::-;12818:139;;12716:248;;;:::o;12970:419::-;13136:4;13174:2;13163:9;13159:18;13151:26;;13223:9;13217:4;13213:20;13209:1;13198:9;13194:17;13187:47;13251:131;13377:4;13251:131;:::i;:::-;13243:139;;13141:248;;;:::o;13395:419::-;13561:4;13599:2;13588:9;13584:18;13576:26;;13648:9;13642:4;13638:20;13634:1;13623:9;13619:17;13612:47;13676:131;13802:4;13676:131;:::i;:::-;13668:139;;13566:248;;;:::o;13820:419::-;13986:4;14024:2;14013:9;14009:18;14001:26;;14073:9;14067:4;14063:20;14059:1;14048:9;14044:17;14037:47;14101:131;14227:4;14101:131;:::i;:::-;14093:139;;13991:248;;;:::o;14245:419::-;14411:4;14449:2;14438:9;14434:18;14426:26;;14498:9;14492:4;14488:20;14484:1;14473:9;14469:17;14462:47;14526:131;14652:4;14526:131;:::i;:::-;14518:139;;14416:248;;;:::o;14670:419::-;14836:4;14874:2;14863:9;14859:18;14851:26;;14923:9;14917:4;14913:20;14909:1;14898:9;14894:17;14887:47;14951:131;15077:4;14951:131;:::i;:::-;14943:139;;14841:248;;;:::o;15095:419::-;15261:4;15299:2;15288:9;15284:18;15276:26;;15348:9;15342:4;15338:20;15334:1;15323:9;15319:17;15312:47;15376:131;15502:4;15376:131;:::i;:::-;15368:139;;15266:248;;;:::o;15520:419::-;15686:4;15724:2;15713:9;15709:18;15701:26;;15773:9;15767:4;15763:20;15759:1;15748:9;15744:17;15737:47;15801:131;15927:4;15801:131;:::i;:::-;15793:139;;15691:248;;;:::o;15945:419::-;16111:4;16149:2;16138:9;16134:18;16126:26;;16198:9;16192:4;16188:20;16184:1;16173:9;16169:17;16162:47;16226:131;16352:4;16226:131;:::i;:::-;16218:139;;16116:248;;;:::o;16370:222::-;16463:4;16501:2;16490:9;16486:18;16478:26;;16514:71;16582:1;16571:9;16567:17;16558:6;16514:71;:::i;:::-;16468:124;;;;:::o;16598:129::-;16632:6;16659:20;;:::i;:::-;16649:30;;16688:33;16716:4;16708:6;16688:33;:::i;:::-;16639:88;;;:::o;16733:75::-;16766:6;16799:2;16793:9;16783:19;;16773:35;:::o;16814:307::-;16875:4;16965:18;16957:6;16954:30;16951:2;;;16987:18;;:::i;:::-;16951:2;17025:29;17047:6;17025:29;:::i;:::-;17017:37;;17109:4;17103;17099:15;17091:23;;16880:241;;;:::o;17127:98::-;17178:6;17212:5;17206:12;17196:22;;17185:40;;;:::o;17231:99::-;17283:6;17317:5;17311:12;17301:22;;17290:40;;;:::o;17336:168::-;17419:11;17453:6;17448:3;17441:19;17493:4;17488:3;17484:14;17469:29;;17431:73;;;;:::o;17510:169::-;17594:11;17628:6;17623:3;17616:19;17668:4;17663:3;17659:14;17644:29;;17606:73;;;;:::o;17685:148::-;17787:11;17824:3;17809:18;;17799:34;;;;:::o;17839:305::-;17879:3;17898:20;17916:1;17898:20;:::i;:::-;17893:25;;17932:20;17950:1;17932:20;:::i;:::-;17927:25;;18086:1;18018:66;18014:74;18011:1;18008:81;18005:2;;;18092:18;;:::i;:::-;18005:2;18136:1;18133;18129:9;18122:16;;17883:261;;;;:::o;18150:191::-;18190:4;18210:20;18228:1;18210:20;:::i;:::-;18205:25;;18244:20;18262:1;18244:20;:::i;:::-;18239:25;;18283:1;18280;18277:8;18274:2;;;18288:18;;:::i;:::-;18274:2;18333:1;18330;18326:9;18318:17;;18195:146;;;;:::o;18347:96::-;18384:7;18413:24;18431:5;18413:24;:::i;:::-;18402:35;;18392:51;;;:::o;18449:90::-;18483:7;18526:5;18519:13;18512:21;18501:32;;18491:48;;;:::o;18545:149::-;18581:7;18621:66;18614:5;18610:78;18599:89;;18589:105;;;:::o;18700:126::-;18737:7;18777:42;18770:5;18766:54;18755:65;;18745:81;;;:::o;18832:77::-;18869:7;18898:5;18887:16;;18877:32;;;:::o;18915:154::-;18999:6;18994:3;18989;18976:30;19061:1;19052:6;19047:3;19043:16;19036:27;18966:103;;;:::o;19075:307::-;19143:1;19153:113;19167:6;19164:1;19161:13;19153:113;;;19252:1;19247:3;19243:11;19237:18;19233:1;19228:3;19224:11;19217:39;19189:2;19186:1;19182:10;19177:15;;19153:113;;;19284:6;19281:1;19278:13;19275:2;;;19364:1;19355:6;19350:3;19346:16;19339:27;19275:2;19124:258;;;;:::o;19388:320::-;19432:6;19469:1;19463:4;19459:12;19449:22;;19516:1;19510:4;19506:12;19537:18;19527:2;;19593:4;19585:6;19581:17;19571:27;;19527:2;19655;19647:6;19644:14;19624:18;19621:38;19618:2;;;19674:18;;:::i;:::-;19618:2;19439:269;;;;:::o;19714:281::-;19797:27;19819:4;19797:27;:::i;:::-;19789:6;19785:40;19927:6;19915:10;19912:22;19891:18;19879:10;19876:34;19873:62;19870:2;;;19938:18;;:::i;:::-;19870:2;19978:10;19974:2;19967:22;19757:238;;;:::o;20001:180::-;20049:77;20046:1;20039:88;20146:4;20143:1;20136:15;20170:4;20167:1;20160:15;20187:180;20235:77;20232:1;20225:88;20332:4;20329:1;20322:15;20356:4;20353:1;20346:15;20373:180;20421:77;20418:1;20411:88;20518:4;20515:1;20508:15;20542:4;20539:1;20532:15;20559:180;20607:77;20604:1;20597:88;20704:4;20701:1;20694:15;20728:4;20725:1;20718:15;20745:117;20854:1;20851;20844:12;20868:117;20977:1;20974;20967:12;20991:117;21100:1;21097;21090:12;21114:117;21223:1;21220;21213:12;21237:102;21278:6;21329:2;21325:7;21320:2;21313:5;21309:14;21305:28;21295:38;;21285:54;;;:::o;21345:232::-;21485:34;21481:1;21473:6;21469:14;21462:58;21554:15;21549:2;21541:6;21537:15;21530:40;21451:126;:::o;21583:237::-;21723:34;21719:1;21711:6;21707:14;21700:58;21792:20;21787:2;21779:6;21775:15;21768:45;21689:131;:::o;21826:224::-;21966:34;21962:1;21954:6;21950:14;21943:58;22035:7;22030:2;22022:6;22018:15;22011:32;21932:118;:::o;22056:223::-;22196:34;22192:1;22184:6;22180:14;22173:58;22265:6;22260:2;22252:6;22248:15;22241:31;22162:117;:::o;22285:175::-;22425:27;22421:1;22413:6;22409:14;22402:51;22391:69;:::o;22466:228::-;22606:34;22602:1;22594:6;22590:14;22583:58;22675:11;22670:2;22662:6;22658:15;22651:36;22572:122;:::o;22700:174::-;22840:26;22836:1;22828:6;22824:14;22817:50;22806:68;:::o;22880:220::-;23020:34;23016:1;23008:6;23004:14;22997:58;23089:3;23084:2;23076:6;23072:15;23065:28;22986:114;:::o;23106:248::-;23246:34;23242:1;23234:6;23230:14;23223:58;23315:31;23310:2;23302:6;23298:15;23291:56;23212:142;:::o;23360:122::-;23433:24;23451:5;23433:24;:::i;:::-;23426:5;23423:35;23413:2;;23472:1;23469;23462:12;23413:2;23403:79;:::o;23488:116::-;23558:21;23573:5;23558:21;:::i;:::-;23551:5;23548:32;23538:2;;23594:1;23591;23584:12;23538:2;23528:76;:::o;23610:120::-;23682:23;23699:5;23682:23;:::i;:::-;23675:5;23672:34;23662:2;;23720:1;23717;23710:12;23662:2;23652:78;:::o;23736:122::-;23809:24;23827:5;23809:24;:::i;:::-;23802:5;23799:35;23789:2;;23848:1;23845;23838:12;23789:2;23779:79;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1798800","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2924","getApproved(uint256)":"5277","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"3025","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"774","symbol()":"infinite","tokenURI(uint256)":"3467","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,uint256,uint256)":"17","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256,uint256)":"infinite","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"2312","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_ownerOf(uint256)":"2248","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":140,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":144,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":148,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":152,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":158,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122000aa74614e170a6afad09973d90c3e1df55293351efe511fc5b1c653a2cd184664736f6c63430008060033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP 0xAA PUSH21 0x614E170A6AFAD09973D90C3E1DF55293351EFE511F 0xC5 0xB1 0xC6 MSTORE8 LOG2 0xCD XOR CHAINID PUSH5 0x736F6C6343 STOP ADDMOD MOD STOP CALLER ","sourceMap":"194:8964:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122000aa74614e170a6afad09973d90c3e1df55293351efe511fc5b1c653a2cd184664736f6c63430008060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP 0xAA PUSH21 0x614E170A6AFAD09973D90C3E1DF55293351EFE511F 0xC5 0xB1 0xC6 MSTORE8 LOG2 0xCD XOR CHAINID PUSH5 0x736F6C6343 STOP ADDMOD MOD STOP CALLER ","sourceMap":"194:8964:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d644813c2310e99d6a56d1b360dcc7ddb5e1895031f60e8bfce4e329a513162064736f6c63430008060033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD6 DIFFICULTY DUP2 EXTCODECOPY 0x23 LT 0xE9 SWAP14 PUSH11 0x56D1B360DCC7DDB5E18950 BALANCE 0xF6 0xE DUP12 0xFC 0xE4 0xE3 0x29 0xA5 SGT AND KECCAK256 PUSH5 0x736F6C6343 STOP ADDMOD MOD STOP CALLER ","sourceMap":"188:2065:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d644813c2310e99d6a56d1b360dcc7ddb5e1895031f60e8bfce4e329a513162064736f6c63430008060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD6 DIFFICULTY DUP2 EXTCODECOPY 0x23 LT 0xE9 SWAP14 PUSH11 0x56D1B360DCC7DDB5E18950 BALANCE 0xF6 0xE DUP12 0xFC 0xE4 0xE3 0x29 0xA5 SGT AND KECCAK256 PUSH5 0x736F6C6343 STOP ADDMOD MOD STOP CALLER ","sourceMap":"188:2065:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203d44d8ceabcdb899b9dbfff3f46c285a15e8a6757fdc31f8468ab564f24bfc0864736f6c63430008060033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE DIFFICULTY 0xD8 0xCE 0xAB 0xCD 0xB8 SWAP10 0xB9 0xDB SELFDESTRUCT RETURN DELEGATECALL PUSH13 0x285A15E8A6757FDC31F8468AB5 PUSH5 0xF24BFC0864 PUSH20 0x6F6C634300080600330000000000000000000000 ","sourceMap":"202:12302:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203d44d8ceabcdb899b9dbfff3f46c285a15e8a6757fdc31f8468ab564f24bfc0864736f6c63430008060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE DIFFICULTY 0xD8 0xCE 0xAB 0xCD 0xB8 SWAP10 0xB9 0xDB SELFDESTRUCT RETURN DELEGATECALL PUSH13 0x285A15E8A6757FDC31F8468AB5 PUSH5 0xF24BFC0864 PUSH20 0x6F6C634300080600330000000000000000000000 ","sourceMap":"202:12302:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/GreenDAO.sol":{"GreenDAO":{"abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"_dao_uris","outputs":[{"internalType":"string","name":"dao_wallet","type":"string"},{"internalType":"string","name":"dao_uri","type":"string"},{"internalType":"string","name":"finished","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"_ideas_uris","outputs":[{"internalType":"uint256","name":"goal_id","type":"uint256"},{"internalType":"string","name":"ideas_uri","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"all_goal_ideas_votes","outputs":[{"internalType":"uint256","name":"goal_id","type":"uint256"},{"internalType":"uint256","name":"ideas_id","type":"uint256"},{"internalType":"string","name":"wallet","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_dao_wallet","type":"string"},{"internalType":"string","name":"_dao_uri","type":"string"}],"name":"create_dao","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_goal_uri","type":"string"},{"internalType":"uint256","name":"_dao_id","type":"uint256"}],"name":"create_goal","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_goal_id","type":"uint256"},{"internalType":"uint256","name":"_ideas_id","type":"uint256"},{"internalType":"string","name":"_wallet","type":"string"}],"name":"create_goal_ideas_vote","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_ideas_uri","type":"string"},{"internalType":"uint256","name":"_goal_id","type":"uint256"}],"name":"create_ideas","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_dao_id","type":"uint256"}],"name":"dao_uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"get_all_daos","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"get_all_goals","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_dao_id","type":"uint256"}],"name":"get_all_goals_by_dao_id","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"get_all_ideas","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_goal_id","type":"uint256"}],"name":"get_all_ideas_by_goal_id","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_goal_uri","type":"string"}],"name":"get_goal_id_by_goal_uri","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_ideas_uri","type":"string"}],"name":"get_goal_id_from_ideas_uri","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_ideas_uri","type":"string"}],"name":"get_ideas_id_by_ideas_uri","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_goal_id","type":"uint256"},{"internalType":"uint256","name":"_ideas_id","type":"uint256"}],"name":"get_ideas_votes_from_goal","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_goal_id","type":"uint256"}],"name":"goal_uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_ideas_id","type":"uint256"}],"name":"ideas_uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"reset_all","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_dao_id","type":"uint256"},{"internalType":"string","name":"_dao_wallet","type":"string"},{"internalType":"string","name":"_dao_uri","type":"string"}],"name":"set_dao","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_goal_id","type":"uint256"},{"internalType":"string","name":"_goal_uri","type":"string"}],"name":"set_goal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_ideas_id","type":"uint256"},{"internalType":"string","name":"_ideas_uri","type":"string"}],"name":"set_ideas","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_175":{"entryPoint":null,"id":175,"parameterSlots":2,"returnSlots":0},"@_2667":{"entryPoint":null,"id":2667,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":293,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":368,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":419,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":552,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":583,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":593,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":647,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":701,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":755,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x22":{"entryPoint":809,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":856,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":903,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":908,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":913,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":918,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":923,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4093:21","statements":[{"body":{"nodeType":"YulBlock","src":"102:326:21","statements":[{"nodeType":"YulAssignment","src":"112:75:21","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"179:6:21"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"137:41:21"},"nodeType":"YulFunctionCall","src":"137:49:21"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"121:15:21"},"nodeType":"YulFunctionCall","src":"121:66:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"112:5:21"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"203:5:21"},{"name":"length","nodeType":"YulIdentifier","src":"210:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"196:6:21"},"nodeType":"YulFunctionCall","src":"196:21:21"},"nodeType":"YulExpressionStatement","src":"196:21:21"},{"nodeType":"YulVariableDeclaration","src":"226:27:21","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"241:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"248:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"237:3:21"},"nodeType":"YulFunctionCall","src":"237:16:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"230:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"291:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"293:77:21"},"nodeType":"YulFunctionCall","src":"293:79:21"},"nodeType":"YulExpressionStatement","src":"293:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"272:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"277:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"268:3:21"},"nodeType":"YulFunctionCall","src":"268:16:21"},{"name":"end","nodeType":"YulIdentifier","src":"286:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"265:2:21"},"nodeType":"YulFunctionCall","src":"265:25:21"},"nodeType":"YulIf","src":"262:2:21"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"405:3:21"},{"name":"dst","nodeType":"YulIdentifier","src":"410:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"415:6:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"383:21:21"},"nodeType":"YulFunctionCall","src":"383:39:21"},"nodeType":"YulExpressionStatement","src":"383:39:21"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"75:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"80:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"88:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"96:5:21","type":""}],"src":"7:421:21"},{"body":{"nodeType":"YulBlock","src":"521:282:21","statements":[{"body":{"nodeType":"YulBlock","src":"570:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"572:77:21"},"nodeType":"YulFunctionCall","src":"572:79:21"},"nodeType":"YulExpressionStatement","src":"572:79:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"549:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"557:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"545:3:21"},"nodeType":"YulFunctionCall","src":"545:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"564:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"541:3:21"},"nodeType":"YulFunctionCall","src":"541:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"534:6:21"},"nodeType":"YulFunctionCall","src":"534:35:21"},"nodeType":"YulIf","src":"531:2:21"},{"nodeType":"YulVariableDeclaration","src":"662:27:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"682:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"676:5:21"},"nodeType":"YulFunctionCall","src":"676:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"666:6:21","type":""}]},{"nodeType":"YulAssignment","src":"698:99:21","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"770:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"778:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"766:3:21"},"nodeType":"YulFunctionCall","src":"766:17:21"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:21"},{"name":"end","nodeType":"YulIdentifier","src":"793:3:21"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"707:58:21"},"nodeType":"YulFunctionCall","src":"707:90:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"698:5:21"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"499:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"507:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"515:5:21","type":""}],"src":"448:355:21"},{"body":{"nodeType":"YulBlock","src":"923:739:21","statements":[{"body":{"nodeType":"YulBlock","src":"969:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"971:77:21"},"nodeType":"YulFunctionCall","src":"971:79:21"},"nodeType":"YulExpressionStatement","src":"971:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"944:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"953:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"940:3:21"},"nodeType":"YulFunctionCall","src":"940:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"965:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"936:3:21"},"nodeType":"YulFunctionCall","src":"936:32:21"},"nodeType":"YulIf","src":"933:2:21"},{"nodeType":"YulBlock","src":"1062:291:21","statements":[{"nodeType":"YulVariableDeclaration","src":"1077:38:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1101:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1112:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1097:3:21"},"nodeType":"YulFunctionCall","src":"1097:17:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1091:5:21"},"nodeType":"YulFunctionCall","src":"1091:24:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1081:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1162:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"1164:77:21"},"nodeType":"YulFunctionCall","src":"1164:79:21"},"nodeType":"YulExpressionStatement","src":"1164:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1134:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1142:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1131:2:21"},"nodeType":"YulFunctionCall","src":"1131:30:21"},"nodeType":"YulIf","src":"1128:2:21"},{"nodeType":"YulAssignment","src":"1259:84:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1315:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"1326:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1311:3:21"},"nodeType":"YulFunctionCall","src":"1311:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1335:7:21"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"1269:41:21"},"nodeType":"YulFunctionCall","src":"1269:74:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1259:6:21"}]}]},{"nodeType":"YulBlock","src":"1363:292:21","statements":[{"nodeType":"YulVariableDeclaration","src":"1378:39:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1402:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1413:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1398:3:21"},"nodeType":"YulFunctionCall","src":"1398:18:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1392:5:21"},"nodeType":"YulFunctionCall","src":"1392:25:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1382:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1464:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"1466:77:21"},"nodeType":"YulFunctionCall","src":"1466:79:21"},"nodeType":"YulExpressionStatement","src":"1466:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1436:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1444:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1433:2:21"},"nodeType":"YulFunctionCall","src":"1433:30:21"},"nodeType":"YulIf","src":"1430:2:21"},{"nodeType":"YulAssignment","src":"1561:84:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1617:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"1628:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1613:3:21"},"nodeType":"YulFunctionCall","src":"1613:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1637:7:21"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"1571:41:21"},"nodeType":"YulFunctionCall","src":"1571:74:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1561:6:21"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"885:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"896:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"908:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"916:6:21","type":""}],"src":"809:853:21"},{"body":{"nodeType":"YulBlock","src":"1709:88:21","statements":[{"nodeType":"YulAssignment","src":"1719:30:21","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1729:18:21"},"nodeType":"YulFunctionCall","src":"1729:20:21"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1719:6:21"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1778:6:21"},{"name":"size","nodeType":"YulIdentifier","src":"1786:4:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1758:19:21"},"nodeType":"YulFunctionCall","src":"1758:33:21"},"nodeType":"YulExpressionStatement","src":"1758:33:21"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1693:4:21","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1702:6:21","type":""}],"src":"1668:129:21"},{"body":{"nodeType":"YulBlock","src":"1843:35:21","statements":[{"nodeType":"YulAssignment","src":"1853:19:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1869:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1863:5:21"},"nodeType":"YulFunctionCall","src":"1863:9:21"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1853:6:21"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1836:6:21","type":""}],"src":"1803:75:21"},{"body":{"nodeType":"YulBlock","src":"1951:241:21","statements":[{"body":{"nodeType":"YulBlock","src":"2056:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2058:16:21"},"nodeType":"YulFunctionCall","src":"2058:18:21"},"nodeType":"YulExpressionStatement","src":"2058:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2028:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2036:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2025:2:21"},"nodeType":"YulFunctionCall","src":"2025:30:21"},"nodeType":"YulIf","src":"2022:2:21"},{"nodeType":"YulAssignment","src":"2088:37:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2118:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2096:21:21"},"nodeType":"YulFunctionCall","src":"2096:29:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2088:4:21"}]},{"nodeType":"YulAssignment","src":"2162:23:21","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2174:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"2180:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2170:3:21"},"nodeType":"YulFunctionCall","src":"2170:15:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2162:4:21"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1935:6:21","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1946:4:21","type":""}],"src":"1884:308:21"},{"body":{"nodeType":"YulBlock","src":"2247:258:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2257:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"2266:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2261:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2326:63:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2351:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"2356:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2347:3:21"},"nodeType":"YulFunctionCall","src":"2347:11:21"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2370:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"2375:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2366:3:21"},"nodeType":"YulFunctionCall","src":"2366:11:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2360:5:21"},"nodeType":"YulFunctionCall","src":"2360:18:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2340:6:21"},"nodeType":"YulFunctionCall","src":"2340:39:21"},"nodeType":"YulExpressionStatement","src":"2340:39:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2287:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"2290:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2284:2:21"},"nodeType":"YulFunctionCall","src":"2284:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2298:19:21","statements":[{"nodeType":"YulAssignment","src":"2300:15:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2309:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"2312:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2305:3:21"},"nodeType":"YulFunctionCall","src":"2305:10:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2300:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"2280:3:21","statements":[]},"src":"2276:113:21"},{"body":{"nodeType":"YulBlock","src":"2423:76:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2473:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"2478:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2469:3:21"},"nodeType":"YulFunctionCall","src":"2469:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"2487:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2462:6:21"},"nodeType":"YulFunctionCall","src":"2462:27:21"},"nodeType":"YulExpressionStatement","src":"2462:27:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2404:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"2407:6:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2401:2:21"},"nodeType":"YulFunctionCall","src":"2401:13:21"},"nodeType":"YulIf","src":"2398:2:21"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2229:3:21","type":""},{"name":"dst","nodeType":"YulTypedName","src":"2234:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"2239:6:21","type":""}],"src":"2198:307:21"},{"body":{"nodeType":"YulBlock","src":"2562:269:21","statements":[{"nodeType":"YulAssignment","src":"2572:22:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2586:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"2592:1:21","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2582:3:21"},"nodeType":"YulFunctionCall","src":"2582:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2572:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"2603:38:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2633:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"2639:1:21","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2629:3:21"},"nodeType":"YulFunctionCall","src":"2629:12:21"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2607:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2680:51:21","statements":[{"nodeType":"YulAssignment","src":"2694:27:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2708:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2716:4:21","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2704:3:21"},"nodeType":"YulFunctionCall","src":"2704:17:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2694:6:21"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2660:18:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2653:6:21"},"nodeType":"YulFunctionCall","src":"2653:26:21"},"nodeType":"YulIf","src":"2650:2:21"},{"body":{"nodeType":"YulBlock","src":"2783:42:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"2797:16:21"},"nodeType":"YulFunctionCall","src":"2797:18:21"},"nodeType":"YulExpressionStatement","src":"2797:18:21"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2747:18:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2770:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2778:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2767:2:21"},"nodeType":"YulFunctionCall","src":"2767:14:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2744:2:21"},"nodeType":"YulFunctionCall","src":"2744:38:21"},"nodeType":"YulIf","src":"2741:2:21"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2546:4:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2555:6:21","type":""}],"src":"2511:320:21"},{"body":{"nodeType":"YulBlock","src":"2880:238:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2890:58:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2912:6:21"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2942:4:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2920:21:21"},"nodeType":"YulFunctionCall","src":"2920:27:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2908:3:21"},"nodeType":"YulFunctionCall","src":"2908:40:21"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2894:10:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3059:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3061:16:21"},"nodeType":"YulFunctionCall","src":"3061:18:21"},"nodeType":"YulExpressionStatement","src":"3061:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3002:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"3014:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2999:2:21"},"nodeType":"YulFunctionCall","src":"2999:34:21"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3038:10:21"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3050:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3035:2:21"},"nodeType":"YulFunctionCall","src":"3035:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2996:2:21"},"nodeType":"YulFunctionCall","src":"2996:62:21"},"nodeType":"YulIf","src":"2993:2:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3097:2:21","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3101:10:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3090:6:21"},"nodeType":"YulFunctionCall","src":"3090:22:21"},"nodeType":"YulExpressionStatement","src":"3090:22:21"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2866:6:21","type":""},{"name":"size","nodeType":"YulTypedName","src":"2874:4:21","type":""}],"src":"2837:281:21"},{"body":{"nodeType":"YulBlock","src":"3152:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3169:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3172:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3162:6:21"},"nodeType":"YulFunctionCall","src":"3162:88:21"},"nodeType":"YulExpressionStatement","src":"3162:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3266:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3269:4:21","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3259:6:21"},"nodeType":"YulFunctionCall","src":"3259:15:21"},"nodeType":"YulExpressionStatement","src":"3259:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3290:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3293:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3283:6:21"},"nodeType":"YulFunctionCall","src":"3283:15:21"},"nodeType":"YulExpressionStatement","src":"3283:15:21"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"3124:180:21"},{"body":{"nodeType":"YulBlock","src":"3338:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3355:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3358:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3348:6:21"},"nodeType":"YulFunctionCall","src":"3348:88:21"},"nodeType":"YulExpressionStatement","src":"3348:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3452:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3455:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3445:6:21"},"nodeType":"YulFunctionCall","src":"3445:15:21"},"nodeType":"YulExpressionStatement","src":"3445:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3476:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3479:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3469:6:21"},"nodeType":"YulFunctionCall","src":"3469:15:21"},"nodeType":"YulExpressionStatement","src":"3469:15:21"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3310:180:21"},{"body":{"nodeType":"YulBlock","src":"3585:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3602:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3605:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3595:6:21"},"nodeType":"YulFunctionCall","src":"3595:12:21"},"nodeType":"YulExpressionStatement","src":"3595:12:21"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"3496:117:21"},{"body":{"nodeType":"YulBlock","src":"3708:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3725:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3728:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3718:6:21"},"nodeType":"YulFunctionCall","src":"3718:12:21"},"nodeType":"YulExpressionStatement","src":"3718:12:21"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"3619:117:21"},{"body":{"nodeType":"YulBlock","src":"3831:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3848:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3851:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3841:6:21"},"nodeType":"YulFunctionCall","src":"3841:12:21"},"nodeType":"YulExpressionStatement","src":"3841:12:21"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"3742:117:21"},{"body":{"nodeType":"YulBlock","src":"3954:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3971:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3974:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3964:6:21"},"nodeType":"YulFunctionCall","src":"3964:12:21"},"nodeType":"YulExpressionStatement","src":"3964:12:21"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"3865:117:21"},{"body":{"nodeType":"YulBlock","src":"4036:54:21","statements":[{"nodeType":"YulAssignment","src":"4046:38:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4064:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"4071:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4060:3:21"},"nodeType":"YulFunctionCall","src":"4060:14:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4080:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4076:3:21"},"nodeType":"YulFunctionCall","src":"4076:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4056:3:21"},"nodeType":"YulFunctionCall","src":"4056:28:21"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4046:6:21"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4019:5:21","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4029:6:21","type":""}],"src":"3988:102:21"}]},"contents":"{\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n}\n","id":21,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162004673380380620046738339818101604052810190620000379190620001a3565b818181600090805190602001906200005192919062000075565b5080600190805190602001906200006a92919062000075565b5050505050620003ac565b8280546200008390620002bd565b90600052602060002090601f016020900481019282620000a75760008555620000f3565b82601f10620000c257805160ff1916838001178555620000f3565b82800160010185558215620000f3579182015b82811115620000f2578251825591602001919060010190620000d5565b5b50905062000102919062000106565b5090565b5b808211156200012157600081600090555060010162000107565b5090565b60006200013c620001368462000251565b62000228565b9050828152602081018484840111156200015b576200015a6200038c565b5b6200016884828562000287565b509392505050565b600082601f83011262000188576200018762000387565b5b81516200019a84826020860162000125565b91505092915050565b60008060408385031215620001bd57620001bc62000396565b5b600083015167ffffffffffffffff811115620001de57620001dd62000391565b5b620001ec8582860162000170565b925050602083015167ffffffffffffffff81111562000210576200020f62000391565b5b6200021e8582860162000170565b9150509250929050565b60006200023462000247565b9050620002428282620002f3565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026f576200026e62000358565b5b6200027a826200039b565b9050602081019050919050565b60005b83811015620002a75780820151818401526020810190506200028a565b83811115620002b7576000848401525b50505050565b60006002820490506001821680620002d657607f821691505b60208210811415620002ed57620002ec62000329565b5b50919050565b620002fe826200039b565b810181811067ffffffffffffffff8211171562000320576200031f62000358565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6142b780620003bc6000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c806371085cab11610125578063b16060a6116100ad578063c29595c51161007c578063c29595c5146106ea578063c4c2e36414610706578063c87b56dd14610736578063e32acc1a14610766578063e985e9c5146107965761021c565b8063b16060a61461068a578063b88d4fde14610694578063c04e7430146106b0578063c04fe978146106cc5761021c565b806395d89b41116100f457806395d89b41146105d257806397ee7606146105f0578063a1ca91781461060e578063a22cb4651461063e578063aa4cdf2a1461065a5761021c565b806371085cab1461052657806382fcc73214610556578063881de858146105865780638d3d2595146105a25761021c565b806327a568b9116101a8578063468d0c8011610177578063468d0c80146104355780634be7adb5146104665780635d907da1146104965780636352211e146104c657806370a08231146104f65761021c565b806327a568b91461039957806329b56f60146103cb5780632d9cb1ab146103e957806342842e0e146104195761021c565b8063109ac970116101ef578063109ac970146102bb578063131d44f2146102eb5780631ba44c4c1461031b5780631e9ac9f51461034d57806323b872dd1461037d5761021c565b806301ffc9a71461022157806306fdde0314610251578063081812fc1461026f578063095ea7b31461029f575b600080fd5b61023b600480360381019061023691906131fe565b6107c6565b6040516102489190613948565b60405180910390f35b6102596108a8565b6040516102669190613963565b60405180910390f35b61028960048036038101906102849190613375565b61093a565b60405161029691906138bf565b60405180910390f35b6102b960048036038101906102b491906131be565b610980565b005b6102d560048036038101906102d09190613375565b610a98565b6040516102e29190613926565b60405180910390f35b61030560048036038101906103009190613375565b610c08565b6040516103129190613926565b60405180910390f35b61033560048036038101906103309190613375565b610d78565b60405161034493929190613b3c565b60405180910390f35b61036760048036038101906103629190613258565b610e2a565b6040516103749190613af1565b60405180910390f35b610397600480360381019061039291906130a8565b610e9c565b005b6103b360048036038101906103ae9190613375565b610efc565b6040516103c293929190613985565b60405180910390f35b6103d36110be565b6040516103e09190613926565b60405180910390f35b61040360048036038101906103fe9190613319565b6111f9565b6040516104109190613af1565b60405180910390f35b610433600480360381019061042e91906130a8565b611272565b005b61044f600480360381019061044a9190613375565b611292565b60405161045d929190613b0c565b60405180910390f35b610480600480360381019061047b9190613489565b61133e565b60405161048d9190613926565b60405180910390f35b6104b060048036038101906104ab9190613375565b6114d0565b6040516104bd9190613963565b60405180910390f35b6104e060048036038101906104db9190613375565b611578565b6040516104ed91906138bf565b60405180910390f35b610510600480360381019061050b919061303b565b6115ff565b60405161051d9190613af1565b60405180910390f35b610540600480360381019061053b9190613319565b6116b7565b60405161054d9190613af1565b60405180910390f35b610570600480360381019061056b91906134c9565b611730565b60405161057d9190613af1565b60405180910390f35b6105a0600480360381019061059b91906133fe565b6117ba565b005b6105bc60048036038101906105b79190613375565b611815565b6040516105c99190613963565b60405180910390f35b6105da6118bd565b6040516105e79190613963565b60405180910390f35b6105f861194f565b6040516106059190613926565b60405180910390f35b61062860048036038101906106239190613258565b611a8a565b6040516106359190613af1565b60405180910390f35b6106586004803603810190610653919061317e565b611afc565b005b610674600480360381019061066f9190613258565b611b12565b6040516106819190613af1565b60405180910390f35b610692611b9a565b005b6106ae60048036038101906106a991906130fb565b611d18565b005b6106ca60048036038101906106c591906133a2565b611d7a565b005b6106d4611da9565b6040516106e19190613926565b60405180910390f35b61070460048036038101906106ff91906133a2565b611ee4565b005b610720600480360381019061071b91906132a1565b611f13565b60405161072d9190613af1565b60405180910390f35b610750600480360381019061074b9190613375565b611ff7565b60405161075d9190613963565b60405180910390f35b610780600480360381019061077b9190613375565b61205f565b60405161078d9190613963565b60405180910390f35b6107b060048036038101906107ab9190613068565b612107565b6040516107bd9190613948565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061089157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806108a157506108a08261219b565b5b9050919050565b6060600080546108b790613dee565b80601f01602080910402602001604051908101604052809291908181526020018280546108e390613dee565b80156109305780601f1061090557610100808354040283529160200191610930565b820191906000526020600020905b81548152906001019060200180831161091357829003601f168201915b5050505050905090565b600061094582612205565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061098b82611578565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f390613ab1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610a1b612250565b73ffffffffffffffffffffffffffffffffffffffff161480610a4a5750610a4981610a44612250565b612107565b5b610a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8090613ad1565b60405180910390fd5b610a938383612258565b505050565b6060600060075467ffffffffffffffff811115610ab857610ab7613f56565b5b604051908082528060200260200182016040528015610aeb57816020015b6060815260200190600190039081610ad65790505b509050600080600090505b600754811015610bfd5784600b6000838152602001908152602001600020600001541415610bea57600b60008281526020019081526020016000206001018054610b3f90613dee565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6b90613dee565b8015610bb85780601f10610b8d57610100808354040283529160200191610bb8565b820191906000526020600020905b815481529060010190602001808311610b9b57829003601f168201915b5050505050838381518110610bd057610bcf613f27565b5b60200260200101819052508180610be690613e51565b9250505b8080610bf590613e51565b915050610af6565b508192505050919050565b6060600060085467ffffffffffffffff811115610c2857610c27613f56565b5b604051908082528060200260200182016040528015610c5b57816020015b6060815260200190600190039081610c465790505b509050600080600090505b600854811015610d6d5784600c6000838152602001908152602001600020600001541415610d4c57600c60008281526020019081526020016000206001018054610caf90613dee565b80601f0160208091040260200160405190810160405280929190818152602001828054610cdb90613dee565b8015610d285780601f10610cfd57610100808354040283529160200191610d28565b820191906000526020600020905b815481529060010190602001808311610d0b57829003601f168201915b5050505050838381518110610d4057610d3f613f27565b5b60200260200101819052505b8180610d5790613e51565b9250508080610d6590613e51565b915050610c66565b508192505050919050565b600d602052806000526040600020600091509050806000015490806001015490806002018054610da790613dee565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd390613dee565b8015610e205780601f10610df557610100808354040283529160200191610e20565b820191906000526020600020905b815481529060010190602001808311610e0357829003601f168201915b5050505050905083565b600080600090505b600754811015610e91578280519060200120600b6000838152602001908152602001600020600101604051610e679190613884565b60405180910390201415610e7e5780915050610e97565b8080610e8990613e51565b915050610e32565b50600090505b919050565b610ead610ea7612250565b82612311565b610eec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee3906139d1565b60405180910390fd5b610ef78383836123a6565b505050565b600a602052806000526040600020600091509050806000018054610f1f90613dee565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4b90613dee565b8015610f985780601f10610f6d57610100808354040283529160200191610f98565b820191906000526020600020905b815481529060010190602001808311610f7b57829003601f168201915b505050505090806001018054610fad90613dee565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd990613dee565b80156110265780601f10610ffb57610100808354040283529160200191611026565b820191906000526020600020905b81548152906001019060200180831161100957829003601f168201915b50505050509080600201805461103b90613dee565b80601f016020809104026020016040519081016040528092919081815260200182805461106790613dee565b80156110b45780601f10611089576101008083540402835291602001916110b4565b820191906000526020600020905b81548152906001019060200180831161109757829003601f168201915b5050505050905083565b6060600060075467ffffffffffffffff8111156110de576110dd613f56565b5b60405190808252806020026020018201604052801561111157816020015b60608152602001906001900390816110fc5790505b50905060005b6007548110156111f157600b6000828152602001908152602001600020600101805461114290613dee565b80601f016020809104026020016040519081016040528092919081815260200182805461116e90613dee565b80156111bb5780601f10611190576101008083540402835291602001916111bb565b820191906000526020600020905b81548152906001019060200180831161119e57829003601f168201915b50505050508282815181106111d3576111d2613f27565b5b602002602001018190525080806111e990613e51565b915050611117565b508091505090565b6000604051806040016040528083815260200184815250600c6000600854815260200190815260200160002060008201518160000155602082015181600101908051906020019061124b929190612e0f565b509050506008600081548092919061126290613e51565b9190505550600854905092915050565b61128d83838360405180602001604052806000815250611d18565b505050565b600c6020528060005260406000206000915090508060000154908060010180546112bb90613dee565b80601f01602080910402602001604051908101604052809291908181526020018280546112e790613dee565b80156113345780601f1061130957610100808354040283529160200191611334565b820191906000526020600020905b81548152906001019060200180831161131757829003601f168201915b5050505050905082565b6060600060095467ffffffffffffffff81111561135e5761135d613f56565b5b60405190808252806020026020018201604052801561139157816020015b606081526020019060019003908161137c5790505b509050600080600090505b6009548110156114c45785600d6000838152602001908152602001600020600001541480156113e0575084600d600083815260200190815260200160002060010154145b156114a357600d6000828152602001908152602001600020600201805461140690613dee565b80601f016020809104026020016040519081016040528092919081815260200182805461143290613dee565b801561147f5780601f106114545761010080835404028352916020019161147f565b820191906000526020600020905b81548152906001019060200180831161146257829003601f168201915b505050505083838151811061149757611496613f27565b5b60200260200101819052505b81806114ae90613e51565b92505080806114bc90613e51565b91505061139c565b50819250505092915050565b6060600a600083815260200190815260200160002060010180546114f390613dee565b80601f016020809104026020016040519081016040528092919081815260200182805461151f90613dee565b801561156c5780601f106115415761010080835404028352916020019161156c565b820191906000526020600020905b81548152906001019060200180831161154f57829003601f168201915b50505050509050919050565b600080611584836126a0565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156115f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ed90613a91565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611670576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166790613a71565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000604051806040016040528083815260200184815250600b60006007548152602001908152602001600020600082015181600001556020820151816001019080519060200190611709929190612e0f565b509050506007600081548092919061172090613e51565b9190505550600754905092915050565b6000604051806060016040528085815260200184815260200183815250600d6000600954815260200190815260200160002060008201518160000155602082015181600101556040820151816002019080519060200190611792929190612e0f565b50905050600960008154809291906117a990613e51565b919050555060095490509392505050565b81600a600085815260200190815260200160002060000190805190602001906117e4929190612e0f565b5080600a6000858152602001908152602001600020600101908051906020019061180f929190612e0f565b50505050565b6060600c6000838152602001908152602001600020600101805461183890613dee565b80601f016020809104026020016040519081016040528092919081815260200182805461186490613dee565b80156118b15780601f10611886576101008083540402835291602001916118b1565b820191906000526020600020905b81548152906001019060200180831161189457829003601f168201915b50505050509050919050565b6060600180546118cc90613dee565b80601f01602080910402602001604051908101604052809291908181526020018280546118f890613dee565b80156119455780601f1061191a57610100808354040283529160200191611945565b820191906000526020600020905b81548152906001019060200180831161192857829003601f168201915b5050505050905090565b6060600060085467ffffffffffffffff81111561196f5761196e613f56565b5b6040519080825280602002602001820160405280156119a257816020015b606081526020019060019003908161198d5790505b50905060005b600854811015611a8257600c600082815260200190815260200160002060010180546119d390613dee565b80601f01602080910402602001604051908101604052809291908181526020018280546119ff90613dee565b8015611a4c5780601f10611a2157610100808354040283529160200191611a4c565b820191906000526020600020905b815481529060010190602001808311611a2f57829003601f168201915b5050505050828281518110611a6457611a63613f27565b5b60200260200101819052508080611a7a90613e51565b9150506119a8565b508091505090565b600080600090505b600854811015611af1578280519060200120600c6000838152602001908152602001600020600101604051611ac79190613884565b60405180910390201415611ade5780915050611af7565b8080611ae990613e51565b915050611a92565b50600090505b919050565b611b0e611b07612250565b83836126dd565b5050565b600080600090505b600854811015611b8f578280519060200120600c6000838152602001908152602001600020600101604051611b4f9190613884565b60405180910390201415611b7c57600c600082815260200190815260200160002060000154915050611b95565b8080611b8790613e51565b915050611b1a565b50600090505b919050565b600060068190555060006007819055506000600881905550600060098190555060005b600654811015611c2057600a600082815260200190815260200160002060008082016000611beb9190612e95565b600182016000611bfb9190612e95565b600282016000611c0b9190612e95565b50508080611c1890613e51565b915050611bbd565b5060005b600754811015611c6f57600b6000828152602001908152602001600020600080820160009055600182016000611c5a9190612e95565b50508080611c6790613e51565b915050611c24565b5060005b600854811015611cbe57600c6000828152602001908152602001600020600080820160009055600182016000611ca99190612e95565b50508080611cb690613e51565b915050611c73565b5060005b600954811015611d1557600d60008281526020019081526020016000206000808201600090556001820160009055600282016000611d009190612e95565b50508080611d0d90613e51565b915050611cc2565b50565b611d29611d23612250565b83612311565b611d68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5f906139d1565b60405180910390fd5b611d748484848461284a565b50505050565b80600c60008481526020019081526020016000206001019080519060200190611da4929190612e0f565b505050565b6060600060065467ffffffffffffffff811115611dc957611dc8613f56565b5b604051908082528060200260200182016040528015611dfc57816020015b6060815260200190600190039081611de75790505b50905060005b600654811015611edc57600a60008281526020019081526020016000206001018054611e2d90613dee565b80601f0160208091040260200160405190810160405280929190818152602001828054611e5990613dee565b8015611ea65780601f10611e7b57610100808354040283529160200191611ea6565b820191906000526020600020905b815481529060010190602001808311611e8957829003601f168201915b5050505050828281518110611ebe57611ebd613f27565b5b60200260200101819052508080611ed490613e51565b915050611e02565b508091505090565b80600b60008481526020019081526020016000206001019080519060200190611f0e929190612e0f565b505050565b600060405180606001604052808481526020018381526020016040518060400160405280600581526020017f46616c7365000000000000000000000000000000000000000000000000000000815250815250600a600060065481526020019081526020016000206000820151816000019080519060200190611f96929190612e0f565b506020820151816001019080519060200190611fb3929190612e0f565b506040820151816002019080519060200190611fd0929190612e0f565b5090505060066000815480929190611fe790613e51565b9190505550600654905092915050565b606061200282612205565b600061200c6128a6565b9050600081511161202c5760405180602001604052806000815250612057565b80612036846128bd565b60405160200161204792919061389b565b6040516020818303038152906040525b915050919050565b6060600b6000838152602001908152602001600020600101805461208290613dee565b80601f01602080910402602001604051908101604052809291908181526020018280546120ae90613dee565b80156120fb5780601f106120d0576101008083540402835291602001916120fb565b820191906000526020600020905b8154815290600101906020018083116120de57829003601f168201915b50505050509050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61220e81612995565b61224d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224490613a91565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166122cb83611578565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061231d83611578565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061235f575061235e8185612107565b5b8061239d57508373ffffffffffffffffffffffffffffffffffffffff166123858461093a565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166123c682611578565b73ffffffffffffffffffffffffffffffffffffffff161461241c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161241390613a11565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561248c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248390613a31565b60405180910390fd5b61249983838360016129d6565b8273ffffffffffffffffffffffffffffffffffffffff166124b982611578565b73ffffffffffffffffffffffffffffffffffffffff161461250f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250690613a11565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461269b8383836001612afc565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561274c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274390613a51565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161283d9190613948565b60405180910390a3505050565b6128558484846123a6565b61286184848484612b02565b6128a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612897906139f1565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060600060016128cc84612c99565b01905060008167ffffffffffffffff8111156128eb576128ea613f56565b5b6040519080825280601f01601f19166020018201604052801561291d5781602001600182028036833780820191505090505b509050600082602001820190505b60011561298a578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161297457612973613ec9565b5b04945060008514156129855761298a565b61292b565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166129b7836126a0565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6001811115612af657600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612a6a5780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a629190613d04565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612af55780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612aed9190613cae565b925050819055505b5b50505050565b50505050565b6000612b238473ffffffffffffffffffffffffffffffffffffffff16612dec565b15612c8c578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612b4c612250565b8786866040518563ffffffff1660e01b8152600401612b6e94939291906138da565b602060405180830381600087803b158015612b8857600080fd5b505af1925050508015612bb957506040513d601f19601f82011682018060405250810190612bb6919061322b565b60015b612c3c573d8060008114612be9576040519150601f19603f3d011682016040523d82523d6000602084013e612bee565b606091505b50600081511415612c34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c2b906139f1565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612c91565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612cf7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612ced57612cec613ec9565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612d34576d04ee2d6d415b85acef81000000008381612d2a57612d29613ec9565b5b0492506020810190505b662386f26fc100008310612d6357662386f26fc100008381612d5957612d58613ec9565b5b0492506010810190505b6305f5e1008310612d8c576305f5e1008381612d8257612d81613ec9565b5b0492506008810190505b6127108310612db1576127108381612da757612da6613ec9565b5b0492506004810190505b60648310612dd45760648381612dca57612dc9613ec9565b5b0492506002810190505b600a8310612de3576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054612e1b90613dee565b90600052602060002090601f016020900481019282612e3d5760008555612e84565b82601f10612e5657805160ff1916838001178555612e84565b82800160010185558215612e84579182015b82811115612e83578251825591602001919060010190612e68565b5b509050612e919190612ed5565b5090565b508054612ea190613dee565b6000825580601f10612eb35750612ed2565b601f016020900490600052602060002090810190612ed19190612ed5565b5b50565b5b80821115612eee576000816000905550600101612ed6565b5090565b6000612f05612f0084613b9f565b613b7a565b905082815260208101848484011115612f2157612f20613f8a565b5b612f2c848285613dac565b509392505050565b6000612f47612f4284613bd0565b613b7a565b905082815260208101848484011115612f6357612f62613f8a565b5b612f6e848285613dac565b509392505050565b600081359050612f8581614225565b92915050565b600081359050612f9a8161423c565b92915050565b600081359050612faf81614253565b92915050565b600081519050612fc481614253565b92915050565b600082601f830112612fdf57612fde613f85565b5b8135612fef848260208601612ef2565b91505092915050565b600082601f83011261300d5761300c613f85565b5b813561301d848260208601612f34565b91505092915050565b6000813590506130358161426a565b92915050565b60006020828403121561305157613050613f94565b5b600061305f84828501612f76565b91505092915050565b6000806040838503121561307f5761307e613f94565b5b600061308d85828601612f76565b925050602061309e85828601612f76565b9150509250929050565b6000806000606084860312156130c1576130c0613f94565b5b60006130cf86828701612f76565b93505060206130e086828701612f76565b92505060406130f186828701613026565b9150509250925092565b6000806000806080858703121561311557613114613f94565b5b600061312387828801612f76565b945050602061313487828801612f76565b935050604061314587828801613026565b925050606085013567ffffffffffffffff81111561316657613165613f8f565b5b61317287828801612fca565b91505092959194509250565b6000806040838503121561319557613194613f94565b5b60006131a385828601612f76565b92505060206131b485828601612f8b565b9150509250929050565b600080604083850312156131d5576131d4613f94565b5b60006131e385828601612f76565b92505060206131f485828601613026565b9150509250929050565b60006020828403121561321457613213613f94565b5b600061322284828501612fa0565b91505092915050565b60006020828403121561324157613240613f94565b5b600061324f84828501612fb5565b91505092915050565b60006020828403121561326e5761326d613f94565b5b600082013567ffffffffffffffff81111561328c5761328b613f8f565b5b61329884828501612ff8565b91505092915050565b600080604083850312156132b8576132b7613f94565b5b600083013567ffffffffffffffff8111156132d6576132d5613f8f565b5b6132e285828601612ff8565b925050602083013567ffffffffffffffff81111561330357613302613f8f565b5b61330f85828601612ff8565b9150509250929050565b600080604083850312156133305761332f613f94565b5b600083013567ffffffffffffffff81111561334e5761334d613f8f565b5b61335a85828601612ff8565b925050602061336b85828601613026565b9150509250929050565b60006020828403121561338b5761338a613f94565b5b600061339984828501613026565b91505092915050565b600080604083850312156133b9576133b8613f94565b5b60006133c785828601613026565b925050602083013567ffffffffffffffff8111156133e8576133e7613f8f565b5b6133f485828601612ff8565b9150509250929050565b60008060006060848603121561341757613416613f94565b5b600061342586828701613026565b935050602084013567ffffffffffffffff81111561344657613445613f8f565b5b61345286828701612ff8565b925050604084013567ffffffffffffffff81111561347357613472613f8f565b5b61347f86828701612ff8565b9150509250925092565b600080604083850312156134a05761349f613f94565b5b60006134ae85828601613026565b92505060206134bf85828601613026565b9150509250929050565b6000806000606084860312156134e2576134e1613f94565b5b60006134f086828701613026565b935050602061350186828701613026565b925050604084013567ffffffffffffffff81111561352257613521613f8f565b5b61352e86828701612ff8565b9150509250925092565b60006135448383613697565b905092915050565b61355581613d38565b82525050565b600061356682613c26565b6135708185613c54565b93508360208202850161358285613c01565b8060005b858110156135be578484038952815161359f8582613538565b94506135aa83613c47565b925060208a01995050600181019050613586565b50829750879550505050505092915050565b6135d981613d4a565b82525050565b60006135ea82613c31565b6135f48185613c65565b9350613604818560208601613dbb565b61360d81613f99565b840191505092915050565b6000815461362581613dee565b61362f8186613c76565b9450600182166000811461364a576001811461365b5761368e565b60ff1983168652818601935061368e565b61366485613c11565b60005b8381101561368657815481890152600182019150602081019050613667565b838801955050505b50505092915050565b60006136a282613c3c565b6136ac8185613c81565b93506136bc818560208601613dbb565b6136c581613f99565b840191505092915050565b60006136db82613c3c565b6136e58185613c92565b93506136f5818560208601613dbb565b6136fe81613f99565b840191505092915050565b600061371482613c3c565b61371e8185613ca3565b935061372e818560208601613dbb565b80840191505092915050565b6000613747602d83613c92565b915061375282613faa565b604082019050919050565b600061376a603283613c92565b915061377582613ff9565b604082019050919050565b600061378d602583613c92565b915061379882614048565b604082019050919050565b60006137b0602483613c92565b91506137bb82614097565b604082019050919050565b60006137d3601983613c92565b91506137de826140e6565b602082019050919050565b60006137f6602983613c92565b91506138018261410f565b604082019050919050565b6000613819601883613c92565b91506138248261415e565b602082019050919050565b600061383c602183613c92565b915061384782614187565b604082019050919050565b600061385f603d83613c92565b915061386a826141d6565b604082019050919050565b61387e81613da2565b82525050565b60006138908284613618565b915081905092915050565b60006138a78285613709565b91506138b38284613709565b91508190509392505050565b60006020820190506138d4600083018461354c565b92915050565b60006080820190506138ef600083018761354c565b6138fc602083018661354c565b6139096040830185613875565b818103606083015261391b81846135df565b905095945050505050565b60006020820190508181036000830152613940818461355b565b905092915050565b600060208201905061395d60008301846135d0565b92915050565b6000602082019050818103600083015261397d81846136d0565b905092915050565b6000606082019050818103600083015261399f81866136d0565b905081810360208301526139b381856136d0565b905081810360408301526139c781846136d0565b9050949350505050565b600060208201905081810360008301526139ea8161373a565b9050919050565b60006020820190508181036000830152613a0a8161375d565b9050919050565b60006020820190508181036000830152613a2a81613780565b9050919050565b60006020820190508181036000830152613a4a816137a3565b9050919050565b60006020820190508181036000830152613a6a816137c6565b9050919050565b60006020820190508181036000830152613a8a816137e9565b9050919050565b60006020820190508181036000830152613aaa8161380c565b9050919050565b60006020820190508181036000830152613aca8161382f565b9050919050565b60006020820190508181036000830152613aea81613852565b9050919050565b6000602082019050613b066000830184613875565b92915050565b6000604082019050613b216000830185613875565b8181036020830152613b3381846136d0565b90509392505050565b6000606082019050613b516000830186613875565b613b5e6020830185613875565b8181036040830152613b7081846136d0565b9050949350505050565b6000613b84613b95565b9050613b908282613e20565b919050565b6000604051905090565b600067ffffffffffffffff821115613bba57613bb9613f56565b5b613bc382613f99565b9050602081019050919050565b600067ffffffffffffffff821115613beb57613bea613f56565b5b613bf482613f99565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613cb982613da2565b9150613cc483613da2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613cf957613cf8613e9a565b5b828201905092915050565b6000613d0f82613da2565b9150613d1a83613da2565b925082821015613d2d57613d2c613e9a565b5b828203905092915050565b6000613d4382613d82565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613dd9578082015181840152602081019050613dbe565b83811115613de8576000848401525b50505050565b60006002820490506001821680613e0657607f821691505b60208210811415613e1a57613e19613ef8565b5b50919050565b613e2982613f99565b810181811067ffffffffffffffff82111715613e4857613e47613f56565b5b80604052505050565b6000613e5c82613da2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e8f57613e8e613e9a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b61422e81613d38565b811461423957600080fd5b50565b61424581613d4a565b811461425057600080fd5b50565b61425c81613d56565b811461426757600080fd5b50565b61427381613da2565b811461427e57600080fd5b5056fea26469706673582212209f3fcf4f75ece837ae08af680170c98bed717e0511c5023e434e0220f4d2cad764736f6c63430008060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x4673 CODESIZE SUB DUP1 PUSH3 0x4673 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x1A3 JUMP JUMPDEST DUP2 DUP2 DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x51 SWAP3 SWAP2 SWAP1 PUSH3 0x75 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x6A SWAP3 SWAP2 SWAP1 PUSH3 0x75 JUMP JUMPDEST POP POP POP POP POP PUSH3 0x3AC JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x83 SWAP1 PUSH3 0x2BD JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xA7 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xF3 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xC2 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xF3 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xF3 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xF2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xD5 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x102 SWAP2 SWAP1 PUSH3 0x106 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x121 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x107 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x13C PUSH3 0x136 DUP5 PUSH3 0x251 JUMP JUMPDEST PUSH3 0x228 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x15B JUMPI PUSH3 0x15A PUSH3 0x38C JUMP JUMPDEST JUMPDEST PUSH3 0x168 DUP5 DUP3 DUP6 PUSH3 0x287 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x188 JUMPI PUSH3 0x187 PUSH3 0x387 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x19A DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x125 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1BD JUMPI PUSH3 0x1BC PUSH3 0x396 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1DE JUMPI PUSH3 0x1DD PUSH3 0x391 JUMP JUMPDEST JUMPDEST PUSH3 0x1EC DUP6 DUP3 DUP7 ADD PUSH3 0x170 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x210 JUMPI PUSH3 0x20F PUSH3 0x391 JUMP JUMPDEST JUMPDEST PUSH3 0x21E DUP6 DUP3 DUP7 ADD PUSH3 0x170 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x234 PUSH3 0x247 JUMP JUMPDEST SWAP1 POP PUSH3 0x242 DUP3 DUP3 PUSH3 0x2F3 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x26F JUMPI PUSH3 0x26E PUSH3 0x358 JUMP JUMPDEST JUMPDEST PUSH3 0x27A DUP3 PUSH3 0x39B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x2A7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x28A JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x2B7 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x2D6 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x2ED JUMPI PUSH3 0x2EC PUSH3 0x329 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x2FE DUP3 PUSH3 0x39B JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x320 JUMPI PUSH3 0x31F PUSH3 0x358 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x42B7 DUP1 PUSH3 0x3BC PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x21C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x71085CAB GT PUSH2 0x125 JUMPI DUP1 PUSH4 0xB16060A6 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xC29595C5 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xC29595C5 EQ PUSH2 0x6EA JUMPI DUP1 PUSH4 0xC4C2E364 EQ PUSH2 0x706 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x736 JUMPI DUP1 PUSH4 0xE32ACC1A EQ PUSH2 0x766 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x796 JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0xB16060A6 EQ PUSH2 0x68A JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x694 JUMPI DUP1 PUSH4 0xC04E7430 EQ PUSH2 0x6B0 JUMPI DUP1 PUSH4 0xC04FE978 EQ PUSH2 0x6CC JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x5D2 JUMPI DUP1 PUSH4 0x97EE7606 EQ PUSH2 0x5F0 JUMPI DUP1 PUSH4 0xA1CA9178 EQ PUSH2 0x60E JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x63E JUMPI DUP1 PUSH4 0xAA4CDF2A EQ PUSH2 0x65A JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0x71085CAB EQ PUSH2 0x526 JUMPI DUP1 PUSH4 0x82FCC732 EQ PUSH2 0x556 JUMPI DUP1 PUSH4 0x881DE858 EQ PUSH2 0x586 JUMPI DUP1 PUSH4 0x8D3D2595 EQ PUSH2 0x5A2 JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0x27A568B9 GT PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x468D0C80 GT PUSH2 0x177 JUMPI DUP1 PUSH4 0x468D0C80 EQ PUSH2 0x435 JUMPI DUP1 PUSH4 0x4BE7ADB5 EQ PUSH2 0x466 JUMPI DUP1 PUSH4 0x5D907DA1 EQ PUSH2 0x496 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x4C6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x4F6 JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0x27A568B9 EQ PUSH2 0x399 JUMPI DUP1 PUSH4 0x29B56F60 EQ PUSH2 0x3CB JUMPI DUP1 PUSH4 0x2D9CB1AB EQ PUSH2 0x3E9 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x419 JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0x109AC970 GT PUSH2 0x1EF JUMPI DUP1 PUSH4 0x109AC970 EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0x131D44F2 EQ PUSH2 0x2EB JUMPI DUP1 PUSH4 0x1BA44C4C EQ PUSH2 0x31B JUMPI DUP1 PUSH4 0x1E9AC9F5 EQ PUSH2 0x34D JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x37D JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x26F JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x29F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x236 SWAP2 SWAP1 PUSH2 0x31FE JUMP JUMPDEST PUSH2 0x7C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x248 SWAP2 SWAP1 PUSH2 0x3948 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x259 PUSH2 0x8A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x266 SWAP2 SWAP1 PUSH2 0x3963 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x289 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x284 SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0x93A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x296 SWAP2 SWAP1 PUSH2 0x38BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B4 SWAP2 SWAP1 PUSH2 0x31BE JUMP JUMPDEST PUSH2 0x980 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D0 SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0xA98 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E2 SWAP2 SWAP1 PUSH2 0x3926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x305 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x300 SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0xC08 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x312 SWAP2 SWAP1 PUSH2 0x3926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x335 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x330 SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0xD78 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x344 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3B3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x367 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x362 SWAP2 SWAP1 PUSH2 0x3258 JUMP JUMPDEST PUSH2 0xE2A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x374 SWAP2 SWAP1 PUSH2 0x3AF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x397 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x392 SWAP2 SWAP1 PUSH2 0x30A8 JUMP JUMPDEST PUSH2 0xE9C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3B3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3AE SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0xEFC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3985 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3D3 PUSH2 0x10BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3E0 SWAP2 SWAP1 PUSH2 0x3926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x403 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3FE SWAP2 SWAP1 PUSH2 0x3319 JUMP JUMPDEST PUSH2 0x11F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0x3AF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x433 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x42E SWAP2 SWAP1 PUSH2 0x30A8 JUMP JUMPDEST PUSH2 0x1272 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x44F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x44A SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0x1292 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45D SWAP3 SWAP2 SWAP1 PUSH2 0x3B0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x480 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x47B SWAP2 SWAP1 PUSH2 0x3489 JUMP JUMPDEST PUSH2 0x133E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x48D SWAP2 SWAP1 PUSH2 0x3926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4B0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4AB SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0x14D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4BD SWAP2 SWAP1 PUSH2 0x3963 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4DB SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0x1578 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4ED SWAP2 SWAP1 PUSH2 0x38BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x510 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x50B SWAP2 SWAP1 PUSH2 0x303B JUMP JUMPDEST PUSH2 0x15FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x51D SWAP2 SWAP1 PUSH2 0x3AF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x540 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x53B SWAP2 SWAP1 PUSH2 0x3319 JUMP JUMPDEST PUSH2 0x16B7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x54D SWAP2 SWAP1 PUSH2 0x3AF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x570 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x56B SWAP2 SWAP1 PUSH2 0x34C9 JUMP JUMPDEST PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x57D SWAP2 SWAP1 PUSH2 0x3AF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5A0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x59B SWAP2 SWAP1 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x17BA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5BC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B7 SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0x1815 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5C9 SWAP2 SWAP1 PUSH2 0x3963 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5DA PUSH2 0x18BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5E7 SWAP2 SWAP1 PUSH2 0x3963 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5F8 PUSH2 0x194F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x605 SWAP2 SWAP1 PUSH2 0x3926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x628 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x623 SWAP2 SWAP1 PUSH2 0x3258 JUMP JUMPDEST PUSH2 0x1A8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x635 SWAP2 SWAP1 PUSH2 0x3AF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x658 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x653 SWAP2 SWAP1 PUSH2 0x317E JUMP JUMPDEST PUSH2 0x1AFC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x674 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x66F SWAP2 SWAP1 PUSH2 0x3258 JUMP JUMPDEST PUSH2 0x1B12 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x681 SWAP2 SWAP1 PUSH2 0x3AF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x692 PUSH2 0x1B9A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6AE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6A9 SWAP2 SWAP1 PUSH2 0x30FB JUMP JUMPDEST PUSH2 0x1D18 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6CA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6C5 SWAP2 SWAP1 PUSH2 0x33A2 JUMP JUMPDEST PUSH2 0x1D7A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6D4 PUSH2 0x1DA9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6E1 SWAP2 SWAP1 PUSH2 0x3926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x704 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6FF SWAP2 SWAP1 PUSH2 0x33A2 JUMP JUMPDEST PUSH2 0x1EE4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x720 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x71B SWAP2 SWAP1 PUSH2 0x32A1 JUMP JUMPDEST PUSH2 0x1F13 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x72D SWAP2 SWAP1 PUSH2 0x3AF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x750 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x74B SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0x1FF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x75D SWAP2 SWAP1 PUSH2 0x3963 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x780 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x77B SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0x205F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x78D SWAP2 SWAP1 PUSH2 0x3963 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7B0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7AB SWAP2 SWAP1 PUSH2 0x3068 JUMP JUMPDEST PUSH2 0x2107 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7BD SWAP2 SWAP1 PUSH2 0x3948 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x891 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x8A1 JUMPI POP PUSH2 0x8A0 DUP3 PUSH2 0x219B JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x8B7 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8E3 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x930 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x905 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x930 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x913 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x945 DUP3 PUSH2 0x2205 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x98B DUP3 PUSH2 0x1578 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x9FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F3 SWAP1 PUSH2 0x3AB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA1B PUSH2 0x2250 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xA4A JUMPI POP PUSH2 0xA49 DUP2 PUSH2 0xA44 PUSH2 0x2250 JUMP JUMPDEST PUSH2 0x2107 JUMP JUMPDEST JUMPDEST PUSH2 0xA89 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA80 SWAP1 PUSH2 0x3AD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA93 DUP4 DUP4 PUSH2 0x2258 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x7 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xAB8 JUMPI PUSH2 0xAB7 PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAEB JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xAD6 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x7 SLOAD DUP2 LT ISZERO PUSH2 0xBFD JUMPI DUP5 PUSH1 0xB PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ ISZERO PUSH2 0xBEA JUMPI PUSH1 0xB PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xB3F SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB6B SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBB8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB8D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBB8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB9B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xBD0 JUMPI PUSH2 0xBCF PUSH2 0x3F27 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP2 DUP1 PUSH2 0xBE6 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP3 POP POP JUMPDEST DUP1 DUP1 PUSH2 0xBF5 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xAF6 JUMP JUMPDEST POP DUP2 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x8 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC28 JUMPI PUSH2 0xC27 PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC5B JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xC46 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0xD6D JUMPI DUP5 PUSH1 0xC PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ ISZERO PUSH2 0xD4C JUMPI PUSH1 0xC PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xCAF SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xCDB SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD28 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xCFD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD28 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD0B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xD40 JUMPI PUSH2 0xD3F PUSH2 0x3F27 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST DUP2 DUP1 PUSH2 0xD57 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0xD65 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC66 JUMP JUMPDEST POP DUP2 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0xDA7 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xDD3 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE20 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xDF5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE20 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE03 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x7 SLOAD DUP2 LT ISZERO PUSH2 0xE91 JUMPI DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0xB PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x40 MLOAD PUSH2 0xE67 SWAP2 SWAP1 PUSH2 0x3884 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 EQ ISZERO PUSH2 0xE7E JUMPI DUP1 SWAP2 POP POP PUSH2 0xE97 JUMP JUMPDEST DUP1 DUP1 PUSH2 0xE89 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xE32 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xEAD PUSH2 0xEA7 PUSH2 0x2250 JUMP JUMPDEST DUP3 PUSH2 0x2311 JUMP JUMPDEST PUSH2 0xEEC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEE3 SWAP1 PUSH2 0x39D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEF7 DUP4 DUP4 DUP4 PUSH2 0x23A6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0xF1F SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF4B SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF98 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF6D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF98 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF7B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFAD SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xFD9 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1026 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFFB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1026 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1009 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0x103B SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1067 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x10B4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1089 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x10B4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1097 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x7 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10DE JUMPI PUSH2 0x10DD PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1111 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x10FC JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x7 SLOAD DUP2 LT ISZERO PUSH2 0x11F1 JUMPI PUSH1 0xB PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x1142 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x116E SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x11BB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1190 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x11BB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x119E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x11D3 JUMPI PUSH2 0x11D2 PUSH2 0x3F27 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x11E9 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1117 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE POP PUSH1 0xC PUSH1 0x0 PUSH1 0x8 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x124B SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP SWAP1 POP POP PUSH1 0x8 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x1262 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0x8 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x128D DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1D18 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x12BB SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x12E7 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1334 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1309 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1334 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1317 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP3 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x9 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x135E JUMPI PUSH2 0x135D PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1391 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x137C JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x9 SLOAD DUP2 LT ISZERO PUSH2 0x14C4 JUMPI DUP6 PUSH1 0xD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ DUP1 ISZERO PUSH2 0x13E0 JUMPI POP DUP5 PUSH1 0xD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD EQ JUMPDEST ISZERO PUSH2 0x14A3 JUMPI PUSH1 0xD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0x1406 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1432 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x147F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1454 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x147F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1462 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1497 JUMPI PUSH2 0x1496 PUSH2 0x3F27 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST DUP2 DUP1 PUSH2 0x14AE SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x14BC SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x139C JUMP JUMPDEST POP DUP2 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xA PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x14F3 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x151F SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x156C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1541 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x156C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x154F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1584 DUP4 PUSH2 0x26A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x15F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15ED SWAP1 PUSH2 0x3A91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1670 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1667 SWAP1 PUSH2 0x3A71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE POP PUSH1 0xB PUSH1 0x0 PUSH1 0x7 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1709 SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP SWAP1 POP POP PUSH1 0x7 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x1720 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0x7 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP PUSH1 0xD PUSH1 0x0 PUSH1 0x9 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1792 SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP SWAP1 POP POP PUSH1 0x9 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x17A9 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0x9 SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0xA PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x17E4 SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP DUP1 PUSH1 0xA PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x180F SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xC PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x1838 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1864 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x18B1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1886 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x18B1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1894 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x18CC SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x18F8 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1945 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x191A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1945 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1928 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x8 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x196F JUMPI PUSH2 0x196E PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x19A2 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x198D JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x1A82 JUMPI PUSH1 0xC PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x19D3 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x19FF SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1A4C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1A21 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1A4C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1A2F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1A64 JUMPI PUSH2 0x1A63 PUSH2 0x3F27 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x1A7A SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x19A8 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x1AF1 JUMPI DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0xC PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x40 MLOAD PUSH2 0x1AC7 SWAP2 SWAP1 PUSH2 0x3884 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 EQ ISZERO PUSH2 0x1ADE JUMPI DUP1 SWAP2 POP POP PUSH2 0x1AF7 JUMP JUMPDEST DUP1 DUP1 PUSH2 0x1AE9 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A92 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B0E PUSH2 0x1B07 PUSH2 0x2250 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x26DD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x1B8F JUMPI DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0xC PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x40 MLOAD PUSH2 0x1B4F SWAP2 SWAP1 PUSH2 0x3884 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 EQ ISZERO PUSH2 0x1B7C JUMPI PUSH1 0xC PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SWAP2 POP POP PUSH2 0x1B95 JUMP JUMPDEST DUP1 DUP1 PUSH2 0x1B87 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1B1A JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x9 DUP2 SWAP1 SSTORE POP PUSH1 0x0 JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x1C20 JUMPI PUSH1 0xA PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x1BEB SWAP2 SWAP1 PUSH2 0x2E95 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD PUSH1 0x0 PUSH2 0x1BFB SWAP2 SWAP1 PUSH2 0x2E95 JUMP JUMPDEST PUSH1 0x2 DUP3 ADD PUSH1 0x0 PUSH2 0x1C0B SWAP2 SWAP1 PUSH2 0x2E95 JUMP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x1C18 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1BBD JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x7 SLOAD DUP2 LT ISZERO PUSH2 0x1C6F JUMPI PUSH1 0xB PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 PUSH2 0x1C5A SWAP2 SWAP1 PUSH2 0x2E95 JUMP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x1C67 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1C24 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x1CBE JUMPI PUSH1 0xC PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 PUSH2 0x1CA9 SWAP2 SWAP1 PUSH2 0x2E95 JUMP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x1CB6 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1C73 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x9 SLOAD DUP2 LT ISZERO PUSH2 0x1D15 JUMPI PUSH1 0xD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 PUSH2 0x1D00 SWAP2 SWAP1 PUSH2 0x2E95 JUMP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x1D0D SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1CC2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1D29 PUSH2 0x1D23 PUSH2 0x2250 JUMP JUMPDEST DUP4 PUSH2 0x2311 JUMP JUMPDEST PUSH2 0x1D68 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D5F SWAP1 PUSH2 0x39D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D74 DUP5 DUP5 DUP5 DUP5 PUSH2 0x284A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0xC PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1DA4 SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x6 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1DC9 JUMPI PUSH2 0x1DC8 PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1DFC JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1DE7 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x1EDC JUMPI PUSH1 0xA PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x1E2D SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1E59 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1EA6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1E7B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1EA6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1E89 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1EBE JUMPI PUSH2 0x1EBD PUSH2 0x3F27 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x1ED4 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1E02 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST DUP1 PUSH1 0xB PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1F0E SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x46616C7365000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 MSTORE POP PUSH1 0xA PUSH1 0x0 PUSH1 0x6 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1F96 SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1FB3 SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1FD0 SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP SWAP1 POP POP PUSH1 0x6 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x1FE7 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0x6 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2002 DUP3 PUSH2 0x2205 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x200C PUSH2 0x28A6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x202C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2057 JUMP JUMPDEST DUP1 PUSH2 0x2036 DUP5 PUSH2 0x28BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2047 SWAP3 SWAP2 SWAP1 PUSH2 0x389B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xB PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x2082 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x20AE SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x20FB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x20D0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x20FB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20DE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x220E DUP2 PUSH2 0x2995 JUMP JUMPDEST PUSH2 0x224D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2244 SWAP1 PUSH2 0x3A91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x22CB DUP4 PUSH2 0x1578 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x231D DUP4 PUSH2 0x1578 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x235F JUMPI POP PUSH2 0x235E DUP2 DUP6 PUSH2 0x2107 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x239D JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2385 DUP5 PUSH2 0x93A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x23C6 DUP3 PUSH2 0x1578 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x241C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2413 SWAP1 PUSH2 0x3A11 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x248C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2483 SWAP1 PUSH2 0x3A31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2499 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x29D6 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x24B9 DUP3 PUSH2 0x1578 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x250F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2506 SWAP1 PUSH2 0x3A11 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x269B DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x2AFC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x274C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2743 SWAP1 PUSH2 0x3A51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x283D SWAP2 SWAP1 PUSH2 0x3948 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x2855 DUP5 DUP5 DUP5 PUSH2 0x23A6 JUMP JUMPDEST PUSH2 0x2861 DUP5 DUP5 DUP5 DUP5 PUSH2 0x2B02 JUMP JUMPDEST PUSH2 0x28A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2897 SWAP1 PUSH2 0x39F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x28CC DUP5 PUSH2 0x2C99 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28EB JUMPI PUSH2 0x28EA PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x291D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x298A JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x2974 JUMPI PUSH2 0x2973 PUSH2 0x3EC9 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x2985 JUMPI PUSH2 0x298A JUMP JUMPDEST PUSH2 0x292B JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x29B7 DUP4 PUSH2 0x26A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2AF6 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2A6A JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2A62 SWAP2 SWAP1 PUSH2 0x3D04 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2AF5 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2AED SWAP2 SWAP1 PUSH2 0x3CAE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B23 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2DEC JUMP JUMPDEST ISZERO PUSH2 0x2C8C JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x2B4C PUSH2 0x2250 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6E SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x38DA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2BB9 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2BB6 SWAP2 SWAP1 PUSH2 0x322B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2C3C JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2BE9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2BEE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x2C34 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C2B SWAP1 PUSH2 0x39F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x2C91 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x2CF7 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x2CED JUMPI PUSH2 0x2CEC PUSH2 0x3EC9 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x2D34 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x2D2A JUMPI PUSH2 0x2D29 PUSH2 0x3EC9 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x2D63 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x2D59 JUMPI PUSH2 0x2D58 PUSH2 0x3EC9 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x2D8C JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x2D82 JUMPI PUSH2 0x2D81 PUSH2 0x3EC9 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x2DB1 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x2DA7 JUMPI PUSH2 0x2DA6 PUSH2 0x3EC9 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2DD4 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x2DCA JUMPI PUSH2 0x2DC9 PUSH2 0x3EC9 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x2DE3 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x2E1B SWAP1 PUSH2 0x3DEE JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x2E3D JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x2E84 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x2E56 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x2E84 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x2E84 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2E83 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x2E68 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x2E91 SWAP2 SWAP1 PUSH2 0x2ED5 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH2 0x2EA1 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x2EB3 JUMPI POP PUSH2 0x2ED2 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2ED1 SWAP2 SWAP1 PUSH2 0x2ED5 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2EEE JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x2ED6 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F05 PUSH2 0x2F00 DUP5 PUSH2 0x3B9F JUMP JUMPDEST PUSH2 0x3B7A JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2F21 JUMPI PUSH2 0x2F20 PUSH2 0x3F8A JUMP JUMPDEST JUMPDEST PUSH2 0x2F2C DUP5 DUP3 DUP6 PUSH2 0x3DAC JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F47 PUSH2 0x2F42 DUP5 PUSH2 0x3BD0 JUMP JUMPDEST PUSH2 0x3B7A JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2F63 JUMPI PUSH2 0x2F62 PUSH2 0x3F8A JUMP JUMPDEST JUMPDEST PUSH2 0x2F6E DUP5 DUP3 DUP6 PUSH2 0x3DAC JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2F85 DUP2 PUSH2 0x4225 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2F9A DUP2 PUSH2 0x423C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2FAF DUP2 PUSH2 0x4253 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2FC4 DUP2 PUSH2 0x4253 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2FDF JUMPI PUSH2 0x2FDE PUSH2 0x3F85 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2FEF DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2EF2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x300D JUMPI PUSH2 0x300C PUSH2 0x3F85 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x301D DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2F34 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3035 DUP2 PUSH2 0x426A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3051 JUMPI PUSH2 0x3050 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x305F DUP5 DUP3 DUP6 ADD PUSH2 0x2F76 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x307F JUMPI PUSH2 0x307E PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x308D DUP6 DUP3 DUP7 ADD PUSH2 0x2F76 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x309E DUP6 DUP3 DUP7 ADD PUSH2 0x2F76 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x30C1 JUMPI PUSH2 0x30C0 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x30CF DUP7 DUP3 DUP8 ADD PUSH2 0x2F76 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x30E0 DUP7 DUP3 DUP8 ADD PUSH2 0x2F76 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x30F1 DUP7 DUP3 DUP8 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3115 JUMPI PUSH2 0x3114 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3123 DUP8 DUP3 DUP9 ADD PUSH2 0x2F76 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x3134 DUP8 DUP3 DUP9 ADD PUSH2 0x2F76 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x3145 DUP8 DUP3 DUP9 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3166 JUMPI PUSH2 0x3165 PUSH2 0x3F8F JUMP JUMPDEST JUMPDEST PUSH2 0x3172 DUP8 DUP3 DUP9 ADD PUSH2 0x2FCA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3195 JUMPI PUSH2 0x3194 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x31A3 DUP6 DUP3 DUP7 ADD PUSH2 0x2F76 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x31B4 DUP6 DUP3 DUP7 ADD PUSH2 0x2F8B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x31D5 JUMPI PUSH2 0x31D4 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x31E3 DUP6 DUP3 DUP7 ADD PUSH2 0x2F76 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x31F4 DUP6 DUP3 DUP7 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3214 JUMPI PUSH2 0x3213 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3222 DUP5 DUP3 DUP6 ADD PUSH2 0x2FA0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3241 JUMPI PUSH2 0x3240 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x324F DUP5 DUP3 DUP6 ADD PUSH2 0x2FB5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x326E JUMPI PUSH2 0x326D PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x328C JUMPI PUSH2 0x328B PUSH2 0x3F8F JUMP JUMPDEST JUMPDEST PUSH2 0x3298 DUP5 DUP3 DUP6 ADD PUSH2 0x2FF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x32B8 JUMPI PUSH2 0x32B7 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x32D6 JUMPI PUSH2 0x32D5 PUSH2 0x3F8F JUMP JUMPDEST JUMPDEST PUSH2 0x32E2 DUP6 DUP3 DUP7 ADD PUSH2 0x2FF8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3303 JUMPI PUSH2 0x3302 PUSH2 0x3F8F JUMP JUMPDEST JUMPDEST PUSH2 0x330F DUP6 DUP3 DUP7 ADD PUSH2 0x2FF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3330 JUMPI PUSH2 0x332F PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x334E JUMPI PUSH2 0x334D PUSH2 0x3F8F JUMP JUMPDEST JUMPDEST PUSH2 0x335A DUP6 DUP3 DUP7 ADD PUSH2 0x2FF8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x336B DUP6 DUP3 DUP7 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x338B JUMPI PUSH2 0x338A PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3399 DUP5 DUP3 DUP6 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x33B9 JUMPI PUSH2 0x33B8 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x33C7 DUP6 DUP3 DUP7 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x33E8 JUMPI PUSH2 0x33E7 PUSH2 0x3F8F JUMP JUMPDEST JUMPDEST PUSH2 0x33F4 DUP6 DUP3 DUP7 ADD PUSH2 0x2FF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3417 JUMPI PUSH2 0x3416 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3425 DUP7 DUP3 DUP8 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3446 JUMPI PUSH2 0x3445 PUSH2 0x3F8F JUMP JUMPDEST JUMPDEST PUSH2 0x3452 DUP7 DUP3 DUP8 ADD PUSH2 0x2FF8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3473 JUMPI PUSH2 0x3472 PUSH2 0x3F8F JUMP JUMPDEST JUMPDEST PUSH2 0x347F DUP7 DUP3 DUP8 ADD PUSH2 0x2FF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x34A0 JUMPI PUSH2 0x349F PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x34AE DUP6 DUP3 DUP7 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x34BF DUP6 DUP3 DUP7 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x34E2 JUMPI PUSH2 0x34E1 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x34F0 DUP7 DUP3 DUP8 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3501 DUP7 DUP3 DUP8 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3522 JUMPI PUSH2 0x3521 PUSH2 0x3F8F JUMP JUMPDEST JUMPDEST PUSH2 0x352E DUP7 DUP3 DUP8 ADD PUSH2 0x2FF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3544 DUP4 DUP4 PUSH2 0x3697 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3555 DUP2 PUSH2 0x3D38 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3566 DUP3 PUSH2 0x3C26 JUMP JUMPDEST PUSH2 0x3570 DUP2 DUP6 PUSH2 0x3C54 JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x3582 DUP6 PUSH2 0x3C01 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x35BE JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0x359F DUP6 DUP3 PUSH2 0x3538 JUMP JUMPDEST SWAP5 POP PUSH2 0x35AA DUP4 PUSH2 0x3C47 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP11 ADD SWAP10 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3586 JUMP JUMPDEST POP DUP3 SWAP8 POP DUP8 SWAP6 POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x35D9 DUP2 PUSH2 0x3D4A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35EA DUP3 PUSH2 0x3C31 JUMP JUMPDEST PUSH2 0x35F4 DUP2 DUP6 PUSH2 0x3C65 JUMP JUMPDEST SWAP4 POP PUSH2 0x3604 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3DBB JUMP JUMPDEST PUSH2 0x360D DUP2 PUSH2 0x3F99 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH2 0x3625 DUP2 PUSH2 0x3DEE JUMP JUMPDEST PUSH2 0x362F DUP2 DUP7 PUSH2 0x3C76 JUMP JUMPDEST SWAP5 POP PUSH1 0x1 DUP3 AND PUSH1 0x0 DUP2 EQ PUSH2 0x364A JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x365B JUMPI PUSH2 0x368E JUMP JUMPDEST PUSH1 0xFF NOT DUP4 AND DUP7 MSTORE DUP2 DUP7 ADD SWAP4 POP PUSH2 0x368E JUMP JUMPDEST PUSH2 0x3664 DUP6 PUSH2 0x3C11 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3686 JUMPI DUP2 SLOAD DUP2 DUP10 ADD MSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3667 JUMP JUMPDEST DUP4 DUP9 ADD SWAP6 POP POP POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36A2 DUP3 PUSH2 0x3C3C JUMP JUMPDEST PUSH2 0x36AC DUP2 DUP6 PUSH2 0x3C81 JUMP JUMPDEST SWAP4 POP PUSH2 0x36BC DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3DBB JUMP JUMPDEST PUSH2 0x36C5 DUP2 PUSH2 0x3F99 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36DB DUP3 PUSH2 0x3C3C JUMP JUMPDEST PUSH2 0x36E5 DUP2 DUP6 PUSH2 0x3C92 JUMP JUMPDEST SWAP4 POP PUSH2 0x36F5 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3DBB JUMP JUMPDEST PUSH2 0x36FE DUP2 PUSH2 0x3F99 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3714 DUP3 PUSH2 0x3C3C JUMP JUMPDEST PUSH2 0x371E DUP2 DUP6 PUSH2 0x3CA3 JUMP JUMPDEST SWAP4 POP PUSH2 0x372E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3DBB JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3747 PUSH1 0x2D DUP4 PUSH2 0x3C92 JUMP JUMPDEST SWAP2 POP PUSH2 0x3752 DUP3 PUSH2 0x3FAA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x376A PUSH1 0x32 DUP4 PUSH2 0x3C92 JUMP JUMPDEST SWAP2 POP PUSH2 0x3775 DUP3 PUSH2 0x3FF9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x378D PUSH1 0x25 DUP4 PUSH2 0x3C92 JUMP JUMPDEST SWAP2 POP PUSH2 0x3798 DUP3 PUSH2 0x4048 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37B0 PUSH1 0x24 DUP4 PUSH2 0x3C92 JUMP JUMPDEST SWAP2 POP PUSH2 0x37BB DUP3 PUSH2 0x4097 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37D3 PUSH1 0x19 DUP4 PUSH2 0x3C92 JUMP JUMPDEST SWAP2 POP PUSH2 0x37DE DUP3 PUSH2 0x40E6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37F6 PUSH1 0x29 DUP4 PUSH2 0x3C92 JUMP JUMPDEST SWAP2 POP PUSH2 0x3801 DUP3 PUSH2 0x410F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3819 PUSH1 0x18 DUP4 PUSH2 0x3C92 JUMP JUMPDEST SWAP2 POP PUSH2 0x3824 DUP3 PUSH2 0x415E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x383C PUSH1 0x21 DUP4 PUSH2 0x3C92 JUMP JUMPDEST SWAP2 POP PUSH2 0x3847 DUP3 PUSH2 0x4187 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x385F PUSH1 0x3D DUP4 PUSH2 0x3C92 JUMP JUMPDEST SWAP2 POP PUSH2 0x386A DUP3 PUSH2 0x41D6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x387E DUP2 PUSH2 0x3DA2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3890 DUP3 DUP5 PUSH2 0x3618 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38A7 DUP3 DUP6 PUSH2 0x3709 JUMP JUMPDEST SWAP2 POP PUSH2 0x38B3 DUP3 DUP5 PUSH2 0x3709 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x38D4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x354C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x38EF PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x354C JUMP JUMPDEST PUSH2 0x38FC PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x354C JUMP JUMPDEST PUSH2 0x3909 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3875 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x391B DUP2 DUP5 PUSH2 0x35DF JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3940 DUP2 DUP5 PUSH2 0x355B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x395D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x35D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x397D DUP2 DUP5 PUSH2 0x36D0 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x399F DUP2 DUP7 PUSH2 0x36D0 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x39B3 DUP2 DUP6 PUSH2 0x36D0 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x39C7 DUP2 DUP5 PUSH2 0x36D0 JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x39EA DUP2 PUSH2 0x373A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A0A DUP2 PUSH2 0x375D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A2A DUP2 PUSH2 0x3780 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A4A DUP2 PUSH2 0x37A3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A6A DUP2 PUSH2 0x37C6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A8A DUP2 PUSH2 0x37E9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AAA DUP2 PUSH2 0x380C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3ACA DUP2 PUSH2 0x382F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AEA DUP2 PUSH2 0x3852 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3B06 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3875 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3B21 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3875 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x3B33 DUP2 DUP5 PUSH2 0x36D0 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3B51 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x3875 JUMP JUMPDEST PUSH2 0x3B5E PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x3875 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x3B70 DUP2 DUP5 PUSH2 0x36D0 JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B84 PUSH2 0x3B95 JUMP JUMPDEST SWAP1 POP PUSH2 0x3B90 DUP3 DUP3 PUSH2 0x3E20 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3BBA JUMPI PUSH2 0x3BB9 PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST PUSH2 0x3BC3 DUP3 PUSH2 0x3F99 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3BEB JUMPI PUSH2 0x3BEA PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST PUSH2 0x3BF4 DUP3 PUSH2 0x3F99 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CB9 DUP3 PUSH2 0x3DA2 JUMP JUMPDEST SWAP2 POP PUSH2 0x3CC4 DUP4 PUSH2 0x3DA2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x3CF9 JUMPI PUSH2 0x3CF8 PUSH2 0x3E9A JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D0F DUP3 PUSH2 0x3DA2 JUMP JUMPDEST SWAP2 POP PUSH2 0x3D1A DUP4 PUSH2 0x3DA2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x3D2D JUMPI PUSH2 0x3D2C PUSH2 0x3E9A JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D43 DUP3 PUSH2 0x3D82 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3DD9 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3DBE JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x3DE8 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x3E06 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x3E1A JUMPI PUSH2 0x3E19 PUSH2 0x3EF8 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3E29 DUP3 PUSH2 0x3F99 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x3E48 JUMPI PUSH2 0x3E47 PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E5C DUP3 PUSH2 0x3DA2 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x3E8F JUMPI PUSH2 0x3E8E PUSH2 0x3E9A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x422E DUP2 PUSH2 0x3D38 JUMP JUMPDEST DUP2 EQ PUSH2 0x4239 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x4245 DUP2 PUSH2 0x3D4A JUMP JUMPDEST DUP2 EQ PUSH2 0x4250 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x425C DUP2 PUSH2 0x3D56 JUMP JUMPDEST DUP2 EQ PUSH2 0x4267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x4273 DUP2 PUSH2 0x3DA2 JUMP JUMPDEST DUP2 EQ PUSH2 0x427E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP16 EXTCODEHASH 0xCF 0x4F PUSH22 0xECE837AE08AF680170C98BED717E0511C5023E434E02 KECCAK256 DELEGATECALL 0xD2 0xCA 0xD7 PUSH5 0x736F6C6343 STOP ADDMOD MOD STOP CALLER ","sourceMap":"204:7358:11:-:0;;;252:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;337:5;344:7;1464:5:1;1456;:13;;;;;;;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;;;;;;;:::i;:::-;;1390:113;;252:103:11;;204:7358;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:421:21:-;96:5;121:66;137:49;179:6;137:49;:::i;:::-;121:66;:::i;:::-;112:75;;210:6;203:5;196:21;248:4;241:5;237:16;286:3;277:6;272:3;268:16;265:25;262:2;;;293:79;;:::i;:::-;262:2;383:39;415:6;410:3;405;383:39;:::i;:::-;102:326;;;;;;:::o;448:355::-;515:5;564:3;557:4;549:6;545:17;541:27;531:2;;572:79;;:::i;:::-;531:2;682:6;676:13;707:90;793:3;785:6;778:4;770:6;766:17;707:90;:::i;:::-;698:99;;521:282;;;;;:::o;809:853::-;908:6;916;965:2;953:9;944:7;940:23;936:32;933:2;;;971:79;;:::i;:::-;933:2;1112:1;1101:9;1097:17;1091:24;1142:18;1134:6;1131:30;1128:2;;;1164:79;;:::i;:::-;1128:2;1269:74;1335:7;1326:6;1315:9;1311:22;1269:74;:::i;:::-;1259:84;;1062:291;1413:2;1402:9;1398:18;1392:25;1444:18;1436:6;1433:30;1430:2;;;1466:79;;:::i;:::-;1430:2;1571:74;1637:7;1628:6;1617:9;1613:22;1571:74;:::i;:::-;1561:84;;1363:292;923:739;;;;;:::o;1668:129::-;1702:6;1729:20;;:::i;:::-;1719:30;;1758:33;1786:4;1778:6;1758:33;:::i;:::-;1709:88;;;:::o;1803:75::-;1836:6;1869:2;1863:9;1853:19;;1843:35;:::o;1884:308::-;1946:4;2036:18;2028:6;2025:30;2022:2;;;2058:18;;:::i;:::-;2022:2;2096:29;2118:6;2096:29;:::i;:::-;2088:37;;2180:4;2174;2170:15;2162:23;;1951:241;;;:::o;2198:307::-;2266:1;2276:113;2290:6;2287:1;2284:13;2276:113;;;2375:1;2370:3;2366:11;2360:18;2356:1;2351:3;2347:11;2340:39;2312:2;2309:1;2305:10;2300:15;;2276:113;;;2407:6;2404:1;2401:13;2398:2;;;2487:1;2478:6;2473:3;2469:16;2462:27;2398:2;2247:258;;;;:::o;2511:320::-;2555:6;2592:1;2586:4;2582:12;2572:22;;2639:1;2633:4;2629:12;2660:18;2650:2;;2716:4;2708:6;2704:17;2694:27;;2650:2;2778;2770:6;2767:14;2747:18;2744:38;2741:2;;;2797:18;;:::i;:::-;2741:2;2562:269;;;;:::o;2837:281::-;2920:27;2942:4;2920:27;:::i;:::-;2912:6;2908:40;3050:6;3038:10;3035:22;3014:18;3002:10;2999:34;2996:62;2993:2;;;3061:18;;:::i;:::-;2993:2;3101:10;3097:2;3090:22;2880:238;;;:::o;3124:180::-;3172:77;3169:1;3162:88;3269:4;3266:1;3259:15;3293:4;3290:1;3283:15;3310:180;3358:77;3355:1;3348:88;3455:4;3452:1;3445:15;3479:4;3476:1;3469:15;3496:117;3605:1;3602;3595:12;3619:117;3728:1;3725;3718:12;3742:117;3851:1;3848;3841:12;3865:117;3974:1;3971;3964:12;3988:102;4029:6;4080:2;4076:7;4071:2;4064:5;4060:14;4056:28;4046:38;;4036:54;;;:::o;204:7358:11:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1056":{"entryPoint":11004,"id":1056,"parameterSlots":4,"returnSlots":0},"@_approve_889":{"entryPoint":8792,"id":889,"parameterSlots":2,"returnSlots":0},"@_baseURI_326":{"entryPoint":10406,"id":326,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1043":{"entryPoint":10710,"id":1043,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_997":{"entryPoint":11010,"id":997,"parameterSlots":4,"returnSlots":1},"@_dao_uris_2704":{"entryPoint":3836,"id":2704,"parameterSlots":0,"returnSlots":0},"@_exists_558":{"entryPoint":10645,"id":558,"parameterSlots":1,"returnSlots":1},"@_ideas_uris_2714":{"entryPoint":4754,"id":2714,"parameterSlots":0,"returnSlots":0},"@_isApprovedOrOwner_592":{"entryPoint":8977,"id":592,"parameterSlots":2,"returnSlots":1},"@_msgSender_1560":{"entryPoint":8784,"id":1560,"parameterSlots":0,"returnSlots":1},"@_ownerOf_540":{"entryPoint":9888,"id":540,"parameterSlots":1,"returnSlots":1},"@_requireMinted_935":{"entryPoint":8709,"id":935,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_527":{"entryPoint":10314,"id":527,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_921":{"entryPoint":9949,"id":921,"parameterSlots":3,"returnSlots":0},"@_transfer_865":{"entryPoint":9126,"id":865,"parameterSlots":3,"returnSlots":0},"@all_goal_ideas_votes_2719":{"entryPoint":3448,"id":2719,"parameterSlots":0,"returnSlots":0},"@approve_369":{"entryPoint":2432,"id":369,"parameterSlots":2,"returnSlots":0},"@balanceOf_230":{"entryPoint":5631,"id":230,"parameterSlots":1,"returnSlots":1},"@create_dao_2744":{"entryPoint":7955,"id":2744,"parameterSlots":2,"returnSlots":1},"@create_goal_2846":{"entryPoint":5815,"id":2846,"parameterSlots":2,"returnSlots":1},"@create_goal_ideas_vote_3274":{"entryPoint":5936,"id":3274,"parameterSlots":3,"returnSlots":1},"@create_ideas_3037":{"entryPoint":4601,"id":3037,"parameterSlots":2,"returnSlots":1},"@dao_uri_2822":{"entryPoint":5328,"id":2822,"parameterSlots":1,"returnSlots":1},"@getApproved_387":{"entryPoint":2362,"id":387,"parameterSlots":1,"returnSlots":1},"@get_all_daos_2809":{"entryPoint":7593,"id":2809,"parameterSlots":0,"returnSlots":1},"@get_all_goals_2902":{"entryPoint":4286,"id":2902,"parameterSlots":0,"returnSlots":1},"@get_all_goals_by_dao_id_2959":{"entryPoint":2712,"id":2959,"parameterSlots":1,"returnSlots":1},"@get_all_ideas_3093":{"entryPoint":6479,"id":3093,"parameterSlots":0,"returnSlots":1},"@get_all_ideas_by_goal_id_3149":{"entryPoint":3080,"id":3149,"parameterSlots":1,"returnSlots":1},"@get_goal_id_by_goal_uri_3000":{"entryPoint":3626,"id":3000,"parameterSlots":1,"returnSlots":1},"@get_goal_id_from_ideas_uri_3234":{"entryPoint":6930,"id":3234,"parameterSlots":1,"returnSlots":1},"@get_ideas_id_by_ideas_uri_3190":{"entryPoint":6794,"id":3190,"parameterSlots":1,"returnSlots":1},"@get_ideas_votes_from_goal_3339":{"entryPoint":4926,"id":3339,"parameterSlots":2,"returnSlots":1},"@goal_uri_3013":{"entryPoint":8287,"id":3013,"parameterSlots":1,"returnSlots":1},"@ideas_uri_3247":{"entryPoint":6165,"id":3247,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_422":{"entryPoint":8455,"id":422,"parameterSlots":2,"returnSlots":1},"@isContract_1236":{"entryPoint":11756,"id":1236,"parameterSlots":1,"returnSlots":1},"@log10_2483":{"entryPoint":11417,"id":2483,"parameterSlots":1,"returnSlots":1},"@name_268":{"entryPoint":2216,"id":268,"parameterSlots":0,"returnSlots":1},"@ownerOf_258":{"entryPoint":5496,"id":258,"parameterSlots":1,"returnSlots":1},"@reset_all_3423":{"entryPoint":7066,"id":3423,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_468":{"entryPoint":4722,"id":468,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_498":{"entryPoint":7448,"id":498,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_404":{"entryPoint":6908,"id":404,"parameterSlots":2,"returnSlots":0},"@set_dao_2768":{"entryPoint":6074,"id":2768,"parameterSlots":3,"returnSlots":0},"@set_goal_2861":{"entryPoint":7908,"id":2861,"parameterSlots":2,"returnSlots":0},"@set_ideas_3052":{"entryPoint":7546,"id":3052,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1768":{"entryPoint":8603,"id":1768,"parameterSlots":1,"returnSlots":1},"@supportsInterface_206":{"entryPoint":1990,"id":206,"parameterSlots":1,"returnSlots":1},"@symbol_278":{"entryPoint":6333,"id":278,"parameterSlots":0,"returnSlots":1},"@toString_1628":{"entryPoint":10429,"id":1628,"parameterSlots":1,"returnSlots":1},"@tokenURI_317":{"entryPoint":8183,"id":317,"parameterSlots":1,"returnSlots":1},"@transferFrom_449":{"entryPoint":3740,"id":449,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":12018,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr":{"entryPoint":12084,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":12150,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":12171,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":12192,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":12213,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":12234,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr":{"entryPoint":12280,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":12326,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":12347,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":12392,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":12456,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":12539,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":12670,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":12734,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":12798,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":12843,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr":{"entryPoint":12888,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr":{"entryPoint":12961,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_string_memory_ptrt_uint256":{"entryPoint":13081,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":13173,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_string_memory_ptr":{"entryPoint":13218,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_string_memory_ptrt_string_memory_ptr":{"entryPoint":13310,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":13449,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256t_string_memory_ptr":{"entryPoint":13513,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encodeUpdatedPos_t_string_memory_ptr_to_t_string_memory_ptr":{"entryPoint":13624,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":13644,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_string_memory_ptr_$dyn_memory_ptr_to_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":13659,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":13776,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":13791,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bytes_storage_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":13848,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr":{"entryPoint":13975,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":14032,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":14089,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":14138,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":14173,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":14208,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":14243,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":14278,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":14313,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":14348,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":14383,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":14418,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":14453,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_storage_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":14468,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":14491,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":14527,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":14554,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr__to_t_array$_t_string_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":14630,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":14664,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14691,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14725,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14801,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14833,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14865,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14897,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14929,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14961,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14993,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15025,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15057,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":15089,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_string_memory_ptr__to_t_uint256_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15116,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_string_memory_ptr__to_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15164,"id":null,"parameterSlots":4,"returnSlots":1},"allocate_memory":{"entryPoint":15226,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":15253,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":15263,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":15312,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_string_memory_ptr_$dyn_memory_ptr":{"entryPoint":15361,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_bytes_storage_ptr":{"entryPoint":15377,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_string_memory_ptr_$dyn_memory_ptr":{"entryPoint":15398,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":15409,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":15420,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_string_memory_ptr_$dyn_memory_ptr":{"entryPoint":15431,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":15444,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":15461,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":15478,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr":{"entryPoint":15489,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":15506,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":15523,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":15534,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":15620,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":15672,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":15690,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":15702,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":15746,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":15778,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":15788,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":15803,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":15854,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":15904,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":15953,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":16026,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":16073,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":16120,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":16167,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":16214,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":16261,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":16266,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":16271,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":16276,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":16281,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":16298,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":16377,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":16456,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":16535,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":16614,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":16655,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":16734,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":16775,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":16854,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":16933,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":16956,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":16979,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":17002,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:36239:21","statements":[{"body":{"nodeType":"YulBlock","src":"90:327:21","statements":[{"nodeType":"YulAssignment","src":"100:74:21","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"166:6:21"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"125:40:21"},"nodeType":"YulFunctionCall","src":"125:48:21"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"109:15:21"},"nodeType":"YulFunctionCall","src":"109:65:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"100:5:21"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"190:5:21"},{"name":"length","nodeType":"YulIdentifier","src":"197:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"183:6:21"},"nodeType":"YulFunctionCall","src":"183:21:21"},"nodeType":"YulExpressionStatement","src":"183:21:21"},{"nodeType":"YulVariableDeclaration","src":"213:27:21","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"228:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"235:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"224:3:21"},"nodeType":"YulFunctionCall","src":"224:16:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"217:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"278:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"280:77:21"},"nodeType":"YulFunctionCall","src":"280:79:21"},"nodeType":"YulExpressionStatement","src":"280:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"259:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"264:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"255:3:21"},"nodeType":"YulFunctionCall","src":"255:16:21"},{"name":"end","nodeType":"YulIdentifier","src":"273:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"252:2:21"},"nodeType":"YulFunctionCall","src":"252:25:21"},"nodeType":"YulIf","src":"249:2:21"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"394:3:21"},{"name":"dst","nodeType":"YulIdentifier","src":"399:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"404:6:21"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"370:23:21"},"nodeType":"YulFunctionCall","src":"370:41:21"},"nodeType":"YulExpressionStatement","src":"370:41:21"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"63:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"68:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"76:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"84:5:21","type":""}],"src":"7:410:21"},{"body":{"nodeType":"YulBlock","src":"507:328:21","statements":[{"nodeType":"YulAssignment","src":"517:75:21","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"584:6:21"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"542:41:21"},"nodeType":"YulFunctionCall","src":"542:49:21"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"526:15:21"},"nodeType":"YulFunctionCall","src":"526:66:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"517:5:21"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"608:5:21"},{"name":"length","nodeType":"YulIdentifier","src":"615:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"601:6:21"},"nodeType":"YulFunctionCall","src":"601:21:21"},"nodeType":"YulExpressionStatement","src":"601:21:21"},{"nodeType":"YulVariableDeclaration","src":"631:27:21","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"646:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"653:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"642:3:21"},"nodeType":"YulFunctionCall","src":"642:16:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"635:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"696:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"698:77:21"},"nodeType":"YulFunctionCall","src":"698:79:21"},"nodeType":"YulExpressionStatement","src":"698:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"677:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"682:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"673:3:21"},"nodeType":"YulFunctionCall","src":"673:16:21"},{"name":"end","nodeType":"YulIdentifier","src":"691:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"670:2:21"},"nodeType":"YulFunctionCall","src":"670:25:21"},"nodeType":"YulIf","src":"667:2:21"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"812:3:21"},{"name":"dst","nodeType":"YulIdentifier","src":"817:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"822:6:21"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"788:23:21"},"nodeType":"YulFunctionCall","src":"788:41:21"},"nodeType":"YulExpressionStatement","src":"788:41:21"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"480:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"485:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"493:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"501:5:21","type":""}],"src":"423:412:21"},{"body":{"nodeType":"YulBlock","src":"893:87:21","statements":[{"nodeType":"YulAssignment","src":"903:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"925:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"912:12:21"},"nodeType":"YulFunctionCall","src":"912:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"903:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"968:5:21"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"941:26:21"},"nodeType":"YulFunctionCall","src":"941:33:21"},"nodeType":"YulExpressionStatement","src":"941:33:21"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"871:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"879:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"887:5:21","type":""}],"src":"841:139:21"},{"body":{"nodeType":"YulBlock","src":"1035:84:21","statements":[{"nodeType":"YulAssignment","src":"1045:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1067:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1054:12:21"},"nodeType":"YulFunctionCall","src":"1054:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1045:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1107:5:21"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"1083:23:21"},"nodeType":"YulFunctionCall","src":"1083:30:21"},"nodeType":"YulExpressionStatement","src":"1083:30:21"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1013:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"1021:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1029:5:21","type":""}],"src":"986:133:21"},{"body":{"nodeType":"YulBlock","src":"1176:86:21","statements":[{"nodeType":"YulAssignment","src":"1186:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1208:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1195:12:21"},"nodeType":"YulFunctionCall","src":"1195:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1186:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1250:5:21"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"1224:25:21"},"nodeType":"YulFunctionCall","src":"1224:32:21"},"nodeType":"YulExpressionStatement","src":"1224:32:21"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1154:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"1162:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1170:5:21","type":""}],"src":"1125:137:21"},{"body":{"nodeType":"YulBlock","src":"1330:79:21","statements":[{"nodeType":"YulAssignment","src":"1340:22:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1355:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1349:5:21"},"nodeType":"YulFunctionCall","src":"1349:13:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1340:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1397:5:21"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"1371:25:21"},"nodeType":"YulFunctionCall","src":"1371:32:21"},"nodeType":"YulExpressionStatement","src":"1371:32:21"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1308:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"1316:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1324:5:21","type":""}],"src":"1268:141:21"},{"body":{"nodeType":"YulBlock","src":"1489:277:21","statements":[{"body":{"nodeType":"YulBlock","src":"1538:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"1540:77:21"},"nodeType":"YulFunctionCall","src":"1540:79:21"},"nodeType":"YulExpressionStatement","src":"1540:79:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1517:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1525:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1513:3:21"},"nodeType":"YulFunctionCall","src":"1513:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"1532:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1509:3:21"},"nodeType":"YulFunctionCall","src":"1509:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1502:6:21"},"nodeType":"YulFunctionCall","src":"1502:35:21"},"nodeType":"YulIf","src":"1499:2:21"},{"nodeType":"YulVariableDeclaration","src":"1630:34:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1657:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1644:12:21"},"nodeType":"YulFunctionCall","src":"1644:20:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1634:6:21","type":""}]},{"nodeType":"YulAssignment","src":"1673:87:21","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1733:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1741:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1729:3:21"},"nodeType":"YulFunctionCall","src":"1729:17:21"},{"name":"length","nodeType":"YulIdentifier","src":"1748:6:21"},{"name":"end","nodeType":"YulIdentifier","src":"1756:3:21"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"1682:46:21"},"nodeType":"YulFunctionCall","src":"1682:78:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1673:5:21"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1467:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"1475:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1483:5:21","type":""}],"src":"1428:338:21"},{"body":{"nodeType":"YulBlock","src":"1848:278:21","statements":[{"body":{"nodeType":"YulBlock","src":"1897:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"1899:77:21"},"nodeType":"YulFunctionCall","src":"1899:79:21"},"nodeType":"YulExpressionStatement","src":"1899:79:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1876:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1884:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1872:3:21"},"nodeType":"YulFunctionCall","src":"1872:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"1891:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1868:3:21"},"nodeType":"YulFunctionCall","src":"1868:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1861:6:21"},"nodeType":"YulFunctionCall","src":"1861:35:21"},"nodeType":"YulIf","src":"1858:2:21"},{"nodeType":"YulVariableDeclaration","src":"1989:34:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2016:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2003:12:21"},"nodeType":"YulFunctionCall","src":"2003:20:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1993:6:21","type":""}]},{"nodeType":"YulAssignment","src":"2032:88:21","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2093:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2101:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2089:3:21"},"nodeType":"YulFunctionCall","src":"2089:17:21"},{"name":"length","nodeType":"YulIdentifier","src":"2108:6:21"},{"name":"end","nodeType":"YulIdentifier","src":"2116:3:21"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2041:47:21"},"nodeType":"YulFunctionCall","src":"2041:79:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2032:5:21"}]}]},"name":"abi_decode_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1826:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"1834:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1842:5:21","type":""}],"src":"1786:340:21"},{"body":{"nodeType":"YulBlock","src":"2184:87:21","statements":[{"nodeType":"YulAssignment","src":"2194:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2216:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2203:12:21"},"nodeType":"YulFunctionCall","src":"2203:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2194:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2259:5:21"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2232:26:21"},"nodeType":"YulFunctionCall","src":"2232:33:21"},"nodeType":"YulExpressionStatement","src":"2232:33:21"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2162:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"2170:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2178:5:21","type":""}],"src":"2132:139:21"},{"body":{"nodeType":"YulBlock","src":"2343:263:21","statements":[{"body":{"nodeType":"YulBlock","src":"2389:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2391:77:21"},"nodeType":"YulFunctionCall","src":"2391:79:21"},"nodeType":"YulExpressionStatement","src":"2391:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2364:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2373:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2360:3:21"},"nodeType":"YulFunctionCall","src":"2360:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2385:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2356:3:21"},"nodeType":"YulFunctionCall","src":"2356:32:21"},"nodeType":"YulIf","src":"2353:2:21"},{"nodeType":"YulBlock","src":"2482:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2497:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"2511:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2501:6:21","type":""}]},{"nodeType":"YulAssignment","src":"2526:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2561:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"2572:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2557:3:21"},"nodeType":"YulFunctionCall","src":"2557:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2581:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2536:20:21"},"nodeType":"YulFunctionCall","src":"2536:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2526:6:21"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2313:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2324:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2336:6:21","type":""}],"src":"2277:329:21"},{"body":{"nodeType":"YulBlock","src":"2695:391:21","statements":[{"body":{"nodeType":"YulBlock","src":"2741:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2743:77:21"},"nodeType":"YulFunctionCall","src":"2743:79:21"},"nodeType":"YulExpressionStatement","src":"2743:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2716:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2725:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2712:3:21"},"nodeType":"YulFunctionCall","src":"2712:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2737:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2708:3:21"},"nodeType":"YulFunctionCall","src":"2708:32:21"},"nodeType":"YulIf","src":"2705:2:21"},{"nodeType":"YulBlock","src":"2834:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2849:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"2863:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2853:6:21","type":""}]},{"nodeType":"YulAssignment","src":"2878:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2913:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"2924:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2909:3:21"},"nodeType":"YulFunctionCall","src":"2909:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2933:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2888:20:21"},"nodeType":"YulFunctionCall","src":"2888:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2878:6:21"}]}]},{"nodeType":"YulBlock","src":"2961:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2976:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"2990:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2980:6:21","type":""}]},{"nodeType":"YulAssignment","src":"3006:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3041:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"3052:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3037:3:21"},"nodeType":"YulFunctionCall","src":"3037:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3061:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3016:20:21"},"nodeType":"YulFunctionCall","src":"3016:53:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3006:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2657:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2668:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2680:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2688:6:21","type":""}],"src":"2612:474:21"},{"body":{"nodeType":"YulBlock","src":"3192:519:21","statements":[{"body":{"nodeType":"YulBlock","src":"3238:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3240:77:21"},"nodeType":"YulFunctionCall","src":"3240:79:21"},"nodeType":"YulExpressionStatement","src":"3240:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3213:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"3222:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3209:3:21"},"nodeType":"YulFunctionCall","src":"3209:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"3234:2:21","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3205:3:21"},"nodeType":"YulFunctionCall","src":"3205:32:21"},"nodeType":"YulIf","src":"3202:2:21"},{"nodeType":"YulBlock","src":"3331:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3346:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3360:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3350:6:21","type":""}]},{"nodeType":"YulAssignment","src":"3375:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3410:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"3421:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3406:3:21"},"nodeType":"YulFunctionCall","src":"3406:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3430:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3385:20:21"},"nodeType":"YulFunctionCall","src":"3385:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3375:6:21"}]}]},{"nodeType":"YulBlock","src":"3458:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3473:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3487:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3477:6:21","type":""}]},{"nodeType":"YulAssignment","src":"3503:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3538:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"3549:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3534:3:21"},"nodeType":"YulFunctionCall","src":"3534:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3558:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3513:20:21"},"nodeType":"YulFunctionCall","src":"3513:53:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3503:6:21"}]}]},{"nodeType":"YulBlock","src":"3586:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3601:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3615:2:21","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3605:6:21","type":""}]},{"nodeType":"YulAssignment","src":"3631:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3666:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"3677:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3662:3:21"},"nodeType":"YulFunctionCall","src":"3662:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3686:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3641:20:21"},"nodeType":"YulFunctionCall","src":"3641:53:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3631:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3146:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3157:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3169:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3177:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3185:6:21","type":""}],"src":"3092:619:21"},{"body":{"nodeType":"YulBlock","src":"3843:817:21","statements":[{"body":{"nodeType":"YulBlock","src":"3890:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3892:77:21"},"nodeType":"YulFunctionCall","src":"3892:79:21"},"nodeType":"YulExpressionStatement","src":"3892:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3864:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"3873:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3860:3:21"},"nodeType":"YulFunctionCall","src":"3860:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"3885:3:21","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3856:3:21"},"nodeType":"YulFunctionCall","src":"3856:33:21"},"nodeType":"YulIf","src":"3853:2:21"},{"nodeType":"YulBlock","src":"3983:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3998:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"4012:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4002:6:21","type":""}]},{"nodeType":"YulAssignment","src":"4027:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4062:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4073:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4058:3:21"},"nodeType":"YulFunctionCall","src":"4058:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4082:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4037:20:21"},"nodeType":"YulFunctionCall","src":"4037:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4027:6:21"}]}]},{"nodeType":"YulBlock","src":"4110:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"4125:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"4139:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4129:6:21","type":""}]},{"nodeType":"YulAssignment","src":"4155:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4190:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4201:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4186:3:21"},"nodeType":"YulFunctionCall","src":"4186:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4210:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4165:20:21"},"nodeType":"YulFunctionCall","src":"4165:53:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4155:6:21"}]}]},{"nodeType":"YulBlock","src":"4238:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"4253:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"4267:2:21","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4257:6:21","type":""}]},{"nodeType":"YulAssignment","src":"4283:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4318:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4329:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4314:3:21"},"nodeType":"YulFunctionCall","src":"4314:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4338:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4293:20:21"},"nodeType":"YulFunctionCall","src":"4293:53:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4283:6:21"}]}]},{"nodeType":"YulBlock","src":"4366:287:21","statements":[{"nodeType":"YulVariableDeclaration","src":"4381:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4412:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4423:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4408:3:21"},"nodeType":"YulFunctionCall","src":"4408:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4395:12:21"},"nodeType":"YulFunctionCall","src":"4395:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4385:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4474:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"4476:77:21"},"nodeType":"YulFunctionCall","src":"4476:79:21"},"nodeType":"YulExpressionStatement","src":"4476:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4446:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4454:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4443:2:21"},"nodeType":"YulFunctionCall","src":"4443:30:21"},"nodeType":"YulIf","src":"4440:2:21"},{"nodeType":"YulAssignment","src":"4571:72:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4615:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4626:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4611:3:21"},"nodeType":"YulFunctionCall","src":"4611:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4635:7:21"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"4581:29:21"},"nodeType":"YulFunctionCall","src":"4581:62:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4571:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3789:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3800:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3812:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3820:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3828:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3836:6:21","type":""}],"src":"3717:943:21"},{"body":{"nodeType":"YulBlock","src":"4746:388:21","statements":[{"body":{"nodeType":"YulBlock","src":"4792:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4794:77:21"},"nodeType":"YulFunctionCall","src":"4794:79:21"},"nodeType":"YulExpressionStatement","src":"4794:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4767:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"4776:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4763:3:21"},"nodeType":"YulFunctionCall","src":"4763:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"4788:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4759:3:21"},"nodeType":"YulFunctionCall","src":"4759:32:21"},"nodeType":"YulIf","src":"4756:2:21"},{"nodeType":"YulBlock","src":"4885:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"4900:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"4914:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4904:6:21","type":""}]},{"nodeType":"YulAssignment","src":"4929:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4964:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4975:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4960:3:21"},"nodeType":"YulFunctionCall","src":"4960:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4984:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4939:20:21"},"nodeType":"YulFunctionCall","src":"4939:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4929:6:21"}]}]},{"nodeType":"YulBlock","src":"5012:115:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5027:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"5041:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5031:6:21","type":""}]},{"nodeType":"YulAssignment","src":"5057:60:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5089:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"5100:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5085:3:21"},"nodeType":"YulFunctionCall","src":"5085:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5109:7:21"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"5067:17:21"},"nodeType":"YulFunctionCall","src":"5067:50:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5057:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4708:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4719:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4731:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4739:6:21","type":""}],"src":"4666:468:21"},{"body":{"nodeType":"YulBlock","src":"5223:391:21","statements":[{"body":{"nodeType":"YulBlock","src":"5269:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5271:77:21"},"nodeType":"YulFunctionCall","src":"5271:79:21"},"nodeType":"YulExpressionStatement","src":"5271:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5244:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"5253:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5240:3:21"},"nodeType":"YulFunctionCall","src":"5240:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"5265:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5236:3:21"},"nodeType":"YulFunctionCall","src":"5236:32:21"},"nodeType":"YulIf","src":"5233:2:21"},{"nodeType":"YulBlock","src":"5362:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5377:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"5391:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5381:6:21","type":""}]},{"nodeType":"YulAssignment","src":"5406:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5441:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"5452:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5437:3:21"},"nodeType":"YulFunctionCall","src":"5437:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5461:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5416:20:21"},"nodeType":"YulFunctionCall","src":"5416:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5406:6:21"}]}]},{"nodeType":"YulBlock","src":"5489:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5504:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"5518:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5508:6:21","type":""}]},{"nodeType":"YulAssignment","src":"5534:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5569:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"5580:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5565:3:21"},"nodeType":"YulFunctionCall","src":"5565:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5589:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5544:20:21"},"nodeType":"YulFunctionCall","src":"5544:53:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5534:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5185:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5196:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5208:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5216:6:21","type":""}],"src":"5140:474:21"},{"body":{"nodeType":"YulBlock","src":"5685:262:21","statements":[{"body":{"nodeType":"YulBlock","src":"5731:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5733:77:21"},"nodeType":"YulFunctionCall","src":"5733:79:21"},"nodeType":"YulExpressionStatement","src":"5733:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5706:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"5715:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5702:3:21"},"nodeType":"YulFunctionCall","src":"5702:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"5727:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5698:3:21"},"nodeType":"YulFunctionCall","src":"5698:32:21"},"nodeType":"YulIf","src":"5695:2:21"},{"nodeType":"YulBlock","src":"5824:116:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5839:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"5853:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5843:6:21","type":""}]},{"nodeType":"YulAssignment","src":"5868:62:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5902:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"5913:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5898:3:21"},"nodeType":"YulFunctionCall","src":"5898:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5922:7:21"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"5878:19:21"},"nodeType":"YulFunctionCall","src":"5878:52:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5868:6:21"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5655:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5666:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5678:6:21","type":""}],"src":"5620:327:21"},{"body":{"nodeType":"YulBlock","src":"6029:273:21","statements":[{"body":{"nodeType":"YulBlock","src":"6075:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6077:77:21"},"nodeType":"YulFunctionCall","src":"6077:79:21"},"nodeType":"YulExpressionStatement","src":"6077:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6050:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"6059:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6046:3:21"},"nodeType":"YulFunctionCall","src":"6046:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"6071:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6042:3:21"},"nodeType":"YulFunctionCall","src":"6042:32:21"},"nodeType":"YulIf","src":"6039:2:21"},{"nodeType":"YulBlock","src":"6168:127:21","statements":[{"nodeType":"YulVariableDeclaration","src":"6183:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"6197:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6187:6:21","type":""}]},{"nodeType":"YulAssignment","src":"6212:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6257:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"6268:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6253:3:21"},"nodeType":"YulFunctionCall","src":"6253:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6277:7:21"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"6222:30:21"},"nodeType":"YulFunctionCall","src":"6222:63:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6212:6:21"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5999:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6010:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6022:6:21","type":""}],"src":"5953:349:21"},{"body":{"nodeType":"YulBlock","src":"6384:433:21","statements":[{"body":{"nodeType":"YulBlock","src":"6430:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6432:77:21"},"nodeType":"YulFunctionCall","src":"6432:79:21"},"nodeType":"YulExpressionStatement","src":"6432:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6405:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"6414:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6401:3:21"},"nodeType":"YulFunctionCall","src":"6401:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"6426:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6397:3:21"},"nodeType":"YulFunctionCall","src":"6397:32:21"},"nodeType":"YulIf","src":"6394:2:21"},{"nodeType":"YulBlock","src":"6523:287:21","statements":[{"nodeType":"YulVariableDeclaration","src":"6538:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6569:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6580:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6565:3:21"},"nodeType":"YulFunctionCall","src":"6565:17:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6552:12:21"},"nodeType":"YulFunctionCall","src":"6552:31:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6542:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6630:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"6632:77:21"},"nodeType":"YulFunctionCall","src":"6632:79:21"},"nodeType":"YulExpressionStatement","src":"6632:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6602:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"6610:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6599:2:21"},"nodeType":"YulFunctionCall","src":"6599:30:21"},"nodeType":"YulIf","src":"6596:2:21"},{"nodeType":"YulAssignment","src":"6727:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6772:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"6783:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6768:3:21"},"nodeType":"YulFunctionCall","src":"6768:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6792:7:21"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"6737:30:21"},"nodeType":"YulFunctionCall","src":"6737:63:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6727:6:21"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6354:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6365:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6377:6:21","type":""}],"src":"6308:509:21"},{"body":{"nodeType":"YulBlock","src":"6926:731:21","statements":[{"body":{"nodeType":"YulBlock","src":"6972:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6974:77:21"},"nodeType":"YulFunctionCall","src":"6974:79:21"},"nodeType":"YulExpressionStatement","src":"6974:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6947:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"6956:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6943:3:21"},"nodeType":"YulFunctionCall","src":"6943:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"6968:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6939:3:21"},"nodeType":"YulFunctionCall","src":"6939:32:21"},"nodeType":"YulIf","src":"6936:2:21"},{"nodeType":"YulBlock","src":"7065:287:21","statements":[{"nodeType":"YulVariableDeclaration","src":"7080:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7111:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7122:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7107:3:21"},"nodeType":"YulFunctionCall","src":"7107:17:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7094:12:21"},"nodeType":"YulFunctionCall","src":"7094:31:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7084:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"7172:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"7174:77:21"},"nodeType":"YulFunctionCall","src":"7174:79:21"},"nodeType":"YulExpressionStatement","src":"7174:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7144:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"7152:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7141:2:21"},"nodeType":"YulFunctionCall","src":"7141:30:21"},"nodeType":"YulIf","src":"7138:2:21"},{"nodeType":"YulAssignment","src":"7269:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7314:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"7325:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7310:3:21"},"nodeType":"YulFunctionCall","src":"7310:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7334:7:21"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7279:30:21"},"nodeType":"YulFunctionCall","src":"7279:63:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7269:6:21"}]}]},{"nodeType":"YulBlock","src":"7362:288:21","statements":[{"nodeType":"YulVariableDeclaration","src":"7377:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7408:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7419:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7404:3:21"},"nodeType":"YulFunctionCall","src":"7404:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7391:12:21"},"nodeType":"YulFunctionCall","src":"7391:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7381:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"7470:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"7472:77:21"},"nodeType":"YulFunctionCall","src":"7472:79:21"},"nodeType":"YulExpressionStatement","src":"7472:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7442:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"7450:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7439:2:21"},"nodeType":"YulFunctionCall","src":"7439:30:21"},"nodeType":"YulIf","src":"7436:2:21"},{"nodeType":"YulAssignment","src":"7567:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7612:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"7623:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7608:3:21"},"nodeType":"YulFunctionCall","src":"7608:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7632:7:21"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7577:30:21"},"nodeType":"YulFunctionCall","src":"7577:63:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7567:6:21"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6888:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6899:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6911:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6919:6:21","type":""}],"src":"6823:834:21"},{"body":{"nodeType":"YulBlock","src":"7756:561:21","statements":[{"body":{"nodeType":"YulBlock","src":"7802:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7804:77:21"},"nodeType":"YulFunctionCall","src":"7804:79:21"},"nodeType":"YulExpressionStatement","src":"7804:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7777:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"7786:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7773:3:21"},"nodeType":"YulFunctionCall","src":"7773:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"7798:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7769:3:21"},"nodeType":"YulFunctionCall","src":"7769:32:21"},"nodeType":"YulIf","src":"7766:2:21"},{"nodeType":"YulBlock","src":"7895:287:21","statements":[{"nodeType":"YulVariableDeclaration","src":"7910:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7941:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7952:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7937:3:21"},"nodeType":"YulFunctionCall","src":"7937:17:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7924:12:21"},"nodeType":"YulFunctionCall","src":"7924:31:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7914:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"8002:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"8004:77:21"},"nodeType":"YulFunctionCall","src":"8004:79:21"},"nodeType":"YulExpressionStatement","src":"8004:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7974:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"7982:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7971:2:21"},"nodeType":"YulFunctionCall","src":"7971:30:21"},"nodeType":"YulIf","src":"7968:2:21"},{"nodeType":"YulAssignment","src":"8099:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8144:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"8155:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8140:3:21"},"nodeType":"YulFunctionCall","src":"8140:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8164:7:21"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"8109:30:21"},"nodeType":"YulFunctionCall","src":"8109:63:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8099:6:21"}]}]},{"nodeType":"YulBlock","src":"8192:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"8207:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"8221:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8211:6:21","type":""}]},{"nodeType":"YulAssignment","src":"8237:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8272:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"8283:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8268:3:21"},"nodeType":"YulFunctionCall","src":"8268:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8292:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"8247:20:21"},"nodeType":"YulFunctionCall","src":"8247:53:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8237:6:21"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7718:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7729:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7741:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7749:6:21","type":""}],"src":"7663:654:21"},{"body":{"nodeType":"YulBlock","src":"8389:263:21","statements":[{"body":{"nodeType":"YulBlock","src":"8435:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8437:77:21"},"nodeType":"YulFunctionCall","src":"8437:79:21"},"nodeType":"YulExpressionStatement","src":"8437:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8410:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"8419:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8406:3:21"},"nodeType":"YulFunctionCall","src":"8406:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"8431:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8402:3:21"},"nodeType":"YulFunctionCall","src":"8402:32:21"},"nodeType":"YulIf","src":"8399:2:21"},{"nodeType":"YulBlock","src":"8528:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"8543:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"8557:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8547:6:21","type":""}]},{"nodeType":"YulAssignment","src":"8572:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8607:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"8618:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8603:3:21"},"nodeType":"YulFunctionCall","src":"8603:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8627:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"8582:20:21"},"nodeType":"YulFunctionCall","src":"8582:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8572:6:21"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8359:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8370:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8382:6:21","type":""}],"src":"8323:329:21"},{"body":{"nodeType":"YulBlock","src":"8751:561:21","statements":[{"body":{"nodeType":"YulBlock","src":"8797:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8799:77:21"},"nodeType":"YulFunctionCall","src":"8799:79:21"},"nodeType":"YulExpressionStatement","src":"8799:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8772:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"8781:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8768:3:21"},"nodeType":"YulFunctionCall","src":"8768:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"8793:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8764:3:21"},"nodeType":"YulFunctionCall","src":"8764:32:21"},"nodeType":"YulIf","src":"8761:2:21"},{"nodeType":"YulBlock","src":"8890:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"8905:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"8919:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8909:6:21","type":""}]},{"nodeType":"YulAssignment","src":"8934:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8969:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"8980:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8965:3:21"},"nodeType":"YulFunctionCall","src":"8965:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8989:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"8944:20:21"},"nodeType":"YulFunctionCall","src":"8944:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8934:6:21"}]}]},{"nodeType":"YulBlock","src":"9017:288:21","statements":[{"nodeType":"YulVariableDeclaration","src":"9032:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9063:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9074:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9059:3:21"},"nodeType":"YulFunctionCall","src":"9059:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9046:12:21"},"nodeType":"YulFunctionCall","src":"9046:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9036:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"9125:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9127:77:21"},"nodeType":"YulFunctionCall","src":"9127:79:21"},"nodeType":"YulExpressionStatement","src":"9127:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9097:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"9105:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9094:2:21"},"nodeType":"YulFunctionCall","src":"9094:30:21"},"nodeType":"YulIf","src":"9091:2:21"},{"nodeType":"YulAssignment","src":"9222:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9267:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"9278:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9263:3:21"},"nodeType":"YulFunctionCall","src":"9263:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9287:7:21"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"9232:30:21"},"nodeType":"YulFunctionCall","src":"9232:63:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9222:6:21"}]}]}]},"name":"abi_decode_tuple_t_uint256t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8713:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8724:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8736:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8744:6:21","type":""}],"src":"8658:654:21"},{"body":{"nodeType":"YulBlock","src":"9438:859:21","statements":[{"body":{"nodeType":"YulBlock","src":"9484:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9486:77:21"},"nodeType":"YulFunctionCall","src":"9486:79:21"},"nodeType":"YulExpressionStatement","src":"9486:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9459:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"9468:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9455:3:21"},"nodeType":"YulFunctionCall","src":"9455:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"9480:2:21","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9451:3:21"},"nodeType":"YulFunctionCall","src":"9451:32:21"},"nodeType":"YulIf","src":"9448:2:21"},{"nodeType":"YulBlock","src":"9577:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"9592:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"9606:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9596:6:21","type":""}]},{"nodeType":"YulAssignment","src":"9621:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9656:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"9667:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9652:3:21"},"nodeType":"YulFunctionCall","src":"9652:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9676:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9631:20:21"},"nodeType":"YulFunctionCall","src":"9631:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9621:6:21"}]}]},{"nodeType":"YulBlock","src":"9704:288:21","statements":[{"nodeType":"YulVariableDeclaration","src":"9719:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9750:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9761:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9746:3:21"},"nodeType":"YulFunctionCall","src":"9746:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9733:12:21"},"nodeType":"YulFunctionCall","src":"9733:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9723:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"9812:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9814:77:21"},"nodeType":"YulFunctionCall","src":"9814:79:21"},"nodeType":"YulExpressionStatement","src":"9814:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9784:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"9792:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9781:2:21"},"nodeType":"YulFunctionCall","src":"9781:30:21"},"nodeType":"YulIf","src":"9778:2:21"},{"nodeType":"YulAssignment","src":"9909:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9954:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"9965:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9950:3:21"},"nodeType":"YulFunctionCall","src":"9950:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9974:7:21"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"9919:30:21"},"nodeType":"YulFunctionCall","src":"9919:63:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9909:6:21"}]}]},{"nodeType":"YulBlock","src":"10002:288:21","statements":[{"nodeType":"YulVariableDeclaration","src":"10017:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10048:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10059:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10044:3:21"},"nodeType":"YulFunctionCall","src":"10044:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10031:12:21"},"nodeType":"YulFunctionCall","src":"10031:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10021:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"10110:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"10112:77:21"},"nodeType":"YulFunctionCall","src":"10112:79:21"},"nodeType":"YulExpressionStatement","src":"10112:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10082:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"10090:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10079:2:21"},"nodeType":"YulFunctionCall","src":"10079:30:21"},"nodeType":"YulIf","src":"10076:2:21"},{"nodeType":"YulAssignment","src":"10207:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10252:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"10263:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10248:3:21"},"nodeType":"YulFunctionCall","src":"10248:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10272:7:21"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"10217:30:21"},"nodeType":"YulFunctionCall","src":"10217:63:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10207:6:21"}]}]}]},"name":"abi_decode_tuple_t_uint256t_string_memory_ptrt_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9392:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9403:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9415:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9423:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9431:6:21","type":""}],"src":"9318:979:21"},{"body":{"nodeType":"YulBlock","src":"10386:391:21","statements":[{"body":{"nodeType":"YulBlock","src":"10432:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10434:77:21"},"nodeType":"YulFunctionCall","src":"10434:79:21"},"nodeType":"YulExpressionStatement","src":"10434:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10407:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"10416:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10403:3:21"},"nodeType":"YulFunctionCall","src":"10403:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"10428:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10399:3:21"},"nodeType":"YulFunctionCall","src":"10399:32:21"},"nodeType":"YulIf","src":"10396:2:21"},{"nodeType":"YulBlock","src":"10525:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"10540:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"10554:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10544:6:21","type":""}]},{"nodeType":"YulAssignment","src":"10569:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10604:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"10615:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10600:3:21"},"nodeType":"YulFunctionCall","src":"10600:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10624:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10579:20:21"},"nodeType":"YulFunctionCall","src":"10579:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10569:6:21"}]}]},{"nodeType":"YulBlock","src":"10652:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"10667:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"10681:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10671:6:21","type":""}]},{"nodeType":"YulAssignment","src":"10697:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10732:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"10743:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10728:3:21"},"nodeType":"YulFunctionCall","src":"10728:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10752:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10707:20:21"},"nodeType":"YulFunctionCall","src":"10707:53:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10697:6:21"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10348:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10359:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10371:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10379:6:21","type":""}],"src":"10303:474:21"},{"body":{"nodeType":"YulBlock","src":"10893:689:21","statements":[{"body":{"nodeType":"YulBlock","src":"10939:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10941:77:21"},"nodeType":"YulFunctionCall","src":"10941:79:21"},"nodeType":"YulExpressionStatement","src":"10941:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10914:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"10923:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10910:3:21"},"nodeType":"YulFunctionCall","src":"10910:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"10935:2:21","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10906:3:21"},"nodeType":"YulFunctionCall","src":"10906:32:21"},"nodeType":"YulIf","src":"10903:2:21"},{"nodeType":"YulBlock","src":"11032:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"11047:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"11061:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11051:6:21","type":""}]},{"nodeType":"YulAssignment","src":"11076:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11111:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"11122:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11107:3:21"},"nodeType":"YulFunctionCall","src":"11107:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11131:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11086:20:21"},"nodeType":"YulFunctionCall","src":"11086:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11076:6:21"}]}]},{"nodeType":"YulBlock","src":"11159:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"11174:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"11188:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11178:6:21","type":""}]},{"nodeType":"YulAssignment","src":"11204:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11239:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"11250:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11235:3:21"},"nodeType":"YulFunctionCall","src":"11235:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11259:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11214:20:21"},"nodeType":"YulFunctionCall","src":"11214:53:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11204:6:21"}]}]},{"nodeType":"YulBlock","src":"11287:288:21","statements":[{"nodeType":"YulVariableDeclaration","src":"11302:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11333:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11344:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11329:3:21"},"nodeType":"YulFunctionCall","src":"11329:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11316:12:21"},"nodeType":"YulFunctionCall","src":"11316:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11306:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"11395:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"11397:77:21"},"nodeType":"YulFunctionCall","src":"11397:79:21"},"nodeType":"YulExpressionStatement","src":"11397:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11367:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"11375:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11364:2:21"},"nodeType":"YulFunctionCall","src":"11364:30:21"},"nodeType":"YulIf","src":"11361:2:21"},{"nodeType":"YulAssignment","src":"11492:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11537:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"11548:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11533:3:21"},"nodeType":"YulFunctionCall","src":"11533:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11557:7:21"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"11502:30:21"},"nodeType":"YulFunctionCall","src":"11502:63:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11492:6:21"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10847:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10858:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10870:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10878:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10886:6:21","type":""}],"src":"10783:799:21"},{"body":{"nodeType":"YulBlock","src":"11688:96:21","statements":[{"nodeType":"YulAssignment","src":"11698:80:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11766:6:21"},{"name":"pos","nodeType":"YulIdentifier","src":"11774:3:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulIdentifier","src":"11712:53:21"},"nodeType":"YulFunctionCall","src":"11712:66:21"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"11698:10:21"}]}]},"name":"abi_encodeUpdatedPos_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"11661:6:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11669:3:21","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"11677:10:21","type":""}],"src":"11588:196:21"},{"body":{"nodeType":"YulBlock","src":"11855:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11872:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11895:5:21"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"11877:17:21"},"nodeType":"YulFunctionCall","src":"11877:24:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11865:6:21"},"nodeType":"YulFunctionCall","src":"11865:37:21"},"nodeType":"YulExpressionStatement","src":"11865:37:21"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11843:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11850:3:21","type":""}],"src":"11790:118:21"},{"body":{"nodeType":"YulBlock","src":"12086:847:21","statements":[{"nodeType":"YulVariableDeclaration","src":"12096:78:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12168:5:21"}],"functionName":{"name":"array_length_t_array$_t_string_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"12110:57:21"},"nodeType":"YulFunctionCall","src":"12110:64:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"12100:6:21","type":""}]},{"nodeType":"YulAssignment","src":"12183:103:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12274:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"12279:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12190:83:21"},"nodeType":"YulFunctionCall","src":"12190:96:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12183:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"12295:20:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"12312:3:21"},"variables":[{"name":"headStart","nodeType":"YulTypedName","src":"12299:9:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12324:39:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12340:3:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12349:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"12357:4:21","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"12345:3:21"},"nodeType":"YulFunctionCall","src":"12345:17:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12336:3:21"},"nodeType":"YulFunctionCall","src":"12336:27:21"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"12328:4:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12372:81:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12447:5:21"}],"functionName":{"name":"array_dataslot_t_array$_t_string_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"12387:59:21"},"nodeType":"YulFunctionCall","src":"12387:66:21"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"12376:7:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12462:21:21","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"12476:7:21"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"12466:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"12552:336:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12573:3:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12582:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"12588:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12578:3:21"},"nodeType":"YulFunctionCall","src":"12578:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12566:6:21"},"nodeType":"YulFunctionCall","src":"12566:33:21"},"nodeType":"YulExpressionStatement","src":"12566:33:21"},{"nodeType":"YulVariableDeclaration","src":"12612:34:21","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"12639:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12633:5:21"},"nodeType":"YulFunctionCall","src":"12633:13:21"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"12616:13:21","type":""}]},{"nodeType":"YulAssignment","src":"12659:92:21","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"12731:13:21"},{"name":"tail","nodeType":"YulIdentifier","src":"12746:4:21"}],"functionName":{"name":"abi_encodeUpdatedPos_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulIdentifier","src":"12667:63:21"},"nodeType":"YulFunctionCall","src":"12667:84:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12659:4:21"}]},{"nodeType":"YulAssignment","src":"12764:80:21","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"12837:6:21"}],"functionName":{"name":"array_nextElement_t_array$_t_string_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"12774:62:21"},"nodeType":"YulFunctionCall","src":"12774:70:21"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"12764:6:21"}]},{"nodeType":"YulAssignment","src":"12857:21:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12868:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"12873:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12864:3:21"},"nodeType":"YulFunctionCall","src":"12864:14:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12857:3:21"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12514:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"12517:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12511:2:21"},"nodeType":"YulFunctionCall","src":"12511:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"12525:18:21","statements":[{"nodeType":"YulAssignment","src":"12527:14:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12536:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"12539:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12532:3:21"},"nodeType":"YulFunctionCall","src":"12532:9:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"12527:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"12496:14:21","statements":[{"nodeType":"YulVariableDeclaration","src":"12498:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"12507:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"12502:1:21","type":""}]}]},"src":"12492:396:21"},{"nodeType":"YulAssignment","src":"12897:11:21","value":{"name":"tail","nodeType":"YulIdentifier","src":"12904:4:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12897:3:21"}]},{"nodeType":"YulAssignment","src":"12917:10:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"12924:3:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12917:3:21"}]}]},"name":"abi_encode_t_array$_t_string_memory_ptr_$dyn_memory_ptr_to_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12065:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12072:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12081:3:21","type":""}],"src":"11942:991:21"},{"body":{"nodeType":"YulBlock","src":"12998:50:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13015:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13035:5:21"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"13020:14:21"},"nodeType":"YulFunctionCall","src":"13020:21:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13008:6:21"},"nodeType":"YulFunctionCall","src":"13008:34:21"},"nodeType":"YulExpressionStatement","src":"13008:34:21"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12986:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12993:3:21","type":""}],"src":"12939:109:21"},{"body":{"nodeType":"YulBlock","src":"13144:270:21","statements":[{"nodeType":"YulVariableDeclaration","src":"13154:52:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13200:5:21"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"13168:31:21"},"nodeType":"YulFunctionCall","src":"13168:38:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13158:6:21","type":""}]},{"nodeType":"YulAssignment","src":"13215:77:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13280:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"13285:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13222:57:21"},"nodeType":"YulFunctionCall","src":"13222:70:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13215:3:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13327:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"13334:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13323:3:21"},"nodeType":"YulFunctionCall","src":"13323:16:21"},{"name":"pos","nodeType":"YulIdentifier","src":"13341:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"13346:6:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"13301:21:21"},"nodeType":"YulFunctionCall","src":"13301:52:21"},"nodeType":"YulExpressionStatement","src":"13301:52:21"},{"nodeType":"YulAssignment","src":"13362:46:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13373:3:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13400:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"13378:21:21"},"nodeType":"YulFunctionCall","src":"13378:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13369:3:21"},"nodeType":"YulFunctionCall","src":"13369:39:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13362:3:21"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13125:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13132:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13140:3:21","type":""}],"src":"13054:360:21"},{"body":{"nodeType":"YulBlock","src":"13551:740:21","statements":[{"nodeType":"YulVariableDeclaration","src":"13561:29:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13584:5:21"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"13578:5:21"},"nodeType":"YulFunctionCall","src":"13578:12:21"},"variables":[{"name":"slotValue","nodeType":"YulTypedName","src":"13565:9:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13599:50:21","value":{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"13639:9:21"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"13613:25:21"},"nodeType":"YulFunctionCall","src":"13613:36:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13603:6:21","type":""}]},{"nodeType":"YulAssignment","src":"13658:95:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13741:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"13746:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"13665:75:21"},"nodeType":"YulFunctionCall","src":"13665:88:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13658:3:21"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"13802:130:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13855:3:21"},{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"13864:9:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13879:4:21","type":"","value":"0xff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13875:3:21"},"nodeType":"YulFunctionCall","src":"13875:9:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13860:3:21"},"nodeType":"YulFunctionCall","src":"13860:25:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13848:6:21"},"nodeType":"YulFunctionCall","src":"13848:38:21"},"nodeType":"YulExpressionStatement","src":"13848:38:21"},{"nodeType":"YulAssignment","src":"13899:23:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13910:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"13915:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13906:3:21"},"nodeType":"YulFunctionCall","src":"13906:16:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13899:3:21"}]}]},"nodeType":"YulCase","src":"13795:137:21","value":{"kind":"number","nodeType":"YulLiteral","src":"13800:1:21","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"13948:337:21","statements":[{"nodeType":"YulVariableDeclaration","src":"13993:56:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14043:5:21"}],"functionName":{"name":"array_dataslot_t_bytes_storage_ptr","nodeType":"YulIdentifier","src":"14008:34:21"},"nodeType":"YulFunctionCall","src":"14008:41:21"},"variables":[{"name":"dataPos","nodeType":"YulTypedName","src":"13997:7:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14062:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"14071:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"14066:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"14129:110:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14158:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"14163:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14154:3:21"},"nodeType":"YulFunctionCall","src":"14154:11:21"},{"arguments":[{"name":"dataPos","nodeType":"YulIdentifier","src":"14173:7:21"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"14167:5:21"},"nodeType":"YulFunctionCall","src":"14167:14:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14147:6:21"},"nodeType":"YulFunctionCall","src":"14147:35:21"},"nodeType":"YulExpressionStatement","src":"14147:35:21"},{"nodeType":"YulAssignment","src":"14199:26:21","value":{"arguments":[{"name":"dataPos","nodeType":"YulIdentifier","src":"14214:7:21"},{"kind":"number","nodeType":"YulLiteral","src":"14223:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14210:3:21"},"nodeType":"YulFunctionCall","src":"14210:15:21"},"variableNames":[{"name":"dataPos","nodeType":"YulIdentifier","src":"14199:7:21"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"14096:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"14099:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14093:2:21"},"nodeType":"YulFunctionCall","src":"14093:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"14107:21:21","statements":[{"nodeType":"YulAssignment","src":"14109:17:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"14118:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"14121:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14114:3:21"},"nodeType":"YulFunctionCall","src":"14114:12:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"14109:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"14089:3:21","statements":[]},"src":"14085:154:21"},{"nodeType":"YulAssignment","src":"14252:23:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14263:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"14268:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14259:3:21"},"nodeType":"YulFunctionCall","src":"14259:16:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"14252:3:21"}]}]},"nodeType":"YulCase","src":"13941:344:21","value":{"kind":"number","nodeType":"YulLiteral","src":"13946:1:21","type":"","value":"1"}}],"expression":{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"13773:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13784:1:21","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13769:3:21"},"nodeType":"YulFunctionCall","src":"13769:17:21"},"nodeType":"YulSwitch","src":"13762:523:21"}]},"name":"abi_encode_t_bytes_storage_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13532:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13539:3:21","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13547:3:21","type":""}],"src":"13442:849:21"},{"body":{"nodeType":"YulBlock","src":"14379:262:21","statements":[{"nodeType":"YulVariableDeclaration","src":"14389:53:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14436:5:21"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"14403:32:21"},"nodeType":"YulFunctionCall","src":"14403:39:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14393:6:21","type":""}]},{"nodeType":"YulAssignment","src":"14451:68:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14507:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"14512:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr","nodeType":"YulIdentifier","src":"14458:48:21"},"nodeType":"YulFunctionCall","src":"14458:61:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14451:3:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14554:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"14561:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14550:3:21"},"nodeType":"YulFunctionCall","src":"14550:16:21"},{"name":"pos","nodeType":"YulIdentifier","src":"14568:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"14573:6:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"14528:21:21"},"nodeType":"YulFunctionCall","src":"14528:52:21"},"nodeType":"YulExpressionStatement","src":"14528:52:21"},{"nodeType":"YulAssignment","src":"14589:46:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14600:3:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14627:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"14605:21:21"},"nodeType":"YulFunctionCall","src":"14605:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14596:3:21"},"nodeType":"YulFunctionCall","src":"14596:39:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14589:3:21"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14360:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14367:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14375:3:21","type":""}],"src":"14297:344:21"},{"body":{"nodeType":"YulBlock","src":"14739:272:21","statements":[{"nodeType":"YulVariableDeclaration","src":"14749:53:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14796:5:21"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"14763:32:21"},"nodeType":"YulFunctionCall","src":"14763:39:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14753:6:21","type":""}]},{"nodeType":"YulAssignment","src":"14811:78:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14877:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"14882:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14818:58:21"},"nodeType":"YulFunctionCall","src":"14818:71:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14811:3:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14924:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"14931:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14920:3:21"},"nodeType":"YulFunctionCall","src":"14920:16:21"},{"name":"pos","nodeType":"YulIdentifier","src":"14938:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"14943:6:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"14898:21:21"},"nodeType":"YulFunctionCall","src":"14898:52:21"},"nodeType":"YulExpressionStatement","src":"14898:52:21"},{"nodeType":"YulAssignment","src":"14959:46:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14970:3:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14997:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"14975:21:21"},"nodeType":"YulFunctionCall","src":"14975:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14966:3:21"},"nodeType":"YulFunctionCall","src":"14966:39:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14959:3:21"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14720:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14727:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14735:3:21","type":""}],"src":"14647:364:21"},{"body":{"nodeType":"YulBlock","src":"15127:267:21","statements":[{"nodeType":"YulVariableDeclaration","src":"15137:53:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15184:5:21"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"15151:32:21"},"nodeType":"YulFunctionCall","src":"15151:39:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"15141:6:21","type":""}]},{"nodeType":"YulAssignment","src":"15199:96:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15283:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"15288:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"15206:76:21"},"nodeType":"YulFunctionCall","src":"15206:89:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15199:3:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15330:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"15337:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15326:3:21"},"nodeType":"YulFunctionCall","src":"15326:16:21"},{"name":"pos","nodeType":"YulIdentifier","src":"15344:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"15349:6:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"15304:21:21"},"nodeType":"YulFunctionCall","src":"15304:52:21"},"nodeType":"YulExpressionStatement","src":"15304:52:21"},{"nodeType":"YulAssignment","src":"15365:23:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15376:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"15381:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15372:3:21"},"nodeType":"YulFunctionCall","src":"15372:16:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15365:3:21"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15108:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15115:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15123:3:21","type":""}],"src":"15017:377:21"},{"body":{"nodeType":"YulBlock","src":"15546:220:21","statements":[{"nodeType":"YulAssignment","src":"15556:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15622:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"15627:2:21","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15563:58:21"},"nodeType":"YulFunctionCall","src":"15563:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15556:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15728:3:21"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"15639:88:21"},"nodeType":"YulFunctionCall","src":"15639:93:21"},"nodeType":"YulExpressionStatement","src":"15639:93:21"},{"nodeType":"YulAssignment","src":"15741:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15752:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"15757:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15748:3:21"},"nodeType":"YulFunctionCall","src":"15748:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15741:3:21"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15534:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15542:3:21","type":""}],"src":"15400:366:21"},{"body":{"nodeType":"YulBlock","src":"15918:220:21","statements":[{"nodeType":"YulAssignment","src":"15928:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15994:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"15999:2:21","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15935:58:21"},"nodeType":"YulFunctionCall","src":"15935:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15928:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16100:3:21"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"16011:88:21"},"nodeType":"YulFunctionCall","src":"16011:93:21"},"nodeType":"YulExpressionStatement","src":"16011:93:21"},{"nodeType":"YulAssignment","src":"16113:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16124:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"16129:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16120:3:21"},"nodeType":"YulFunctionCall","src":"16120:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16113:3:21"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15906:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15914:3:21","type":""}],"src":"15772:366:21"},{"body":{"nodeType":"YulBlock","src":"16290:220:21","statements":[{"nodeType":"YulAssignment","src":"16300:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16366:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"16371:2:21","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16307:58:21"},"nodeType":"YulFunctionCall","src":"16307:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16300:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16472:3:21"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"16383:88:21"},"nodeType":"YulFunctionCall","src":"16383:93:21"},"nodeType":"YulExpressionStatement","src":"16383:93:21"},{"nodeType":"YulAssignment","src":"16485:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16496:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"16501:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16492:3:21"},"nodeType":"YulFunctionCall","src":"16492:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16485:3:21"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16278:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16286:3:21","type":""}],"src":"16144:366:21"},{"body":{"nodeType":"YulBlock","src":"16662:220:21","statements":[{"nodeType":"YulAssignment","src":"16672:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16738:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"16743:2:21","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16679:58:21"},"nodeType":"YulFunctionCall","src":"16679:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16672:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16844:3:21"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"16755:88:21"},"nodeType":"YulFunctionCall","src":"16755:93:21"},"nodeType":"YulExpressionStatement","src":"16755:93:21"},{"nodeType":"YulAssignment","src":"16857:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16868:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"16873:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16864:3:21"},"nodeType":"YulFunctionCall","src":"16864:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16857:3:21"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16650:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16658:3:21","type":""}],"src":"16516:366:21"},{"body":{"nodeType":"YulBlock","src":"17034:220:21","statements":[{"nodeType":"YulAssignment","src":"17044:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17110:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"17115:2:21","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17051:58:21"},"nodeType":"YulFunctionCall","src":"17051:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17044:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17216:3:21"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"17127:88:21"},"nodeType":"YulFunctionCall","src":"17127:93:21"},"nodeType":"YulExpressionStatement","src":"17127:93:21"},{"nodeType":"YulAssignment","src":"17229:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17240:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"17245:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17236:3:21"},"nodeType":"YulFunctionCall","src":"17236:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17229:3:21"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17022:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17030:3:21","type":""}],"src":"16888:366:21"},{"body":{"nodeType":"YulBlock","src":"17406:220:21","statements":[{"nodeType":"YulAssignment","src":"17416:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17482:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"17487:2:21","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17423:58:21"},"nodeType":"YulFunctionCall","src":"17423:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17416:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17588:3:21"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"17499:88:21"},"nodeType":"YulFunctionCall","src":"17499:93:21"},"nodeType":"YulExpressionStatement","src":"17499:93:21"},{"nodeType":"YulAssignment","src":"17601:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17612:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"17617:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17608:3:21"},"nodeType":"YulFunctionCall","src":"17608:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17601:3:21"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17394:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17402:3:21","type":""}],"src":"17260:366:21"},{"body":{"nodeType":"YulBlock","src":"17778:220:21","statements":[{"nodeType":"YulAssignment","src":"17788:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17854:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"17859:2:21","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17795:58:21"},"nodeType":"YulFunctionCall","src":"17795:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17788:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17960:3:21"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"17871:88:21"},"nodeType":"YulFunctionCall","src":"17871:93:21"},"nodeType":"YulExpressionStatement","src":"17871:93:21"},{"nodeType":"YulAssignment","src":"17973:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17984:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"17989:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17980:3:21"},"nodeType":"YulFunctionCall","src":"17980:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17973:3:21"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17766:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17774:3:21","type":""}],"src":"17632:366:21"},{"body":{"nodeType":"YulBlock","src":"18150:220:21","statements":[{"nodeType":"YulAssignment","src":"18160:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18226:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"18231:2:21","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18167:58:21"},"nodeType":"YulFunctionCall","src":"18167:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18160:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18332:3:21"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"18243:88:21"},"nodeType":"YulFunctionCall","src":"18243:93:21"},"nodeType":"YulExpressionStatement","src":"18243:93:21"},{"nodeType":"YulAssignment","src":"18345:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18356:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"18361:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18352:3:21"},"nodeType":"YulFunctionCall","src":"18352:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18345:3:21"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18138:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18146:3:21","type":""}],"src":"18004:366:21"},{"body":{"nodeType":"YulBlock","src":"18522:220:21","statements":[{"nodeType":"YulAssignment","src":"18532:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18598:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"18603:2:21","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18539:58:21"},"nodeType":"YulFunctionCall","src":"18539:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18532:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18704:3:21"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"18615:88:21"},"nodeType":"YulFunctionCall","src":"18615:93:21"},"nodeType":"YulExpressionStatement","src":"18615:93:21"},{"nodeType":"YulAssignment","src":"18717:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18728:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"18733:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18724:3:21"},"nodeType":"YulFunctionCall","src":"18724:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18717:3:21"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18510:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18518:3:21","type":""}],"src":"18376:366:21"},{"body":{"nodeType":"YulBlock","src":"18813:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18830:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18853:5:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"18835:17:21"},"nodeType":"YulFunctionCall","src":"18835:24:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18823:6:21"},"nodeType":"YulFunctionCall","src":"18823:37:21"},"nodeType":"YulExpressionStatement","src":"18823:37:21"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18801:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18808:3:21","type":""}],"src":"18748:118:21"},{"body":{"nodeType":"YulBlock","src":"19007:138:21","statements":[{"nodeType":"YulAssignment","src":"19018:101:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19106:6:21"},{"name":"pos","nodeType":"YulIdentifier","src":"19115:3:21"}],"functionName":{"name":"abi_encode_t_bytes_storage_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"19025:80:21"},"nodeType":"YulFunctionCall","src":"19025:94:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19018:3:21"}]},{"nodeType":"YulAssignment","src":"19129:10:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"19136:3:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19129:3:21"}]}]},"name":"abi_encode_tuple_packed_t_bytes_storage_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18986:3:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18992:6:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19003:3:21","type":""}],"src":"18872:273:21"},{"body":{"nodeType":"YulBlock","src":"19335:251:21","statements":[{"nodeType":"YulAssignment","src":"19346:102:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19435:6:21"},{"name":"pos","nodeType":"YulIdentifier","src":"19444:3:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"19353:81:21"},"nodeType":"YulFunctionCall","src":"19353:95:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19346:3:21"}]},{"nodeType":"YulAssignment","src":"19458:102:21","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"19547:6:21"},{"name":"pos","nodeType":"YulIdentifier","src":"19556:3:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"19465:81:21"},"nodeType":"YulFunctionCall","src":"19465:95:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19458:3:21"}]},{"nodeType":"YulAssignment","src":"19570:10:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"19577:3:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19570:3:21"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19306:3:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19312:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19320:6:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19331:3:21","type":""}],"src":"19151:435:21"},{"body":{"nodeType":"YulBlock","src":"19690:124:21","statements":[{"nodeType":"YulAssignment","src":"19700:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19712:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19723:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19708:3:21"},"nodeType":"YulFunctionCall","src":"19708:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19700:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19780:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19793:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19804:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19789:3:21"},"nodeType":"YulFunctionCall","src":"19789:17:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"19736:43:21"},"nodeType":"YulFunctionCall","src":"19736:71:21"},"nodeType":"YulExpressionStatement","src":"19736:71:21"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19662:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19674:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19685:4:21","type":""}],"src":"19592:222:21"},{"body":{"nodeType":"YulBlock","src":"20020:440:21","statements":[{"nodeType":"YulAssignment","src":"20030:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20042:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20053:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20038:3:21"},"nodeType":"YulFunctionCall","src":"20038:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20030:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20111:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20124:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20135:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20120:3:21"},"nodeType":"YulFunctionCall","src":"20120:17:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"20067:43:21"},"nodeType":"YulFunctionCall","src":"20067:71:21"},"nodeType":"YulExpressionStatement","src":"20067:71:21"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"20192:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20205:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20216:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20201:3:21"},"nodeType":"YulFunctionCall","src":"20201:18:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"20148:43:21"},"nodeType":"YulFunctionCall","src":"20148:72:21"},"nodeType":"YulExpressionStatement","src":"20148:72:21"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"20274:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20287:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20298:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20283:3:21"},"nodeType":"YulFunctionCall","src":"20283:18:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"20230:43:21"},"nodeType":"YulFunctionCall","src":"20230:72:21"},"nodeType":"YulExpressionStatement","src":"20230:72:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20323:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20334:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20319:3:21"},"nodeType":"YulFunctionCall","src":"20319:18:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20343:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"20349:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20339:3:21"},"nodeType":"YulFunctionCall","src":"20339:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20312:6:21"},"nodeType":"YulFunctionCall","src":"20312:48:21"},"nodeType":"YulExpressionStatement","src":"20312:48:21"},{"nodeType":"YulAssignment","src":"20369:84:21","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"20439:6:21"},{"name":"tail","nodeType":"YulIdentifier","src":"20448:4:21"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20377:61:21"},"nodeType":"YulFunctionCall","src":"20377:76:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20369:4:21"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19968:9:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"19980:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"19988:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19996:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20004:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20015:4:21","type":""}],"src":"19820:640:21"},{"body":{"nodeType":"YulBlock","src":"20634:245:21","statements":[{"nodeType":"YulAssignment","src":"20644:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20656:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20667:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20652:3:21"},"nodeType":"YulFunctionCall","src":"20652:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20644:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20691:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20702:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20687:3:21"},"nodeType":"YulFunctionCall","src":"20687:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20710:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"20716:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20706:3:21"},"nodeType":"YulFunctionCall","src":"20706:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20680:6:21"},"nodeType":"YulFunctionCall","src":"20680:47:21"},"nodeType":"YulExpressionStatement","src":"20680:47:21"},{"nodeType":"YulAssignment","src":"20736:136:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20858:6:21"},{"name":"tail","nodeType":"YulIdentifier","src":"20867:4:21"}],"functionName":{"name":"abi_encode_t_array$_t_string_memory_ptr_$dyn_memory_ptr_to_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20744:113:21"},"nodeType":"YulFunctionCall","src":"20744:128:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20736:4:21"}]}]},"name":"abi_encode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr__to_t_array$_t_string_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20606:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20618:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20629:4:21","type":""}],"src":"20466:413:21"},{"body":{"nodeType":"YulBlock","src":"20977:118:21","statements":[{"nodeType":"YulAssignment","src":"20987:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20999:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21010:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20995:3:21"},"nodeType":"YulFunctionCall","src":"20995:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20987:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21061:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21074:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21085:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21070:3:21"},"nodeType":"YulFunctionCall","src":"21070:17:21"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"21023:37:21"},"nodeType":"YulFunctionCall","src":"21023:65:21"},"nodeType":"YulExpressionStatement","src":"21023:65:21"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20949:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20961:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20972:4:21","type":""}],"src":"20885:210:21"},{"body":{"nodeType":"YulBlock","src":"21219:195:21","statements":[{"nodeType":"YulAssignment","src":"21229:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21241:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21252:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21237:3:21"},"nodeType":"YulFunctionCall","src":"21237:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21229:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21276:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21287:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21272:3:21"},"nodeType":"YulFunctionCall","src":"21272:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21295:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"21301:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21291:3:21"},"nodeType":"YulFunctionCall","src":"21291:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21265:6:21"},"nodeType":"YulFunctionCall","src":"21265:47:21"},"nodeType":"YulExpressionStatement","src":"21265:47:21"},{"nodeType":"YulAssignment","src":"21321:86:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21393:6:21"},{"name":"tail","nodeType":"YulIdentifier","src":"21402:4:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21329:63:21"},"nodeType":"YulFunctionCall","src":"21329:78:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21321:4:21"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21191:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21203:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21214:4:21","type":""}],"src":"21101:313:21"},{"body":{"nodeType":"YulBlock","src":"21634:501:21","statements":[{"nodeType":"YulAssignment","src":"21644:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21656:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21667:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21652:3:21"},"nodeType":"YulFunctionCall","src":"21652:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21644:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21691:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21702:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21687:3:21"},"nodeType":"YulFunctionCall","src":"21687:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21710:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"21716:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21706:3:21"},"nodeType":"YulFunctionCall","src":"21706:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21680:6:21"},"nodeType":"YulFunctionCall","src":"21680:47:21"},"nodeType":"YulExpressionStatement","src":"21680:47:21"},{"nodeType":"YulAssignment","src":"21736:86:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21808:6:21"},{"name":"tail","nodeType":"YulIdentifier","src":"21817:4:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21744:63:21"},"nodeType":"YulFunctionCall","src":"21744:78:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21736:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21843:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21854:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21839:3:21"},"nodeType":"YulFunctionCall","src":"21839:18:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21863:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"21869:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21859:3:21"},"nodeType":"YulFunctionCall","src":"21859:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21832:6:21"},"nodeType":"YulFunctionCall","src":"21832:48:21"},"nodeType":"YulExpressionStatement","src":"21832:48:21"},{"nodeType":"YulAssignment","src":"21889:86:21","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"21961:6:21"},{"name":"tail","nodeType":"YulIdentifier","src":"21970:4:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21897:63:21"},"nodeType":"YulFunctionCall","src":"21897:78:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21889:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21996:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22007:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21992:3:21"},"nodeType":"YulFunctionCall","src":"21992:18:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22016:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"22022:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22012:3:21"},"nodeType":"YulFunctionCall","src":"22012:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21985:6:21"},"nodeType":"YulFunctionCall","src":"21985:48:21"},"nodeType":"YulExpressionStatement","src":"21985:48:21"},{"nodeType":"YulAssignment","src":"22042:86:21","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"22114:6:21"},{"name":"tail","nodeType":"YulIdentifier","src":"22123:4:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22050:63:21"},"nodeType":"YulFunctionCall","src":"22050:78:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22042:4:21"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21590:9:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21602:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21610:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21618:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21629:4:21","type":""}],"src":"21420:715:21"},{"body":{"nodeType":"YulBlock","src":"22312:248:21","statements":[{"nodeType":"YulAssignment","src":"22322:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22334:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22345:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22330:3:21"},"nodeType":"YulFunctionCall","src":"22330:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22322:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22369:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22380:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22365:3:21"},"nodeType":"YulFunctionCall","src":"22365:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22388:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"22394:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22384:3:21"},"nodeType":"YulFunctionCall","src":"22384:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22358:6:21"},"nodeType":"YulFunctionCall","src":"22358:47:21"},"nodeType":"YulExpressionStatement","src":"22358:47:21"},{"nodeType":"YulAssignment","src":"22414:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22548:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22422:124:21"},"nodeType":"YulFunctionCall","src":"22422:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22414:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22292:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22307:4:21","type":""}],"src":"22141:419:21"},{"body":{"nodeType":"YulBlock","src":"22737:248:21","statements":[{"nodeType":"YulAssignment","src":"22747:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22759:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22770:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22755:3:21"},"nodeType":"YulFunctionCall","src":"22755:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22747:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22794:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22805:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22790:3:21"},"nodeType":"YulFunctionCall","src":"22790:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22813:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"22819:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22809:3:21"},"nodeType":"YulFunctionCall","src":"22809:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22783:6:21"},"nodeType":"YulFunctionCall","src":"22783:47:21"},"nodeType":"YulExpressionStatement","src":"22783:47:21"},{"nodeType":"YulAssignment","src":"22839:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22973:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22847:124:21"},"nodeType":"YulFunctionCall","src":"22847:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22839:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22717:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22732:4:21","type":""}],"src":"22566:419:21"},{"body":{"nodeType":"YulBlock","src":"23162:248:21","statements":[{"nodeType":"YulAssignment","src":"23172:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23184:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23195:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23180:3:21"},"nodeType":"YulFunctionCall","src":"23180:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23172:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23219:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23230:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23215:3:21"},"nodeType":"YulFunctionCall","src":"23215:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23238:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"23244:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23234:3:21"},"nodeType":"YulFunctionCall","src":"23234:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23208:6:21"},"nodeType":"YulFunctionCall","src":"23208:47:21"},"nodeType":"YulExpressionStatement","src":"23208:47:21"},{"nodeType":"YulAssignment","src":"23264:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23398:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23272:124:21"},"nodeType":"YulFunctionCall","src":"23272:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23264:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23142:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23157:4:21","type":""}],"src":"22991:419:21"},{"body":{"nodeType":"YulBlock","src":"23587:248:21","statements":[{"nodeType":"YulAssignment","src":"23597:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23609:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23620:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23605:3:21"},"nodeType":"YulFunctionCall","src":"23605:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23597:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23644:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23655:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23640:3:21"},"nodeType":"YulFunctionCall","src":"23640:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23663:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"23669:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23659:3:21"},"nodeType":"YulFunctionCall","src":"23659:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23633:6:21"},"nodeType":"YulFunctionCall","src":"23633:47:21"},"nodeType":"YulExpressionStatement","src":"23633:47:21"},{"nodeType":"YulAssignment","src":"23689:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23823:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23697:124:21"},"nodeType":"YulFunctionCall","src":"23697:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23689:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23567:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23582:4:21","type":""}],"src":"23416:419:21"},{"body":{"nodeType":"YulBlock","src":"24012:248:21","statements":[{"nodeType":"YulAssignment","src":"24022:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24034:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"24045:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24030:3:21"},"nodeType":"YulFunctionCall","src":"24030:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24022:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24069:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"24080:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24065:3:21"},"nodeType":"YulFunctionCall","src":"24065:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24088:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"24094:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24084:3:21"},"nodeType":"YulFunctionCall","src":"24084:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24058:6:21"},"nodeType":"YulFunctionCall","src":"24058:47:21"},"nodeType":"YulExpressionStatement","src":"24058:47:21"},{"nodeType":"YulAssignment","src":"24114:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24248:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24122:124:21"},"nodeType":"YulFunctionCall","src":"24122:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24114:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23992:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24007:4:21","type":""}],"src":"23841:419:21"},{"body":{"nodeType":"YulBlock","src":"24437:248:21","statements":[{"nodeType":"YulAssignment","src":"24447:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24459:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"24470:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24455:3:21"},"nodeType":"YulFunctionCall","src":"24455:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24447:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24494:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"24505:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24490:3:21"},"nodeType":"YulFunctionCall","src":"24490:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24513:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"24519:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24509:3:21"},"nodeType":"YulFunctionCall","src":"24509:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24483:6:21"},"nodeType":"YulFunctionCall","src":"24483:47:21"},"nodeType":"YulExpressionStatement","src":"24483:47:21"},{"nodeType":"YulAssignment","src":"24539:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24673:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24547:124:21"},"nodeType":"YulFunctionCall","src":"24547:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24539:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24417:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24432:4:21","type":""}],"src":"24266:419:21"},{"body":{"nodeType":"YulBlock","src":"24862:248:21","statements":[{"nodeType":"YulAssignment","src":"24872:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24884:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"24895:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24880:3:21"},"nodeType":"YulFunctionCall","src":"24880:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24872:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24919:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"24930:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24915:3:21"},"nodeType":"YulFunctionCall","src":"24915:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24938:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"24944:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24934:3:21"},"nodeType":"YulFunctionCall","src":"24934:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24908:6:21"},"nodeType":"YulFunctionCall","src":"24908:47:21"},"nodeType":"YulExpressionStatement","src":"24908:47:21"},{"nodeType":"YulAssignment","src":"24964:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25098:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24972:124:21"},"nodeType":"YulFunctionCall","src":"24972:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24964:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24842:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24857:4:21","type":""}],"src":"24691:419:21"},{"body":{"nodeType":"YulBlock","src":"25287:248:21","statements":[{"nodeType":"YulAssignment","src":"25297:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25309:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"25320:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25305:3:21"},"nodeType":"YulFunctionCall","src":"25305:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25297:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25344:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"25355:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25340:3:21"},"nodeType":"YulFunctionCall","src":"25340:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25363:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"25369:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25359:3:21"},"nodeType":"YulFunctionCall","src":"25359:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25333:6:21"},"nodeType":"YulFunctionCall","src":"25333:47:21"},"nodeType":"YulExpressionStatement","src":"25333:47:21"},{"nodeType":"YulAssignment","src":"25389:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25523:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25397:124:21"},"nodeType":"YulFunctionCall","src":"25397:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25389:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25267:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25282:4:21","type":""}],"src":"25116:419:21"},{"body":{"nodeType":"YulBlock","src":"25712:248:21","statements":[{"nodeType":"YulAssignment","src":"25722:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25734:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"25745:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25730:3:21"},"nodeType":"YulFunctionCall","src":"25730:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25722:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25769:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"25780:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25765:3:21"},"nodeType":"YulFunctionCall","src":"25765:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25788:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"25794:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25784:3:21"},"nodeType":"YulFunctionCall","src":"25784:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25758:6:21"},"nodeType":"YulFunctionCall","src":"25758:47:21"},"nodeType":"YulExpressionStatement","src":"25758:47:21"},{"nodeType":"YulAssignment","src":"25814:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25948:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25822:124:21"},"nodeType":"YulFunctionCall","src":"25822:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25814:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25692:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25707:4:21","type":""}],"src":"25541:419:21"},{"body":{"nodeType":"YulBlock","src":"26064:124:21","statements":[{"nodeType":"YulAssignment","src":"26074:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26086:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"26097:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26082:3:21"},"nodeType":"YulFunctionCall","src":"26082:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26074:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26154:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26167:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"26178:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26163:3:21"},"nodeType":"YulFunctionCall","src":"26163:17:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"26110:43:21"},"nodeType":"YulFunctionCall","src":"26110:71:21"},"nodeType":"YulExpressionStatement","src":"26110:71:21"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26036:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26048:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26059:4:21","type":""}],"src":"25966:222:21"},{"body":{"nodeType":"YulBlock","src":"26340:277:21","statements":[{"nodeType":"YulAssignment","src":"26350:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26362:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"26373:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26358:3:21"},"nodeType":"YulFunctionCall","src":"26358:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26350:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26430:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26443:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"26454:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26439:3:21"},"nodeType":"YulFunctionCall","src":"26439:17:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"26386:43:21"},"nodeType":"YulFunctionCall","src":"26386:71:21"},"nodeType":"YulExpressionStatement","src":"26386:71:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26478:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"26489:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26474:3:21"},"nodeType":"YulFunctionCall","src":"26474:18:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26498:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"26504:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26494:3:21"},"nodeType":"YulFunctionCall","src":"26494:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26467:6:21"},"nodeType":"YulFunctionCall","src":"26467:48:21"},"nodeType":"YulExpressionStatement","src":"26467:48:21"},{"nodeType":"YulAssignment","src":"26524:86:21","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26596:6:21"},{"name":"tail","nodeType":"YulIdentifier","src":"26605:4:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26532:63:21"},"nodeType":"YulFunctionCall","src":"26532:78:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26524:4:21"}]}]},"name":"abi_encode_tuple_t_uint256_t_string_memory_ptr__to_t_uint256_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26304:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26316:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26324:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26335:4:21","type":""}],"src":"26194:423:21"},{"body":{"nodeType":"YulBlock","src":"26797:359:21","statements":[{"nodeType":"YulAssignment","src":"26807:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26819:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"26830:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26815:3:21"},"nodeType":"YulFunctionCall","src":"26815:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26807:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26887:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26900:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"26911:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26896:3:21"},"nodeType":"YulFunctionCall","src":"26896:17:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"26843:43:21"},"nodeType":"YulFunctionCall","src":"26843:71:21"},"nodeType":"YulExpressionStatement","src":"26843:71:21"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26968:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26981:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"26992:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26977:3:21"},"nodeType":"YulFunctionCall","src":"26977:18:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"26924:43:21"},"nodeType":"YulFunctionCall","src":"26924:72:21"},"nodeType":"YulExpressionStatement","src":"26924:72:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27017:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"27028:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27013:3:21"},"nodeType":"YulFunctionCall","src":"27013:18:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27037:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"27043:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27033:3:21"},"nodeType":"YulFunctionCall","src":"27033:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27006:6:21"},"nodeType":"YulFunctionCall","src":"27006:48:21"},"nodeType":"YulExpressionStatement","src":"27006:48:21"},{"nodeType":"YulAssignment","src":"27063:86:21","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"27135:6:21"},{"name":"tail","nodeType":"YulIdentifier","src":"27144:4:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27071:63:21"},"nodeType":"YulFunctionCall","src":"27071:78:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27063:4:21"}]}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_string_memory_ptr__to_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26753:9:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"26765:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26773:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26781:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26792:4:21","type":""}],"src":"26623:533:21"},{"body":{"nodeType":"YulBlock","src":"27203:88:21","statements":[{"nodeType":"YulAssignment","src":"27213:30:21","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"27223:18:21"},"nodeType":"YulFunctionCall","src":"27223:20:21"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27213:6:21"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27272:6:21"},{"name":"size","nodeType":"YulIdentifier","src":"27280:4:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"27252:19:21"},"nodeType":"YulFunctionCall","src":"27252:33:21"},"nodeType":"YulExpressionStatement","src":"27252:33:21"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"27187:4:21","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"27196:6:21","type":""}],"src":"27162:129:21"},{"body":{"nodeType":"YulBlock","src":"27337:35:21","statements":[{"nodeType":"YulAssignment","src":"27347:19:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27363:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27357:5:21"},"nodeType":"YulFunctionCall","src":"27357:9:21"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27347:6:21"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"27330:6:21","type":""}],"src":"27297:75:21"},{"body":{"nodeType":"YulBlock","src":"27444:241:21","statements":[{"body":{"nodeType":"YulBlock","src":"27549:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"27551:16:21"},"nodeType":"YulFunctionCall","src":"27551:18:21"},"nodeType":"YulExpressionStatement","src":"27551:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"27521:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"27529:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27518:2:21"},"nodeType":"YulFunctionCall","src":"27518:30:21"},"nodeType":"YulIf","src":"27515:2:21"},{"nodeType":"YulAssignment","src":"27581:37:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"27611:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"27589:21:21"},"nodeType":"YulFunctionCall","src":"27589:29:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"27581:4:21"}]},{"nodeType":"YulAssignment","src":"27655:23:21","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"27667:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"27673:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27663:3:21"},"nodeType":"YulFunctionCall","src":"27663:15:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"27655:4:21"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"27428:6:21","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"27439:4:21","type":""}],"src":"27378:307:21"},{"body":{"nodeType":"YulBlock","src":"27758:241:21","statements":[{"body":{"nodeType":"YulBlock","src":"27863:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"27865:16:21"},"nodeType":"YulFunctionCall","src":"27865:18:21"},"nodeType":"YulExpressionStatement","src":"27865:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"27835:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"27843:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27832:2:21"},"nodeType":"YulFunctionCall","src":"27832:30:21"},"nodeType":"YulIf","src":"27829:2:21"},{"nodeType":"YulAssignment","src":"27895:37:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"27925:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"27903:21:21"},"nodeType":"YulFunctionCall","src":"27903:29:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"27895:4:21"}]},{"nodeType":"YulAssignment","src":"27969:23:21","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"27981:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"27987:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27977:3:21"},"nodeType":"YulFunctionCall","src":"27977:15:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"27969:4:21"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"27742:6:21","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"27753:4:21","type":""}],"src":"27691:308:21"},{"body":{"nodeType":"YulBlock","src":"28087:60:21","statements":[{"nodeType":"YulAssignment","src":"28097:11:21","value":{"name":"ptr","nodeType":"YulIdentifier","src":"28105:3:21"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"28097:4:21"}]},{"nodeType":"YulAssignment","src":"28118:22:21","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"28130:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"28135:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28126:3:21"},"nodeType":"YulFunctionCall","src":"28126:14:21"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"28118:4:21"}]}]},"name":"array_dataslot_t_array$_t_string_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"28074:3:21","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"28082:4:21","type":""}],"src":"28005:142:21"},{"body":{"nodeType":"YulBlock","src":"28210:87:21","statements":[{"nodeType":"YulAssignment","src":"28220:11:21","value":{"name":"ptr","nodeType":"YulIdentifier","src":"28228:3:21"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"28220:4:21"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28248:1:21","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"28251:3:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28241:6:21"},"nodeType":"YulFunctionCall","src":"28241:14:21"},"nodeType":"YulExpressionStatement","src":"28241:14:21"},{"nodeType":"YulAssignment","src":"28264:26:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28282:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28285:4:21","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"28272:9:21"},"nodeType":"YulFunctionCall","src":"28272:18:21"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"28264:4:21"}]}]},"name":"array_dataslot_t_bytes_storage_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"28197:3:21","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"28205:4:21","type":""}],"src":"28153:144:21"},{"body":{"nodeType":"YulBlock","src":"28387:40:21","statements":[{"nodeType":"YulAssignment","src":"28398:22:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28414:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28408:5:21"},"nodeType":"YulFunctionCall","src":"28408:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"28398:6:21"}]}]},"name":"array_length_t_array$_t_string_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28370:5:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"28380:6:21","type":""}],"src":"28303:124:21"},{"body":{"nodeType":"YulBlock","src":"28491:40:21","statements":[{"nodeType":"YulAssignment","src":"28502:22:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28518:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28512:5:21"},"nodeType":"YulFunctionCall","src":"28512:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"28502:6:21"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28474:5:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"28484:6:21","type":""}],"src":"28433:98:21"},{"body":{"nodeType":"YulBlock","src":"28596:40:21","statements":[{"nodeType":"YulAssignment","src":"28607:22:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28623:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28617:5:21"},"nodeType":"YulFunctionCall","src":"28617:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"28607:6:21"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28579:5:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"28589:6:21","type":""}],"src":"28537:99:21"},{"body":{"nodeType":"YulBlock","src":"28727:38:21","statements":[{"nodeType":"YulAssignment","src":"28737:22:21","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"28749:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"28754:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28745:3:21"},"nodeType":"YulFunctionCall","src":"28745:14:21"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"28737:4:21"}]}]},"name":"array_nextElement_t_array$_t_string_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"28714:3:21","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"28722:4:21","type":""}],"src":"28642:123:21"},{"body":{"nodeType":"YulBlock","src":"28892:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28909:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"28914:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28902:6:21"},"nodeType":"YulFunctionCall","src":"28902:19:21"},"nodeType":"YulExpressionStatement","src":"28902:19:21"},{"nodeType":"YulAssignment","src":"28930:29:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28949:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"28954:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28945:3:21"},"nodeType":"YulFunctionCall","src":"28945:14:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"28930:11:21"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28864:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"28869:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"28880:11:21","type":""}],"src":"28771:194:21"},{"body":{"nodeType":"YulBlock","src":"29066:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29083:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"29088:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29076:6:21"},"nodeType":"YulFunctionCall","src":"29076:19:21"},"nodeType":"YulExpressionStatement","src":"29076:19:21"},{"nodeType":"YulAssignment","src":"29104:29:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29123:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"29128:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29119:3:21"},"nodeType":"YulFunctionCall","src":"29119:14:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"29104:11:21"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29038:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"29043:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"29054:11:21","type":""}],"src":"28971:168:21"},{"body":{"nodeType":"YulBlock","src":"29258:34:21","statements":[{"nodeType":"YulAssignment","src":"29268:18:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"29283:3:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"29268:11:21"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29230:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"29235:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"29246:11:21","type":""}],"src":"29145:147:21"},{"body":{"nodeType":"YulBlock","src":"29384:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29401:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"29406:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29394:6:21"},"nodeType":"YulFunctionCall","src":"29394:19:21"},"nodeType":"YulExpressionStatement","src":"29394:19:21"},{"nodeType":"YulAssignment","src":"29422:29:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29441:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"29446:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29437:3:21"},"nodeType":"YulFunctionCall","src":"29437:14:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"29422:11:21"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29356:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"29361:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"29372:11:21","type":""}],"src":"29298:159:21"},{"body":{"nodeType":"YulBlock","src":"29559:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29576:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"29581:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29569:6:21"},"nodeType":"YulFunctionCall","src":"29569:19:21"},"nodeType":"YulExpressionStatement","src":"29569:19:21"},{"nodeType":"YulAssignment","src":"29597:29:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29616:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"29621:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29612:3:21"},"nodeType":"YulFunctionCall","src":"29612:14:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"29597:11:21"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29531:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"29536:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"29547:11:21","type":""}],"src":"29463:169:21"},{"body":{"nodeType":"YulBlock","src":"29752:34:21","statements":[{"nodeType":"YulAssignment","src":"29762:18:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"29777:3:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"29762:11:21"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29724:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"29729:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"29740:11:21","type":""}],"src":"29638:148:21"},{"body":{"nodeType":"YulBlock","src":"29836:261:21","statements":[{"nodeType":"YulAssignment","src":"29846:25:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"29869:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"29851:17:21"},"nodeType":"YulFunctionCall","src":"29851:20:21"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"29846:1:21"}]},{"nodeType":"YulAssignment","src":"29880:25:21","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"29903:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"29885:17:21"},"nodeType":"YulFunctionCall","src":"29885:20:21"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"29880:1:21"}]},{"body":{"nodeType":"YulBlock","src":"30043:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"30045:16:21"},"nodeType":"YulFunctionCall","src":"30045:18:21"},"nodeType":"YulExpressionStatement","src":"30045:18:21"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"29964:1:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29971:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"30039:1:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29967:3:21"},"nodeType":"YulFunctionCall","src":"29967:74:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"29961:2:21"},"nodeType":"YulFunctionCall","src":"29961:81:21"},"nodeType":"YulIf","src":"29958:2:21"},{"nodeType":"YulAssignment","src":"30075:16:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30086:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"30089:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30082:3:21"},"nodeType":"YulFunctionCall","src":"30082:9:21"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"30075:3:21"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"29823:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"29826:1:21","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"29832:3:21","type":""}],"src":"29792:305:21"},{"body":{"nodeType":"YulBlock","src":"30148:146:21","statements":[{"nodeType":"YulAssignment","src":"30158:25:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30181:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"30163:17:21"},"nodeType":"YulFunctionCall","src":"30163:20:21"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"30158:1:21"}]},{"nodeType":"YulAssignment","src":"30192:25:21","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"30215:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"30197:17:21"},"nodeType":"YulFunctionCall","src":"30197:20:21"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"30192:1:21"}]},{"body":{"nodeType":"YulBlock","src":"30239:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"30241:16:21"},"nodeType":"YulFunctionCall","src":"30241:18:21"},"nodeType":"YulExpressionStatement","src":"30241:18:21"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30233:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"30236:1:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"30230:2:21"},"nodeType":"YulFunctionCall","src":"30230:8:21"},"nodeType":"YulIf","src":"30227:2:21"},{"nodeType":"YulAssignment","src":"30271:17:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30283:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"30286:1:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30279:3:21"},"nodeType":"YulFunctionCall","src":"30279:9:21"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"30271:4:21"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"30134:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"30137:1:21","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"30143:4:21","type":""}],"src":"30103:191:21"},{"body":{"nodeType":"YulBlock","src":"30345:51:21","statements":[{"nodeType":"YulAssignment","src":"30355:35:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30384:5:21"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"30366:17:21"},"nodeType":"YulFunctionCall","src":"30366:24:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"30355:7:21"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30327:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"30337:7:21","type":""}],"src":"30300:96:21"},{"body":{"nodeType":"YulBlock","src":"30444:48:21","statements":[{"nodeType":"YulAssignment","src":"30454:32:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30479:5:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"30472:6:21"},"nodeType":"YulFunctionCall","src":"30472:13:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"30465:6:21"},"nodeType":"YulFunctionCall","src":"30465:21:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"30454:7:21"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30426:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"30436:7:21","type":""}],"src":"30402:90:21"},{"body":{"nodeType":"YulBlock","src":"30542:105:21","statements":[{"nodeType":"YulAssignment","src":"30552:89:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30567:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"30574:66:21","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"30563:3:21"},"nodeType":"YulFunctionCall","src":"30563:78:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"30552:7:21"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30524:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"30534:7:21","type":""}],"src":"30498:149:21"},{"body":{"nodeType":"YulBlock","src":"30698:81:21","statements":[{"nodeType":"YulAssignment","src":"30708:65:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30723:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"30730:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"30719:3:21"},"nodeType":"YulFunctionCall","src":"30719:54:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"30708:7:21"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30680:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"30690:7:21","type":""}],"src":"30653:126:21"},{"body":{"nodeType":"YulBlock","src":"30830:32:21","statements":[{"nodeType":"YulAssignment","src":"30840:16:21","value":{"name":"value","nodeType":"YulIdentifier","src":"30851:5:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"30840:7:21"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30812:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"30822:7:21","type":""}],"src":"30785:77:21"},{"body":{"nodeType":"YulBlock","src":"30919:103:21","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"30942:3:21"},{"name":"src","nodeType":"YulIdentifier","src":"30947:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"30952:6:21"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"30929:12:21"},"nodeType":"YulFunctionCall","src":"30929:30:21"},"nodeType":"YulExpressionStatement","src":"30929:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"31000:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"31005:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30996:3:21"},"nodeType":"YulFunctionCall","src":"30996:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"31014:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30989:6:21"},"nodeType":"YulFunctionCall","src":"30989:27:21"},"nodeType":"YulExpressionStatement","src":"30989:27:21"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"30901:3:21","type":""},{"name":"dst","nodeType":"YulTypedName","src":"30906:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"30911:6:21","type":""}],"src":"30868:154:21"},{"body":{"nodeType":"YulBlock","src":"31077:258:21","statements":[{"nodeType":"YulVariableDeclaration","src":"31087:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"31096:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"31091:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"31156:63:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"31181:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"31186:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31177:3:21"},"nodeType":"YulFunctionCall","src":"31177:11:21"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"31200:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"31205:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31196:3:21"},"nodeType":"YulFunctionCall","src":"31196:11:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"31190:5:21"},"nodeType":"YulFunctionCall","src":"31190:18:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31170:6:21"},"nodeType":"YulFunctionCall","src":"31170:39:21"},"nodeType":"YulExpressionStatement","src":"31170:39:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"31117:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"31120:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"31114:2:21"},"nodeType":"YulFunctionCall","src":"31114:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"31128:19:21","statements":[{"nodeType":"YulAssignment","src":"31130:15:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"31139:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"31142:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31135:3:21"},"nodeType":"YulFunctionCall","src":"31135:10:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"31130:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"31110:3:21","statements":[]},"src":"31106:113:21"},{"body":{"nodeType":"YulBlock","src":"31253:76:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"31303:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"31308:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31299:3:21"},"nodeType":"YulFunctionCall","src":"31299:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"31317:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31292:6:21"},"nodeType":"YulFunctionCall","src":"31292:27:21"},"nodeType":"YulExpressionStatement","src":"31292:27:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"31234:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"31237:6:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"31231:2:21"},"nodeType":"YulFunctionCall","src":"31231:13:21"},"nodeType":"YulIf","src":"31228:2:21"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"31059:3:21","type":""},{"name":"dst","nodeType":"YulTypedName","src":"31064:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"31069:6:21","type":""}],"src":"31028:307:21"},{"body":{"nodeType":"YulBlock","src":"31392:269:21","statements":[{"nodeType":"YulAssignment","src":"31402:22:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"31416:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"31422:1:21","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"31412:3:21"},"nodeType":"YulFunctionCall","src":"31412:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"31402:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"31433:38:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"31463:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"31469:1:21","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31459:3:21"},"nodeType":"YulFunctionCall","src":"31459:12:21"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"31437:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"31510:51:21","statements":[{"nodeType":"YulAssignment","src":"31524:27:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"31538:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"31546:4:21","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31534:3:21"},"nodeType":"YulFunctionCall","src":"31534:17:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"31524:6:21"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"31490:18:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"31483:6:21"},"nodeType":"YulFunctionCall","src":"31483:26:21"},"nodeType":"YulIf","src":"31480:2:21"},{"body":{"nodeType":"YulBlock","src":"31613:42:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"31627:16:21"},"nodeType":"YulFunctionCall","src":"31627:18:21"},"nodeType":"YulExpressionStatement","src":"31627:18:21"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"31577:18:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"31600:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"31608:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"31597:2:21"},"nodeType":"YulFunctionCall","src":"31597:14:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"31574:2:21"},"nodeType":"YulFunctionCall","src":"31574:38:21"},"nodeType":"YulIf","src":"31571:2:21"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"31376:4:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"31385:6:21","type":""}],"src":"31341:320:21"},{"body":{"nodeType":"YulBlock","src":"31710:238:21","statements":[{"nodeType":"YulVariableDeclaration","src":"31720:58:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31742:6:21"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"31772:4:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"31750:21:21"},"nodeType":"YulFunctionCall","src":"31750:27:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31738:3:21"},"nodeType":"YulFunctionCall","src":"31738:40:21"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"31724:10:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"31889:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"31891:16:21"},"nodeType":"YulFunctionCall","src":"31891:18:21"},"nodeType":"YulExpressionStatement","src":"31891:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"31832:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"31844:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"31829:2:21"},"nodeType":"YulFunctionCall","src":"31829:34:21"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"31868:10:21"},{"name":"memPtr","nodeType":"YulIdentifier","src":"31880:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"31865:2:21"},"nodeType":"YulFunctionCall","src":"31865:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"31826:2:21"},"nodeType":"YulFunctionCall","src":"31826:62:21"},"nodeType":"YulIf","src":"31823:2:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31927:2:21","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"31931:10:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31920:6:21"},"nodeType":"YulFunctionCall","src":"31920:22:21"},"nodeType":"YulExpressionStatement","src":"31920:22:21"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31696:6:21","type":""},{"name":"size","nodeType":"YulTypedName","src":"31704:4:21","type":""}],"src":"31667:281:21"},{"body":{"nodeType":"YulBlock","src":"31997:190:21","statements":[{"nodeType":"YulAssignment","src":"32007:33:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32034:5:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"32016:17:21"},"nodeType":"YulFunctionCall","src":"32016:24:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"32007:5:21"}]},{"body":{"nodeType":"YulBlock","src":"32130:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"32132:16:21"},"nodeType":"YulFunctionCall","src":"32132:18:21"},"nodeType":"YulExpressionStatement","src":"32132:18:21"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32055:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"32062:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"32052:2:21"},"nodeType":"YulFunctionCall","src":"32052:77:21"},"nodeType":"YulIf","src":"32049:2:21"},{"nodeType":"YulAssignment","src":"32161:20:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32172:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"32179:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32168:3:21"},"nodeType":"YulFunctionCall","src":"32168:13:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"32161:3:21"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31983:5:21","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"31993:3:21","type":""}],"src":"31954:233:21"},{"body":{"nodeType":"YulBlock","src":"32221:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32238:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32241:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32231:6:21"},"nodeType":"YulFunctionCall","src":"32231:88:21"},"nodeType":"YulExpressionStatement","src":"32231:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32335:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"32338:4:21","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32328:6:21"},"nodeType":"YulFunctionCall","src":"32328:15:21"},"nodeType":"YulExpressionStatement","src":"32328:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32359:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32362:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"32352:6:21"},"nodeType":"YulFunctionCall","src":"32352:15:21"},"nodeType":"YulExpressionStatement","src":"32352:15:21"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"32193:180:21"},{"body":{"nodeType":"YulBlock","src":"32407:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32424:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32427:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32417:6:21"},"nodeType":"YulFunctionCall","src":"32417:88:21"},"nodeType":"YulExpressionStatement","src":"32417:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32521:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"32524:4:21","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32514:6:21"},"nodeType":"YulFunctionCall","src":"32514:15:21"},"nodeType":"YulExpressionStatement","src":"32514:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32545:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32548:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"32538:6:21"},"nodeType":"YulFunctionCall","src":"32538:15:21"},"nodeType":"YulExpressionStatement","src":"32538:15:21"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"32379:180:21"},{"body":{"nodeType":"YulBlock","src":"32593:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32610:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32613:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32603:6:21"},"nodeType":"YulFunctionCall","src":"32603:88:21"},"nodeType":"YulExpressionStatement","src":"32603:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32707:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"32710:4:21","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32700:6:21"},"nodeType":"YulFunctionCall","src":"32700:15:21"},"nodeType":"YulExpressionStatement","src":"32700:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32731:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32734:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"32724:6:21"},"nodeType":"YulFunctionCall","src":"32724:15:21"},"nodeType":"YulExpressionStatement","src":"32724:15:21"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"32565:180:21"},{"body":{"nodeType":"YulBlock","src":"32779:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32796:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32799:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32789:6:21"},"nodeType":"YulFunctionCall","src":"32789:88:21"},"nodeType":"YulExpressionStatement","src":"32789:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32893:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"32896:4:21","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32886:6:21"},"nodeType":"YulFunctionCall","src":"32886:15:21"},"nodeType":"YulExpressionStatement","src":"32886:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32917:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32920:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"32910:6:21"},"nodeType":"YulFunctionCall","src":"32910:15:21"},"nodeType":"YulExpressionStatement","src":"32910:15:21"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"32751:180:21"},{"body":{"nodeType":"YulBlock","src":"32965:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32982:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32985:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32975:6:21"},"nodeType":"YulFunctionCall","src":"32975:88:21"},"nodeType":"YulExpressionStatement","src":"32975:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33079:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"33082:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33072:6:21"},"nodeType":"YulFunctionCall","src":"33072:15:21"},"nodeType":"YulExpressionStatement","src":"33072:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33103:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33106:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"33096:6:21"},"nodeType":"YulFunctionCall","src":"33096:15:21"},"nodeType":"YulExpressionStatement","src":"33096:15:21"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"32937:180:21"},{"body":{"nodeType":"YulBlock","src":"33212:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33229:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33232:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"33222:6:21"},"nodeType":"YulFunctionCall","src":"33222:12:21"},"nodeType":"YulExpressionStatement","src":"33222:12:21"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"33123:117:21"},{"body":{"nodeType":"YulBlock","src":"33335:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33352:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33355:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"33345:6:21"},"nodeType":"YulFunctionCall","src":"33345:12:21"},"nodeType":"YulExpressionStatement","src":"33345:12:21"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"33246:117:21"},{"body":{"nodeType":"YulBlock","src":"33458:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33475:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33478:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"33468:6:21"},"nodeType":"YulFunctionCall","src":"33468:12:21"},"nodeType":"YulExpressionStatement","src":"33468:12:21"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"33369:117:21"},{"body":{"nodeType":"YulBlock","src":"33581:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33598:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33601:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"33591:6:21"},"nodeType":"YulFunctionCall","src":"33591:12:21"},"nodeType":"YulExpressionStatement","src":"33591:12:21"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"33492:117:21"},{"body":{"nodeType":"YulBlock","src":"33663:54:21","statements":[{"nodeType":"YulAssignment","src":"33673:38:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33691:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"33698:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33687:3:21"},"nodeType":"YulFunctionCall","src":"33687:14:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33707:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"33703:3:21"},"nodeType":"YulFunctionCall","src":"33703:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"33683:3:21"},"nodeType":"YulFunctionCall","src":"33683:28:21"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"33673:6:21"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33646:5:21","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"33656:6:21","type":""}],"src":"33615:102:21"},{"body":{"nodeType":"YulBlock","src":"33829:126:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33851:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"33859:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33847:3:21"},"nodeType":"YulFunctionCall","src":"33847:14:21"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"33863:34:21","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33840:6:21"},"nodeType":"YulFunctionCall","src":"33840:58:21"},"nodeType":"YulExpressionStatement","src":"33840:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33919:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"33927:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33915:3:21"},"nodeType":"YulFunctionCall","src":"33915:15:21"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"33932:15:21","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33908:6:21"},"nodeType":"YulFunctionCall","src":"33908:40:21"},"nodeType":"YulExpressionStatement","src":"33908:40:21"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"33821:6:21","type":""}],"src":"33723:232:21"},{"body":{"nodeType":"YulBlock","src":"34067:131:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"34089:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"34097:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34085:3:21"},"nodeType":"YulFunctionCall","src":"34085:14:21"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"34101:34:21","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34078:6:21"},"nodeType":"YulFunctionCall","src":"34078:58:21"},"nodeType":"YulExpressionStatement","src":"34078:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"34157:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"34165:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34153:3:21"},"nodeType":"YulFunctionCall","src":"34153:15:21"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"34170:20:21","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34146:6:21"},"nodeType":"YulFunctionCall","src":"34146:45:21"},"nodeType":"YulExpressionStatement","src":"34146:45:21"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"34059:6:21","type":""}],"src":"33961:237:21"},{"body":{"nodeType":"YulBlock","src":"34310:118:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"34332:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"34340:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34328:3:21"},"nodeType":"YulFunctionCall","src":"34328:14:21"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"34344:34:21","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34321:6:21"},"nodeType":"YulFunctionCall","src":"34321:58:21"},"nodeType":"YulExpressionStatement","src":"34321:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"34400:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"34408:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34396:3:21"},"nodeType":"YulFunctionCall","src":"34396:15:21"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"34413:7:21","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34389:6:21"},"nodeType":"YulFunctionCall","src":"34389:32:21"},"nodeType":"YulExpressionStatement","src":"34389:32:21"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"34302:6:21","type":""}],"src":"34204:224:21"},{"body":{"nodeType":"YulBlock","src":"34540:117:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"34562:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"34570:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34558:3:21"},"nodeType":"YulFunctionCall","src":"34558:14:21"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"34574:34:21","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34551:6:21"},"nodeType":"YulFunctionCall","src":"34551:58:21"},"nodeType":"YulExpressionStatement","src":"34551:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"34630:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"34638:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34626:3:21"},"nodeType":"YulFunctionCall","src":"34626:15:21"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"34643:6:21","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34619:6:21"},"nodeType":"YulFunctionCall","src":"34619:31:21"},"nodeType":"YulExpressionStatement","src":"34619:31:21"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"34532:6:21","type":""}],"src":"34434:223:21"},{"body":{"nodeType":"YulBlock","src":"34769:69:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"34791:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"34799:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34787:3:21"},"nodeType":"YulFunctionCall","src":"34787:14:21"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"34803:27:21","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34780:6:21"},"nodeType":"YulFunctionCall","src":"34780:51:21"},"nodeType":"YulExpressionStatement","src":"34780:51:21"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"34761:6:21","type":""}],"src":"34663:175:21"},{"body":{"nodeType":"YulBlock","src":"34950:122:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"34972:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"34980:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34968:3:21"},"nodeType":"YulFunctionCall","src":"34968:14:21"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"34984:34:21","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34961:6:21"},"nodeType":"YulFunctionCall","src":"34961:58:21"},"nodeType":"YulExpressionStatement","src":"34961:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35040:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"35048:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35036:3:21"},"nodeType":"YulFunctionCall","src":"35036:15:21"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"35053:11:21","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35029:6:21"},"nodeType":"YulFunctionCall","src":"35029:36:21"},"nodeType":"YulExpressionStatement","src":"35029:36:21"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"34942:6:21","type":""}],"src":"34844:228:21"},{"body":{"nodeType":"YulBlock","src":"35184:68:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35206:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"35214:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35202:3:21"},"nodeType":"YulFunctionCall","src":"35202:14:21"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"35218:26:21","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35195:6:21"},"nodeType":"YulFunctionCall","src":"35195:50:21"},"nodeType":"YulExpressionStatement","src":"35195:50:21"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"35176:6:21","type":""}],"src":"35078:174:21"},{"body":{"nodeType":"YulBlock","src":"35364:114:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35386:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"35394:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35382:3:21"},"nodeType":"YulFunctionCall","src":"35382:14:21"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"35398:34:21","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35375:6:21"},"nodeType":"YulFunctionCall","src":"35375:58:21"},"nodeType":"YulExpressionStatement","src":"35375:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35454:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"35462:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35450:3:21"},"nodeType":"YulFunctionCall","src":"35450:15:21"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"35467:3:21","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35443:6:21"},"nodeType":"YulFunctionCall","src":"35443:28:21"},"nodeType":"YulExpressionStatement","src":"35443:28:21"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"35356:6:21","type":""}],"src":"35258:220:21"},{"body":{"nodeType":"YulBlock","src":"35590:142:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35612:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"35620:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35608:3:21"},"nodeType":"YulFunctionCall","src":"35608:14:21"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"35624:34:21","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35601:6:21"},"nodeType":"YulFunctionCall","src":"35601:58:21"},"nodeType":"YulExpressionStatement","src":"35601:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35680:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"35688:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35676:3:21"},"nodeType":"YulFunctionCall","src":"35676:15:21"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"35693:31:21","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35669:6:21"},"nodeType":"YulFunctionCall","src":"35669:56:21"},"nodeType":"YulExpressionStatement","src":"35669:56:21"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"35582:6:21","type":""}],"src":"35484:248:21"},{"body":{"nodeType":"YulBlock","src":"35781:79:21","statements":[{"body":{"nodeType":"YulBlock","src":"35838:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35847:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"35850:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"35840:6:21"},"nodeType":"YulFunctionCall","src":"35840:12:21"},"nodeType":"YulExpressionStatement","src":"35840:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35804:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35829:5:21"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"35811:17:21"},"nodeType":"YulFunctionCall","src":"35811:24:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"35801:2:21"},"nodeType":"YulFunctionCall","src":"35801:35:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"35794:6:21"},"nodeType":"YulFunctionCall","src":"35794:43:21"},"nodeType":"YulIf","src":"35791:2:21"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"35774:5:21","type":""}],"src":"35738:122:21"},{"body":{"nodeType":"YulBlock","src":"35906:76:21","statements":[{"body":{"nodeType":"YulBlock","src":"35960:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35969:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"35972:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"35962:6:21"},"nodeType":"YulFunctionCall","src":"35962:12:21"},"nodeType":"YulExpressionStatement","src":"35962:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35929:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35951:5:21"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"35936:14:21"},"nodeType":"YulFunctionCall","src":"35936:21:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"35926:2:21"},"nodeType":"YulFunctionCall","src":"35926:32:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"35919:6:21"},"nodeType":"YulFunctionCall","src":"35919:40:21"},"nodeType":"YulIf","src":"35916:2:21"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"35899:5:21","type":""}],"src":"35866:116:21"},{"body":{"nodeType":"YulBlock","src":"36030:78:21","statements":[{"body":{"nodeType":"YulBlock","src":"36086:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36095:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"36098:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"36088:6:21"},"nodeType":"YulFunctionCall","src":"36088:12:21"},"nodeType":"YulExpressionStatement","src":"36088:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"36053:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"36077:5:21"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"36060:16:21"},"nodeType":"YulFunctionCall","src":"36060:23:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"36050:2:21"},"nodeType":"YulFunctionCall","src":"36050:34:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"36043:6:21"},"nodeType":"YulFunctionCall","src":"36043:42:21"},"nodeType":"YulIf","src":"36040:2:21"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"36023:5:21","type":""}],"src":"35988:120:21"},{"body":{"nodeType":"YulBlock","src":"36157:79:21","statements":[{"body":{"nodeType":"YulBlock","src":"36214:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36223:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"36226:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"36216:6:21"},"nodeType":"YulFunctionCall","src":"36216:12:21"},"nodeType":"YulExpressionStatement","src":"36216:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"36180:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"36205:5:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"36187:17:21"},"nodeType":"YulFunctionCall","src":"36187:24:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"36177:2:21"},"nodeType":"YulFunctionCall","src":"36177:35:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"36170:6:21"},"nodeType":"YulFunctionCall","src":"36170:43:21"},"nodeType":"YulIf","src":"36167:2:21"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"36150:5:21","type":""}],"src":"36114:122:21"}]},"contents":"{\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_string_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_string_memory_ptrt_string_memory_ptr(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_string_memory_ptr(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_string_memory_ptr_to_t_string_memory_ptr(value0, pos) -> updatedPos {\n        updatedPos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(value0, pos)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    // string[] -> string[]\n    function abi_encode_t_array$_t_string_memory_ptr_$dyn_memory_ptr_to_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_string_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let headStart := pos\n        let tail := add(pos, mul(length, 0x20))\n        let baseRef := array_dataslot_t_array$_t_string_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, sub(tail, headStart))\n            let elementValue0 := mload(srcPtr)\n            tail := abi_encodeUpdatedPos_t_string_memory_ptr_to_t_string_memory_ptr(elementValue0, tail)\n            srcPtr := array_nextElement_t_array$_t_string_memory_ptr_$dyn_memory_ptr(srcPtr)\n            pos := add(pos, 0x20)\n        }\n        pos := tail\n        end := pos\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    // bytes -> bytes\n    function abi_encode_t_bytes_storage_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> ret {\n        let slotValue := sload(value)\n        let length := extract_byte_array_length(slotValue)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        switch and(slotValue, 1)\n        case 0 {\n            // short byte array\n            mstore(pos, and(slotValue, not(0xff)))\n            ret := add(pos, length)\n        }\n        case 1 {\n            // long byte array\n            let dataPos := array_dataslot_t_bytes_storage_ptr(value)\n            let i := 0\n            for { } lt(i, length) { i := add(i, 0x20) } {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, 1)\n            }\n            ret := add(pos, length)\n        }\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_packed_t_bytes_storage_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_storage_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_encode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr__to_t_array$_t_string_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_string_memory_ptr_$dyn_memory_ptr_to_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value2,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_string_memory_ptr__to_t_uint256_t_string_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_string_memory_ptr__to_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value2,  tail)\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_dataslot_t_array$_t_string_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function array_dataslot_t_bytes_storage_ptr(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function array_length_t_array$_t_string_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_nextElement_t_array$_t_string_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061021c5760003560e01c806371085cab11610125578063b16060a6116100ad578063c29595c51161007c578063c29595c5146106ea578063c4c2e36414610706578063c87b56dd14610736578063e32acc1a14610766578063e985e9c5146107965761021c565b8063b16060a61461068a578063b88d4fde14610694578063c04e7430146106b0578063c04fe978146106cc5761021c565b806395d89b41116100f457806395d89b41146105d257806397ee7606146105f0578063a1ca91781461060e578063a22cb4651461063e578063aa4cdf2a1461065a5761021c565b806371085cab1461052657806382fcc73214610556578063881de858146105865780638d3d2595146105a25761021c565b806327a568b9116101a8578063468d0c8011610177578063468d0c80146104355780634be7adb5146104665780635d907da1146104965780636352211e146104c657806370a08231146104f65761021c565b806327a568b91461039957806329b56f60146103cb5780632d9cb1ab146103e957806342842e0e146104195761021c565b8063109ac970116101ef578063109ac970146102bb578063131d44f2146102eb5780631ba44c4c1461031b5780631e9ac9f51461034d57806323b872dd1461037d5761021c565b806301ffc9a71461022157806306fdde0314610251578063081812fc1461026f578063095ea7b31461029f575b600080fd5b61023b600480360381019061023691906131fe565b6107c6565b6040516102489190613948565b60405180910390f35b6102596108a8565b6040516102669190613963565b60405180910390f35b61028960048036038101906102849190613375565b61093a565b60405161029691906138bf565b60405180910390f35b6102b960048036038101906102b491906131be565b610980565b005b6102d560048036038101906102d09190613375565b610a98565b6040516102e29190613926565b60405180910390f35b61030560048036038101906103009190613375565b610c08565b6040516103129190613926565b60405180910390f35b61033560048036038101906103309190613375565b610d78565b60405161034493929190613b3c565b60405180910390f35b61036760048036038101906103629190613258565b610e2a565b6040516103749190613af1565b60405180910390f35b610397600480360381019061039291906130a8565b610e9c565b005b6103b360048036038101906103ae9190613375565b610efc565b6040516103c293929190613985565b60405180910390f35b6103d36110be565b6040516103e09190613926565b60405180910390f35b61040360048036038101906103fe9190613319565b6111f9565b6040516104109190613af1565b60405180910390f35b610433600480360381019061042e91906130a8565b611272565b005b61044f600480360381019061044a9190613375565b611292565b60405161045d929190613b0c565b60405180910390f35b610480600480360381019061047b9190613489565b61133e565b60405161048d9190613926565b60405180910390f35b6104b060048036038101906104ab9190613375565b6114d0565b6040516104bd9190613963565b60405180910390f35b6104e060048036038101906104db9190613375565b611578565b6040516104ed91906138bf565b60405180910390f35b610510600480360381019061050b919061303b565b6115ff565b60405161051d9190613af1565b60405180910390f35b610540600480360381019061053b9190613319565b6116b7565b60405161054d9190613af1565b60405180910390f35b610570600480360381019061056b91906134c9565b611730565b60405161057d9190613af1565b60405180910390f35b6105a0600480360381019061059b91906133fe565b6117ba565b005b6105bc60048036038101906105b79190613375565b611815565b6040516105c99190613963565b60405180910390f35b6105da6118bd565b6040516105e79190613963565b60405180910390f35b6105f861194f565b6040516106059190613926565b60405180910390f35b61062860048036038101906106239190613258565b611a8a565b6040516106359190613af1565b60405180910390f35b6106586004803603810190610653919061317e565b611afc565b005b610674600480360381019061066f9190613258565b611b12565b6040516106819190613af1565b60405180910390f35b610692611b9a565b005b6106ae60048036038101906106a991906130fb565b611d18565b005b6106ca60048036038101906106c591906133a2565b611d7a565b005b6106d4611da9565b6040516106e19190613926565b60405180910390f35b61070460048036038101906106ff91906133a2565b611ee4565b005b610720600480360381019061071b91906132a1565b611f13565b60405161072d9190613af1565b60405180910390f35b610750600480360381019061074b9190613375565b611ff7565b60405161075d9190613963565b60405180910390f35b610780600480360381019061077b9190613375565b61205f565b60405161078d9190613963565b60405180910390f35b6107b060048036038101906107ab9190613068565b612107565b6040516107bd9190613948565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061089157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806108a157506108a08261219b565b5b9050919050565b6060600080546108b790613dee565b80601f01602080910402602001604051908101604052809291908181526020018280546108e390613dee565b80156109305780601f1061090557610100808354040283529160200191610930565b820191906000526020600020905b81548152906001019060200180831161091357829003601f168201915b5050505050905090565b600061094582612205565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061098b82611578565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f390613ab1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610a1b612250565b73ffffffffffffffffffffffffffffffffffffffff161480610a4a5750610a4981610a44612250565b612107565b5b610a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8090613ad1565b60405180910390fd5b610a938383612258565b505050565b6060600060075467ffffffffffffffff811115610ab857610ab7613f56565b5b604051908082528060200260200182016040528015610aeb57816020015b6060815260200190600190039081610ad65790505b509050600080600090505b600754811015610bfd5784600b6000838152602001908152602001600020600001541415610bea57600b60008281526020019081526020016000206001018054610b3f90613dee565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6b90613dee565b8015610bb85780601f10610b8d57610100808354040283529160200191610bb8565b820191906000526020600020905b815481529060010190602001808311610b9b57829003601f168201915b5050505050838381518110610bd057610bcf613f27565b5b60200260200101819052508180610be690613e51565b9250505b8080610bf590613e51565b915050610af6565b508192505050919050565b6060600060085467ffffffffffffffff811115610c2857610c27613f56565b5b604051908082528060200260200182016040528015610c5b57816020015b6060815260200190600190039081610c465790505b509050600080600090505b600854811015610d6d5784600c6000838152602001908152602001600020600001541415610d4c57600c60008281526020019081526020016000206001018054610caf90613dee565b80601f0160208091040260200160405190810160405280929190818152602001828054610cdb90613dee565b8015610d285780601f10610cfd57610100808354040283529160200191610d28565b820191906000526020600020905b815481529060010190602001808311610d0b57829003601f168201915b5050505050838381518110610d4057610d3f613f27565b5b60200260200101819052505b8180610d5790613e51565b9250508080610d6590613e51565b915050610c66565b508192505050919050565b600d602052806000526040600020600091509050806000015490806001015490806002018054610da790613dee565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd390613dee565b8015610e205780601f10610df557610100808354040283529160200191610e20565b820191906000526020600020905b815481529060010190602001808311610e0357829003601f168201915b5050505050905083565b600080600090505b600754811015610e91578280519060200120600b6000838152602001908152602001600020600101604051610e679190613884565b60405180910390201415610e7e5780915050610e97565b8080610e8990613e51565b915050610e32565b50600090505b919050565b610ead610ea7612250565b82612311565b610eec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee3906139d1565b60405180910390fd5b610ef78383836123a6565b505050565b600a602052806000526040600020600091509050806000018054610f1f90613dee565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4b90613dee565b8015610f985780601f10610f6d57610100808354040283529160200191610f98565b820191906000526020600020905b815481529060010190602001808311610f7b57829003601f168201915b505050505090806001018054610fad90613dee565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd990613dee565b80156110265780601f10610ffb57610100808354040283529160200191611026565b820191906000526020600020905b81548152906001019060200180831161100957829003601f168201915b50505050509080600201805461103b90613dee565b80601f016020809104026020016040519081016040528092919081815260200182805461106790613dee565b80156110b45780601f10611089576101008083540402835291602001916110b4565b820191906000526020600020905b81548152906001019060200180831161109757829003601f168201915b5050505050905083565b6060600060075467ffffffffffffffff8111156110de576110dd613f56565b5b60405190808252806020026020018201604052801561111157816020015b60608152602001906001900390816110fc5790505b50905060005b6007548110156111f157600b6000828152602001908152602001600020600101805461114290613dee565b80601f016020809104026020016040519081016040528092919081815260200182805461116e90613dee565b80156111bb5780601f10611190576101008083540402835291602001916111bb565b820191906000526020600020905b81548152906001019060200180831161119e57829003601f168201915b50505050508282815181106111d3576111d2613f27565b5b602002602001018190525080806111e990613e51565b915050611117565b508091505090565b6000604051806040016040528083815260200184815250600c6000600854815260200190815260200160002060008201518160000155602082015181600101908051906020019061124b929190612e0f565b509050506008600081548092919061126290613e51565b9190505550600854905092915050565b61128d83838360405180602001604052806000815250611d18565b505050565b600c6020528060005260406000206000915090508060000154908060010180546112bb90613dee565b80601f01602080910402602001604051908101604052809291908181526020018280546112e790613dee565b80156113345780601f1061130957610100808354040283529160200191611334565b820191906000526020600020905b81548152906001019060200180831161131757829003601f168201915b5050505050905082565b6060600060095467ffffffffffffffff81111561135e5761135d613f56565b5b60405190808252806020026020018201604052801561139157816020015b606081526020019060019003908161137c5790505b509050600080600090505b6009548110156114c45785600d6000838152602001908152602001600020600001541480156113e0575084600d600083815260200190815260200160002060010154145b156114a357600d6000828152602001908152602001600020600201805461140690613dee565b80601f016020809104026020016040519081016040528092919081815260200182805461143290613dee565b801561147f5780601f106114545761010080835404028352916020019161147f565b820191906000526020600020905b81548152906001019060200180831161146257829003601f168201915b505050505083838151811061149757611496613f27565b5b60200260200101819052505b81806114ae90613e51565b92505080806114bc90613e51565b91505061139c565b50819250505092915050565b6060600a600083815260200190815260200160002060010180546114f390613dee565b80601f016020809104026020016040519081016040528092919081815260200182805461151f90613dee565b801561156c5780601f106115415761010080835404028352916020019161156c565b820191906000526020600020905b81548152906001019060200180831161154f57829003601f168201915b50505050509050919050565b600080611584836126a0565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156115f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ed90613a91565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611670576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166790613a71565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000604051806040016040528083815260200184815250600b60006007548152602001908152602001600020600082015181600001556020820151816001019080519060200190611709929190612e0f565b509050506007600081548092919061172090613e51565b9190505550600754905092915050565b6000604051806060016040528085815260200184815260200183815250600d6000600954815260200190815260200160002060008201518160000155602082015181600101556040820151816002019080519060200190611792929190612e0f565b50905050600960008154809291906117a990613e51565b919050555060095490509392505050565b81600a600085815260200190815260200160002060000190805190602001906117e4929190612e0f565b5080600a6000858152602001908152602001600020600101908051906020019061180f929190612e0f565b50505050565b6060600c6000838152602001908152602001600020600101805461183890613dee565b80601f016020809104026020016040519081016040528092919081815260200182805461186490613dee565b80156118b15780601f10611886576101008083540402835291602001916118b1565b820191906000526020600020905b81548152906001019060200180831161189457829003601f168201915b50505050509050919050565b6060600180546118cc90613dee565b80601f01602080910402602001604051908101604052809291908181526020018280546118f890613dee565b80156119455780601f1061191a57610100808354040283529160200191611945565b820191906000526020600020905b81548152906001019060200180831161192857829003601f168201915b5050505050905090565b6060600060085467ffffffffffffffff81111561196f5761196e613f56565b5b6040519080825280602002602001820160405280156119a257816020015b606081526020019060019003908161198d5790505b50905060005b600854811015611a8257600c600082815260200190815260200160002060010180546119d390613dee565b80601f01602080910402602001604051908101604052809291908181526020018280546119ff90613dee565b8015611a4c5780601f10611a2157610100808354040283529160200191611a4c565b820191906000526020600020905b815481529060010190602001808311611a2f57829003601f168201915b5050505050828281518110611a6457611a63613f27565b5b60200260200101819052508080611a7a90613e51565b9150506119a8565b508091505090565b600080600090505b600854811015611af1578280519060200120600c6000838152602001908152602001600020600101604051611ac79190613884565b60405180910390201415611ade5780915050611af7565b8080611ae990613e51565b915050611a92565b50600090505b919050565b611b0e611b07612250565b83836126dd565b5050565b600080600090505b600854811015611b8f578280519060200120600c6000838152602001908152602001600020600101604051611b4f9190613884565b60405180910390201415611b7c57600c600082815260200190815260200160002060000154915050611b95565b8080611b8790613e51565b915050611b1a565b50600090505b919050565b600060068190555060006007819055506000600881905550600060098190555060005b600654811015611c2057600a600082815260200190815260200160002060008082016000611beb9190612e95565b600182016000611bfb9190612e95565b600282016000611c0b9190612e95565b50508080611c1890613e51565b915050611bbd565b5060005b600754811015611c6f57600b6000828152602001908152602001600020600080820160009055600182016000611c5a9190612e95565b50508080611c6790613e51565b915050611c24565b5060005b600854811015611cbe57600c6000828152602001908152602001600020600080820160009055600182016000611ca99190612e95565b50508080611cb690613e51565b915050611c73565b5060005b600954811015611d1557600d60008281526020019081526020016000206000808201600090556001820160009055600282016000611d009190612e95565b50508080611d0d90613e51565b915050611cc2565b50565b611d29611d23612250565b83612311565b611d68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5f906139d1565b60405180910390fd5b611d748484848461284a565b50505050565b80600c60008481526020019081526020016000206001019080519060200190611da4929190612e0f565b505050565b6060600060065467ffffffffffffffff811115611dc957611dc8613f56565b5b604051908082528060200260200182016040528015611dfc57816020015b6060815260200190600190039081611de75790505b50905060005b600654811015611edc57600a60008281526020019081526020016000206001018054611e2d90613dee565b80601f0160208091040260200160405190810160405280929190818152602001828054611e5990613dee565b8015611ea65780601f10611e7b57610100808354040283529160200191611ea6565b820191906000526020600020905b815481529060010190602001808311611e8957829003601f168201915b5050505050828281518110611ebe57611ebd613f27565b5b60200260200101819052508080611ed490613e51565b915050611e02565b508091505090565b80600b60008481526020019081526020016000206001019080519060200190611f0e929190612e0f565b505050565b600060405180606001604052808481526020018381526020016040518060400160405280600581526020017f46616c7365000000000000000000000000000000000000000000000000000000815250815250600a600060065481526020019081526020016000206000820151816000019080519060200190611f96929190612e0f565b506020820151816001019080519060200190611fb3929190612e0f565b506040820151816002019080519060200190611fd0929190612e0f565b5090505060066000815480929190611fe790613e51565b9190505550600654905092915050565b606061200282612205565b600061200c6128a6565b9050600081511161202c5760405180602001604052806000815250612057565b80612036846128bd565b60405160200161204792919061389b565b6040516020818303038152906040525b915050919050565b6060600b6000838152602001908152602001600020600101805461208290613dee565b80601f01602080910402602001604051908101604052809291908181526020018280546120ae90613dee565b80156120fb5780601f106120d0576101008083540402835291602001916120fb565b820191906000526020600020905b8154815290600101906020018083116120de57829003601f168201915b50505050509050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61220e81612995565b61224d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224490613a91565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166122cb83611578565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061231d83611578565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061235f575061235e8185612107565b5b8061239d57508373ffffffffffffffffffffffffffffffffffffffff166123858461093a565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166123c682611578565b73ffffffffffffffffffffffffffffffffffffffff161461241c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161241390613a11565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561248c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248390613a31565b60405180910390fd5b61249983838360016129d6565b8273ffffffffffffffffffffffffffffffffffffffff166124b982611578565b73ffffffffffffffffffffffffffffffffffffffff161461250f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250690613a11565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461269b8383836001612afc565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561274c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274390613a51565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161283d9190613948565b60405180910390a3505050565b6128558484846123a6565b61286184848484612b02565b6128a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612897906139f1565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060600060016128cc84612c99565b01905060008167ffffffffffffffff8111156128eb576128ea613f56565b5b6040519080825280601f01601f19166020018201604052801561291d5781602001600182028036833780820191505090505b509050600082602001820190505b60011561298a578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161297457612973613ec9565b5b04945060008514156129855761298a565b61292b565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166129b7836126a0565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6001811115612af657600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612a6a5780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a629190613d04565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612af55780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612aed9190613cae565b925050819055505b5b50505050565b50505050565b6000612b238473ffffffffffffffffffffffffffffffffffffffff16612dec565b15612c8c578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612b4c612250565b8786866040518563ffffffff1660e01b8152600401612b6e94939291906138da565b602060405180830381600087803b158015612b8857600080fd5b505af1925050508015612bb957506040513d601f19601f82011682018060405250810190612bb6919061322b565b60015b612c3c573d8060008114612be9576040519150601f19603f3d011682016040523d82523d6000602084013e612bee565b606091505b50600081511415612c34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c2b906139f1565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612c91565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612cf7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612ced57612cec613ec9565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612d34576d04ee2d6d415b85acef81000000008381612d2a57612d29613ec9565b5b0492506020810190505b662386f26fc100008310612d6357662386f26fc100008381612d5957612d58613ec9565b5b0492506010810190505b6305f5e1008310612d8c576305f5e1008381612d8257612d81613ec9565b5b0492506008810190505b6127108310612db1576127108381612da757612da6613ec9565b5b0492506004810190505b60648310612dd45760648381612dca57612dc9613ec9565b5b0492506002810190505b600a8310612de3576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054612e1b90613dee565b90600052602060002090601f016020900481019282612e3d5760008555612e84565b82601f10612e5657805160ff1916838001178555612e84565b82800160010185558215612e84579182015b82811115612e83578251825591602001919060010190612e68565b5b509050612e919190612ed5565b5090565b508054612ea190613dee565b6000825580601f10612eb35750612ed2565b601f016020900490600052602060002090810190612ed19190612ed5565b5b50565b5b80821115612eee576000816000905550600101612ed6565b5090565b6000612f05612f0084613b9f565b613b7a565b905082815260208101848484011115612f2157612f20613f8a565b5b612f2c848285613dac565b509392505050565b6000612f47612f4284613bd0565b613b7a565b905082815260208101848484011115612f6357612f62613f8a565b5b612f6e848285613dac565b509392505050565b600081359050612f8581614225565b92915050565b600081359050612f9a8161423c565b92915050565b600081359050612faf81614253565b92915050565b600081519050612fc481614253565b92915050565b600082601f830112612fdf57612fde613f85565b5b8135612fef848260208601612ef2565b91505092915050565b600082601f83011261300d5761300c613f85565b5b813561301d848260208601612f34565b91505092915050565b6000813590506130358161426a565b92915050565b60006020828403121561305157613050613f94565b5b600061305f84828501612f76565b91505092915050565b6000806040838503121561307f5761307e613f94565b5b600061308d85828601612f76565b925050602061309e85828601612f76565b9150509250929050565b6000806000606084860312156130c1576130c0613f94565b5b60006130cf86828701612f76565b93505060206130e086828701612f76565b92505060406130f186828701613026565b9150509250925092565b6000806000806080858703121561311557613114613f94565b5b600061312387828801612f76565b945050602061313487828801612f76565b935050604061314587828801613026565b925050606085013567ffffffffffffffff81111561316657613165613f8f565b5b61317287828801612fca565b91505092959194509250565b6000806040838503121561319557613194613f94565b5b60006131a385828601612f76565b92505060206131b485828601612f8b565b9150509250929050565b600080604083850312156131d5576131d4613f94565b5b60006131e385828601612f76565b92505060206131f485828601613026565b9150509250929050565b60006020828403121561321457613213613f94565b5b600061322284828501612fa0565b91505092915050565b60006020828403121561324157613240613f94565b5b600061324f84828501612fb5565b91505092915050565b60006020828403121561326e5761326d613f94565b5b600082013567ffffffffffffffff81111561328c5761328b613f8f565b5b61329884828501612ff8565b91505092915050565b600080604083850312156132b8576132b7613f94565b5b600083013567ffffffffffffffff8111156132d6576132d5613f8f565b5b6132e285828601612ff8565b925050602083013567ffffffffffffffff81111561330357613302613f8f565b5b61330f85828601612ff8565b9150509250929050565b600080604083850312156133305761332f613f94565b5b600083013567ffffffffffffffff81111561334e5761334d613f8f565b5b61335a85828601612ff8565b925050602061336b85828601613026565b9150509250929050565b60006020828403121561338b5761338a613f94565b5b600061339984828501613026565b91505092915050565b600080604083850312156133b9576133b8613f94565b5b60006133c785828601613026565b925050602083013567ffffffffffffffff8111156133e8576133e7613f8f565b5b6133f485828601612ff8565b9150509250929050565b60008060006060848603121561341757613416613f94565b5b600061342586828701613026565b935050602084013567ffffffffffffffff81111561344657613445613f8f565b5b61345286828701612ff8565b925050604084013567ffffffffffffffff81111561347357613472613f8f565b5b61347f86828701612ff8565b9150509250925092565b600080604083850312156134a05761349f613f94565b5b60006134ae85828601613026565b92505060206134bf85828601613026565b9150509250929050565b6000806000606084860312156134e2576134e1613f94565b5b60006134f086828701613026565b935050602061350186828701613026565b925050604084013567ffffffffffffffff81111561352257613521613f8f565b5b61352e86828701612ff8565b9150509250925092565b60006135448383613697565b905092915050565b61355581613d38565b82525050565b600061356682613c26565b6135708185613c54565b93508360208202850161358285613c01565b8060005b858110156135be578484038952815161359f8582613538565b94506135aa83613c47565b925060208a01995050600181019050613586565b50829750879550505050505092915050565b6135d981613d4a565b82525050565b60006135ea82613c31565b6135f48185613c65565b9350613604818560208601613dbb565b61360d81613f99565b840191505092915050565b6000815461362581613dee565b61362f8186613c76565b9450600182166000811461364a576001811461365b5761368e565b60ff1983168652818601935061368e565b61366485613c11565b60005b8381101561368657815481890152600182019150602081019050613667565b838801955050505b50505092915050565b60006136a282613c3c565b6136ac8185613c81565b93506136bc818560208601613dbb565b6136c581613f99565b840191505092915050565b60006136db82613c3c565b6136e58185613c92565b93506136f5818560208601613dbb565b6136fe81613f99565b840191505092915050565b600061371482613c3c565b61371e8185613ca3565b935061372e818560208601613dbb565b80840191505092915050565b6000613747602d83613c92565b915061375282613faa565b604082019050919050565b600061376a603283613c92565b915061377582613ff9565b604082019050919050565b600061378d602583613c92565b915061379882614048565b604082019050919050565b60006137b0602483613c92565b91506137bb82614097565b604082019050919050565b60006137d3601983613c92565b91506137de826140e6565b602082019050919050565b60006137f6602983613c92565b91506138018261410f565b604082019050919050565b6000613819601883613c92565b91506138248261415e565b602082019050919050565b600061383c602183613c92565b915061384782614187565b604082019050919050565b600061385f603d83613c92565b915061386a826141d6565b604082019050919050565b61387e81613da2565b82525050565b60006138908284613618565b915081905092915050565b60006138a78285613709565b91506138b38284613709565b91508190509392505050565b60006020820190506138d4600083018461354c565b92915050565b60006080820190506138ef600083018761354c565b6138fc602083018661354c565b6139096040830185613875565b818103606083015261391b81846135df565b905095945050505050565b60006020820190508181036000830152613940818461355b565b905092915050565b600060208201905061395d60008301846135d0565b92915050565b6000602082019050818103600083015261397d81846136d0565b905092915050565b6000606082019050818103600083015261399f81866136d0565b905081810360208301526139b381856136d0565b905081810360408301526139c781846136d0565b9050949350505050565b600060208201905081810360008301526139ea8161373a565b9050919050565b60006020820190508181036000830152613a0a8161375d565b9050919050565b60006020820190508181036000830152613a2a81613780565b9050919050565b60006020820190508181036000830152613a4a816137a3565b9050919050565b60006020820190508181036000830152613a6a816137c6565b9050919050565b60006020820190508181036000830152613a8a816137e9565b9050919050565b60006020820190508181036000830152613aaa8161380c565b9050919050565b60006020820190508181036000830152613aca8161382f565b9050919050565b60006020820190508181036000830152613aea81613852565b9050919050565b6000602082019050613b066000830184613875565b92915050565b6000604082019050613b216000830185613875565b8181036020830152613b3381846136d0565b90509392505050565b6000606082019050613b516000830186613875565b613b5e6020830185613875565b8181036040830152613b7081846136d0565b9050949350505050565b6000613b84613b95565b9050613b908282613e20565b919050565b6000604051905090565b600067ffffffffffffffff821115613bba57613bb9613f56565b5b613bc382613f99565b9050602081019050919050565b600067ffffffffffffffff821115613beb57613bea613f56565b5b613bf482613f99565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613cb982613da2565b9150613cc483613da2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613cf957613cf8613e9a565b5b828201905092915050565b6000613d0f82613da2565b9150613d1a83613da2565b925082821015613d2d57613d2c613e9a565b5b828203905092915050565b6000613d4382613d82565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613dd9578082015181840152602081019050613dbe565b83811115613de8576000848401525b50505050565b60006002820490506001821680613e0657607f821691505b60208210811415613e1a57613e19613ef8565b5b50919050565b613e2982613f99565b810181811067ffffffffffffffff82111715613e4857613e47613f56565b5b80604052505050565b6000613e5c82613da2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e8f57613e8e613e9a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b61422e81613d38565b811461423957600080fd5b50565b61424581613d4a565b811461425057600080fd5b50565b61425c81613d56565b811461426757600080fd5b50565b61427381613da2565b811461427e57600080fd5b5056fea26469706673582212209f3fcf4f75ece837ae08af680170c98bed717e0511c5023e434e0220f4d2cad764736f6c63430008060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x21C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x71085CAB GT PUSH2 0x125 JUMPI DUP1 PUSH4 0xB16060A6 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xC29595C5 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xC29595C5 EQ PUSH2 0x6EA JUMPI DUP1 PUSH4 0xC4C2E364 EQ PUSH2 0x706 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x736 JUMPI DUP1 PUSH4 0xE32ACC1A EQ PUSH2 0x766 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x796 JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0xB16060A6 EQ PUSH2 0x68A JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x694 JUMPI DUP1 PUSH4 0xC04E7430 EQ PUSH2 0x6B0 JUMPI DUP1 PUSH4 0xC04FE978 EQ PUSH2 0x6CC JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x5D2 JUMPI DUP1 PUSH4 0x97EE7606 EQ PUSH2 0x5F0 JUMPI DUP1 PUSH4 0xA1CA9178 EQ PUSH2 0x60E JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x63E JUMPI DUP1 PUSH4 0xAA4CDF2A EQ PUSH2 0x65A JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0x71085CAB EQ PUSH2 0x526 JUMPI DUP1 PUSH4 0x82FCC732 EQ PUSH2 0x556 JUMPI DUP1 PUSH4 0x881DE858 EQ PUSH2 0x586 JUMPI DUP1 PUSH4 0x8D3D2595 EQ PUSH2 0x5A2 JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0x27A568B9 GT PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x468D0C80 GT PUSH2 0x177 JUMPI DUP1 PUSH4 0x468D0C80 EQ PUSH2 0x435 JUMPI DUP1 PUSH4 0x4BE7ADB5 EQ PUSH2 0x466 JUMPI DUP1 PUSH4 0x5D907DA1 EQ PUSH2 0x496 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x4C6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x4F6 JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0x27A568B9 EQ PUSH2 0x399 JUMPI DUP1 PUSH4 0x29B56F60 EQ PUSH2 0x3CB JUMPI DUP1 PUSH4 0x2D9CB1AB EQ PUSH2 0x3E9 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x419 JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0x109AC970 GT PUSH2 0x1EF JUMPI DUP1 PUSH4 0x109AC970 EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0x131D44F2 EQ PUSH2 0x2EB JUMPI DUP1 PUSH4 0x1BA44C4C EQ PUSH2 0x31B JUMPI DUP1 PUSH4 0x1E9AC9F5 EQ PUSH2 0x34D JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x37D JUMPI PUSH2 0x21C JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x26F JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x29F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x236 SWAP2 SWAP1 PUSH2 0x31FE JUMP JUMPDEST PUSH2 0x7C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x248 SWAP2 SWAP1 PUSH2 0x3948 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x259 PUSH2 0x8A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x266 SWAP2 SWAP1 PUSH2 0x3963 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x289 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x284 SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0x93A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x296 SWAP2 SWAP1 PUSH2 0x38BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B4 SWAP2 SWAP1 PUSH2 0x31BE JUMP JUMPDEST PUSH2 0x980 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D0 SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0xA98 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E2 SWAP2 SWAP1 PUSH2 0x3926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x305 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x300 SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0xC08 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x312 SWAP2 SWAP1 PUSH2 0x3926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x335 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x330 SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0xD78 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x344 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3B3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x367 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x362 SWAP2 SWAP1 PUSH2 0x3258 JUMP JUMPDEST PUSH2 0xE2A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x374 SWAP2 SWAP1 PUSH2 0x3AF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x397 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x392 SWAP2 SWAP1 PUSH2 0x30A8 JUMP JUMPDEST PUSH2 0xE9C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3B3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3AE SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0xEFC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3985 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3D3 PUSH2 0x10BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3E0 SWAP2 SWAP1 PUSH2 0x3926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x403 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3FE SWAP2 SWAP1 PUSH2 0x3319 JUMP JUMPDEST PUSH2 0x11F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0x3AF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x433 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x42E SWAP2 SWAP1 PUSH2 0x30A8 JUMP JUMPDEST PUSH2 0x1272 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x44F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x44A SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0x1292 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45D SWAP3 SWAP2 SWAP1 PUSH2 0x3B0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x480 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x47B SWAP2 SWAP1 PUSH2 0x3489 JUMP JUMPDEST PUSH2 0x133E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x48D SWAP2 SWAP1 PUSH2 0x3926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4B0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4AB SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0x14D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4BD SWAP2 SWAP1 PUSH2 0x3963 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4DB SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0x1578 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4ED SWAP2 SWAP1 PUSH2 0x38BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x510 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x50B SWAP2 SWAP1 PUSH2 0x303B JUMP JUMPDEST PUSH2 0x15FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x51D SWAP2 SWAP1 PUSH2 0x3AF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x540 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x53B SWAP2 SWAP1 PUSH2 0x3319 JUMP JUMPDEST PUSH2 0x16B7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x54D SWAP2 SWAP1 PUSH2 0x3AF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x570 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x56B SWAP2 SWAP1 PUSH2 0x34C9 JUMP JUMPDEST PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x57D SWAP2 SWAP1 PUSH2 0x3AF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5A0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x59B SWAP2 SWAP1 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x17BA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5BC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B7 SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0x1815 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5C9 SWAP2 SWAP1 PUSH2 0x3963 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5DA PUSH2 0x18BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5E7 SWAP2 SWAP1 PUSH2 0x3963 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5F8 PUSH2 0x194F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x605 SWAP2 SWAP1 PUSH2 0x3926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x628 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x623 SWAP2 SWAP1 PUSH2 0x3258 JUMP JUMPDEST PUSH2 0x1A8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x635 SWAP2 SWAP1 PUSH2 0x3AF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x658 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x653 SWAP2 SWAP1 PUSH2 0x317E JUMP JUMPDEST PUSH2 0x1AFC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x674 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x66F SWAP2 SWAP1 PUSH2 0x3258 JUMP JUMPDEST PUSH2 0x1B12 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x681 SWAP2 SWAP1 PUSH2 0x3AF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x692 PUSH2 0x1B9A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6AE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6A9 SWAP2 SWAP1 PUSH2 0x30FB JUMP JUMPDEST PUSH2 0x1D18 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6CA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6C5 SWAP2 SWAP1 PUSH2 0x33A2 JUMP JUMPDEST PUSH2 0x1D7A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6D4 PUSH2 0x1DA9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6E1 SWAP2 SWAP1 PUSH2 0x3926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x704 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6FF SWAP2 SWAP1 PUSH2 0x33A2 JUMP JUMPDEST PUSH2 0x1EE4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x720 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x71B SWAP2 SWAP1 PUSH2 0x32A1 JUMP JUMPDEST PUSH2 0x1F13 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x72D SWAP2 SWAP1 PUSH2 0x3AF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x750 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x74B SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0x1FF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x75D SWAP2 SWAP1 PUSH2 0x3963 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x780 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x77B SWAP2 SWAP1 PUSH2 0x3375 JUMP JUMPDEST PUSH2 0x205F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x78D SWAP2 SWAP1 PUSH2 0x3963 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7B0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7AB SWAP2 SWAP1 PUSH2 0x3068 JUMP JUMPDEST PUSH2 0x2107 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7BD SWAP2 SWAP1 PUSH2 0x3948 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x891 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x8A1 JUMPI POP PUSH2 0x8A0 DUP3 PUSH2 0x219B JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x8B7 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8E3 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x930 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x905 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x930 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x913 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x945 DUP3 PUSH2 0x2205 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x98B DUP3 PUSH2 0x1578 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x9FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F3 SWAP1 PUSH2 0x3AB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA1B PUSH2 0x2250 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xA4A JUMPI POP PUSH2 0xA49 DUP2 PUSH2 0xA44 PUSH2 0x2250 JUMP JUMPDEST PUSH2 0x2107 JUMP JUMPDEST JUMPDEST PUSH2 0xA89 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA80 SWAP1 PUSH2 0x3AD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA93 DUP4 DUP4 PUSH2 0x2258 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x7 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xAB8 JUMPI PUSH2 0xAB7 PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAEB JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xAD6 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x7 SLOAD DUP2 LT ISZERO PUSH2 0xBFD JUMPI DUP5 PUSH1 0xB PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ ISZERO PUSH2 0xBEA JUMPI PUSH1 0xB PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xB3F SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB6B SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBB8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB8D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBB8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB9B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xBD0 JUMPI PUSH2 0xBCF PUSH2 0x3F27 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP2 DUP1 PUSH2 0xBE6 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP3 POP POP JUMPDEST DUP1 DUP1 PUSH2 0xBF5 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xAF6 JUMP JUMPDEST POP DUP2 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x8 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC28 JUMPI PUSH2 0xC27 PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC5B JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xC46 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0xD6D JUMPI DUP5 PUSH1 0xC PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ ISZERO PUSH2 0xD4C JUMPI PUSH1 0xC PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xCAF SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xCDB SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD28 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xCFD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD28 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD0B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xD40 JUMPI PUSH2 0xD3F PUSH2 0x3F27 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST DUP2 DUP1 PUSH2 0xD57 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0xD65 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC66 JUMP JUMPDEST POP DUP2 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0xDA7 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xDD3 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE20 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xDF5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE20 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE03 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x7 SLOAD DUP2 LT ISZERO PUSH2 0xE91 JUMPI DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0xB PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x40 MLOAD PUSH2 0xE67 SWAP2 SWAP1 PUSH2 0x3884 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 EQ ISZERO PUSH2 0xE7E JUMPI DUP1 SWAP2 POP POP PUSH2 0xE97 JUMP JUMPDEST DUP1 DUP1 PUSH2 0xE89 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xE32 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xEAD PUSH2 0xEA7 PUSH2 0x2250 JUMP JUMPDEST DUP3 PUSH2 0x2311 JUMP JUMPDEST PUSH2 0xEEC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEE3 SWAP1 PUSH2 0x39D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEF7 DUP4 DUP4 DUP4 PUSH2 0x23A6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0xF1F SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF4B SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF98 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF6D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF98 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF7B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFAD SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xFD9 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1026 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFFB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1026 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1009 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0x103B SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1067 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x10B4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1089 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x10B4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1097 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x7 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10DE JUMPI PUSH2 0x10DD PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1111 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x10FC JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x7 SLOAD DUP2 LT ISZERO PUSH2 0x11F1 JUMPI PUSH1 0xB PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x1142 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x116E SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x11BB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1190 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x11BB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x119E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x11D3 JUMPI PUSH2 0x11D2 PUSH2 0x3F27 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x11E9 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1117 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE POP PUSH1 0xC PUSH1 0x0 PUSH1 0x8 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x124B SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP SWAP1 POP POP PUSH1 0x8 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x1262 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0x8 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x128D DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1D18 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x12BB SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x12E7 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1334 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1309 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1334 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1317 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP3 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x9 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x135E JUMPI PUSH2 0x135D PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1391 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x137C JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x9 SLOAD DUP2 LT ISZERO PUSH2 0x14C4 JUMPI DUP6 PUSH1 0xD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ DUP1 ISZERO PUSH2 0x13E0 JUMPI POP DUP5 PUSH1 0xD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD EQ JUMPDEST ISZERO PUSH2 0x14A3 JUMPI PUSH1 0xD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0x1406 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1432 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x147F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1454 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x147F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1462 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1497 JUMPI PUSH2 0x1496 PUSH2 0x3F27 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST DUP2 DUP1 PUSH2 0x14AE SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x14BC SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x139C JUMP JUMPDEST POP DUP2 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xA PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x14F3 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x151F SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x156C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1541 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x156C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x154F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1584 DUP4 PUSH2 0x26A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x15F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15ED SWAP1 PUSH2 0x3A91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1670 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1667 SWAP1 PUSH2 0x3A71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE POP PUSH1 0xB PUSH1 0x0 PUSH1 0x7 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1709 SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP SWAP1 POP POP PUSH1 0x7 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x1720 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0x7 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP PUSH1 0xD PUSH1 0x0 PUSH1 0x9 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1792 SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP SWAP1 POP POP PUSH1 0x9 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x17A9 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0x9 SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0xA PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x17E4 SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP DUP1 PUSH1 0xA PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x180F SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xC PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x1838 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1864 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x18B1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1886 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x18B1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1894 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x18CC SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x18F8 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1945 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x191A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1945 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1928 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x8 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x196F JUMPI PUSH2 0x196E PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x19A2 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x198D JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x1A82 JUMPI PUSH1 0xC PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x19D3 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x19FF SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1A4C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1A21 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1A4C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1A2F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1A64 JUMPI PUSH2 0x1A63 PUSH2 0x3F27 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x1A7A SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x19A8 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x1AF1 JUMPI DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0xC PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x40 MLOAD PUSH2 0x1AC7 SWAP2 SWAP1 PUSH2 0x3884 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 EQ ISZERO PUSH2 0x1ADE JUMPI DUP1 SWAP2 POP POP PUSH2 0x1AF7 JUMP JUMPDEST DUP1 DUP1 PUSH2 0x1AE9 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A92 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B0E PUSH2 0x1B07 PUSH2 0x2250 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x26DD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x1B8F JUMPI DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0xC PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x40 MLOAD PUSH2 0x1B4F SWAP2 SWAP1 PUSH2 0x3884 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 EQ ISZERO PUSH2 0x1B7C JUMPI PUSH1 0xC PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SWAP2 POP POP PUSH2 0x1B95 JUMP JUMPDEST DUP1 DUP1 PUSH2 0x1B87 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1B1A JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x9 DUP2 SWAP1 SSTORE POP PUSH1 0x0 JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x1C20 JUMPI PUSH1 0xA PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x1BEB SWAP2 SWAP1 PUSH2 0x2E95 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD PUSH1 0x0 PUSH2 0x1BFB SWAP2 SWAP1 PUSH2 0x2E95 JUMP JUMPDEST PUSH1 0x2 DUP3 ADD PUSH1 0x0 PUSH2 0x1C0B SWAP2 SWAP1 PUSH2 0x2E95 JUMP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x1C18 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1BBD JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x7 SLOAD DUP2 LT ISZERO PUSH2 0x1C6F JUMPI PUSH1 0xB PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 PUSH2 0x1C5A SWAP2 SWAP1 PUSH2 0x2E95 JUMP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x1C67 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1C24 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x1CBE JUMPI PUSH1 0xC PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 PUSH2 0x1CA9 SWAP2 SWAP1 PUSH2 0x2E95 JUMP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x1CB6 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1C73 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x9 SLOAD DUP2 LT ISZERO PUSH2 0x1D15 JUMPI PUSH1 0xD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 PUSH2 0x1D00 SWAP2 SWAP1 PUSH2 0x2E95 JUMP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x1D0D SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1CC2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1D29 PUSH2 0x1D23 PUSH2 0x2250 JUMP JUMPDEST DUP4 PUSH2 0x2311 JUMP JUMPDEST PUSH2 0x1D68 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D5F SWAP1 PUSH2 0x39D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D74 DUP5 DUP5 DUP5 DUP5 PUSH2 0x284A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0xC PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1DA4 SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x6 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1DC9 JUMPI PUSH2 0x1DC8 PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1DFC JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1DE7 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x1EDC JUMPI PUSH1 0xA PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x1E2D SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1E59 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1EA6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1E7B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1EA6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1E89 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1EBE JUMPI PUSH2 0x1EBD PUSH2 0x3F27 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x1ED4 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1E02 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST DUP1 PUSH1 0xB PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1F0E SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x46616C7365000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 MSTORE POP PUSH1 0xA PUSH1 0x0 PUSH1 0x6 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1F96 SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1FB3 SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1FD0 SWAP3 SWAP2 SWAP1 PUSH2 0x2E0F JUMP JUMPDEST POP SWAP1 POP POP PUSH1 0x6 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x1FE7 SWAP1 PUSH2 0x3E51 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0x6 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2002 DUP3 PUSH2 0x2205 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x200C PUSH2 0x28A6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x202C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2057 JUMP JUMPDEST DUP1 PUSH2 0x2036 DUP5 PUSH2 0x28BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2047 SWAP3 SWAP2 SWAP1 PUSH2 0x389B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xB PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x2082 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x20AE SWAP1 PUSH2 0x3DEE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x20FB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x20D0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x20FB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20DE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x220E DUP2 PUSH2 0x2995 JUMP JUMPDEST PUSH2 0x224D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2244 SWAP1 PUSH2 0x3A91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x22CB DUP4 PUSH2 0x1578 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x231D DUP4 PUSH2 0x1578 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x235F JUMPI POP PUSH2 0x235E DUP2 DUP6 PUSH2 0x2107 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x239D JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2385 DUP5 PUSH2 0x93A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x23C6 DUP3 PUSH2 0x1578 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x241C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2413 SWAP1 PUSH2 0x3A11 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x248C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2483 SWAP1 PUSH2 0x3A31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2499 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x29D6 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x24B9 DUP3 PUSH2 0x1578 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x250F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2506 SWAP1 PUSH2 0x3A11 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x269B DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x2AFC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x274C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2743 SWAP1 PUSH2 0x3A51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x283D SWAP2 SWAP1 PUSH2 0x3948 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x2855 DUP5 DUP5 DUP5 PUSH2 0x23A6 JUMP JUMPDEST PUSH2 0x2861 DUP5 DUP5 DUP5 DUP5 PUSH2 0x2B02 JUMP JUMPDEST PUSH2 0x28A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2897 SWAP1 PUSH2 0x39F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x28CC DUP5 PUSH2 0x2C99 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28EB JUMPI PUSH2 0x28EA PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x291D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x298A JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x2974 JUMPI PUSH2 0x2973 PUSH2 0x3EC9 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x2985 JUMPI PUSH2 0x298A JUMP JUMPDEST PUSH2 0x292B JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x29B7 DUP4 PUSH2 0x26A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2AF6 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2A6A JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2A62 SWAP2 SWAP1 PUSH2 0x3D04 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2AF5 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2AED SWAP2 SWAP1 PUSH2 0x3CAE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B23 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2DEC JUMP JUMPDEST ISZERO PUSH2 0x2C8C JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x2B4C PUSH2 0x2250 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6E SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x38DA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2BB9 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2BB6 SWAP2 SWAP1 PUSH2 0x322B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2C3C JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2BE9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2BEE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x2C34 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C2B SWAP1 PUSH2 0x39F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x2C91 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x2CF7 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x2CED JUMPI PUSH2 0x2CEC PUSH2 0x3EC9 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x2D34 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x2D2A JUMPI PUSH2 0x2D29 PUSH2 0x3EC9 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x2D63 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x2D59 JUMPI PUSH2 0x2D58 PUSH2 0x3EC9 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x2D8C JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x2D82 JUMPI PUSH2 0x2D81 PUSH2 0x3EC9 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x2DB1 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x2DA7 JUMPI PUSH2 0x2DA6 PUSH2 0x3EC9 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2DD4 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x2DCA JUMPI PUSH2 0x2DC9 PUSH2 0x3EC9 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x2DE3 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x2E1B SWAP1 PUSH2 0x3DEE JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x2E3D JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x2E84 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x2E56 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x2E84 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x2E84 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2E83 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x2E68 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x2E91 SWAP2 SWAP1 PUSH2 0x2ED5 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH2 0x2EA1 SWAP1 PUSH2 0x3DEE JUMP JUMPDEST PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x2EB3 JUMPI POP PUSH2 0x2ED2 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2ED1 SWAP2 SWAP1 PUSH2 0x2ED5 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2EEE JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x2ED6 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F05 PUSH2 0x2F00 DUP5 PUSH2 0x3B9F JUMP JUMPDEST PUSH2 0x3B7A JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2F21 JUMPI PUSH2 0x2F20 PUSH2 0x3F8A JUMP JUMPDEST JUMPDEST PUSH2 0x2F2C DUP5 DUP3 DUP6 PUSH2 0x3DAC JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F47 PUSH2 0x2F42 DUP5 PUSH2 0x3BD0 JUMP JUMPDEST PUSH2 0x3B7A JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2F63 JUMPI PUSH2 0x2F62 PUSH2 0x3F8A JUMP JUMPDEST JUMPDEST PUSH2 0x2F6E DUP5 DUP3 DUP6 PUSH2 0x3DAC JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2F85 DUP2 PUSH2 0x4225 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2F9A DUP2 PUSH2 0x423C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2FAF DUP2 PUSH2 0x4253 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2FC4 DUP2 PUSH2 0x4253 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2FDF JUMPI PUSH2 0x2FDE PUSH2 0x3F85 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2FEF DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2EF2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x300D JUMPI PUSH2 0x300C PUSH2 0x3F85 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x301D DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2F34 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3035 DUP2 PUSH2 0x426A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3051 JUMPI PUSH2 0x3050 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x305F DUP5 DUP3 DUP6 ADD PUSH2 0x2F76 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x307F JUMPI PUSH2 0x307E PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x308D DUP6 DUP3 DUP7 ADD PUSH2 0x2F76 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x309E DUP6 DUP3 DUP7 ADD PUSH2 0x2F76 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x30C1 JUMPI PUSH2 0x30C0 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x30CF DUP7 DUP3 DUP8 ADD PUSH2 0x2F76 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x30E0 DUP7 DUP3 DUP8 ADD PUSH2 0x2F76 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x30F1 DUP7 DUP3 DUP8 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3115 JUMPI PUSH2 0x3114 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3123 DUP8 DUP3 DUP9 ADD PUSH2 0x2F76 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x3134 DUP8 DUP3 DUP9 ADD PUSH2 0x2F76 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x3145 DUP8 DUP3 DUP9 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3166 JUMPI PUSH2 0x3165 PUSH2 0x3F8F JUMP JUMPDEST JUMPDEST PUSH2 0x3172 DUP8 DUP3 DUP9 ADD PUSH2 0x2FCA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3195 JUMPI PUSH2 0x3194 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x31A3 DUP6 DUP3 DUP7 ADD PUSH2 0x2F76 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x31B4 DUP6 DUP3 DUP7 ADD PUSH2 0x2F8B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x31D5 JUMPI PUSH2 0x31D4 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x31E3 DUP6 DUP3 DUP7 ADD PUSH2 0x2F76 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x31F4 DUP6 DUP3 DUP7 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3214 JUMPI PUSH2 0x3213 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3222 DUP5 DUP3 DUP6 ADD PUSH2 0x2FA0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3241 JUMPI PUSH2 0x3240 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x324F DUP5 DUP3 DUP6 ADD PUSH2 0x2FB5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x326E JUMPI PUSH2 0x326D PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x328C JUMPI PUSH2 0x328B PUSH2 0x3F8F JUMP JUMPDEST JUMPDEST PUSH2 0x3298 DUP5 DUP3 DUP6 ADD PUSH2 0x2FF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x32B8 JUMPI PUSH2 0x32B7 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x32D6 JUMPI PUSH2 0x32D5 PUSH2 0x3F8F JUMP JUMPDEST JUMPDEST PUSH2 0x32E2 DUP6 DUP3 DUP7 ADD PUSH2 0x2FF8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3303 JUMPI PUSH2 0x3302 PUSH2 0x3F8F JUMP JUMPDEST JUMPDEST PUSH2 0x330F DUP6 DUP3 DUP7 ADD PUSH2 0x2FF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3330 JUMPI PUSH2 0x332F PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x334E JUMPI PUSH2 0x334D PUSH2 0x3F8F JUMP JUMPDEST JUMPDEST PUSH2 0x335A DUP6 DUP3 DUP7 ADD PUSH2 0x2FF8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x336B DUP6 DUP3 DUP7 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x338B JUMPI PUSH2 0x338A PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3399 DUP5 DUP3 DUP6 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x33B9 JUMPI PUSH2 0x33B8 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x33C7 DUP6 DUP3 DUP7 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x33E8 JUMPI PUSH2 0x33E7 PUSH2 0x3F8F JUMP JUMPDEST JUMPDEST PUSH2 0x33F4 DUP6 DUP3 DUP7 ADD PUSH2 0x2FF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3417 JUMPI PUSH2 0x3416 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3425 DUP7 DUP3 DUP8 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3446 JUMPI PUSH2 0x3445 PUSH2 0x3F8F JUMP JUMPDEST JUMPDEST PUSH2 0x3452 DUP7 DUP3 DUP8 ADD PUSH2 0x2FF8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3473 JUMPI PUSH2 0x3472 PUSH2 0x3F8F JUMP JUMPDEST JUMPDEST PUSH2 0x347F DUP7 DUP3 DUP8 ADD PUSH2 0x2FF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x34A0 JUMPI PUSH2 0x349F PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x34AE DUP6 DUP3 DUP7 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x34BF DUP6 DUP3 DUP7 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x34E2 JUMPI PUSH2 0x34E1 PUSH2 0x3F94 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x34F0 DUP7 DUP3 DUP8 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3501 DUP7 DUP3 DUP8 ADD PUSH2 0x3026 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3522 JUMPI PUSH2 0x3521 PUSH2 0x3F8F JUMP JUMPDEST JUMPDEST PUSH2 0x352E DUP7 DUP3 DUP8 ADD PUSH2 0x2FF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3544 DUP4 DUP4 PUSH2 0x3697 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3555 DUP2 PUSH2 0x3D38 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3566 DUP3 PUSH2 0x3C26 JUMP JUMPDEST PUSH2 0x3570 DUP2 DUP6 PUSH2 0x3C54 JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x3582 DUP6 PUSH2 0x3C01 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x35BE JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0x359F DUP6 DUP3 PUSH2 0x3538 JUMP JUMPDEST SWAP5 POP PUSH2 0x35AA DUP4 PUSH2 0x3C47 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP11 ADD SWAP10 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3586 JUMP JUMPDEST POP DUP3 SWAP8 POP DUP8 SWAP6 POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x35D9 DUP2 PUSH2 0x3D4A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35EA DUP3 PUSH2 0x3C31 JUMP JUMPDEST PUSH2 0x35F4 DUP2 DUP6 PUSH2 0x3C65 JUMP JUMPDEST SWAP4 POP PUSH2 0x3604 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3DBB JUMP JUMPDEST PUSH2 0x360D DUP2 PUSH2 0x3F99 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH2 0x3625 DUP2 PUSH2 0x3DEE JUMP JUMPDEST PUSH2 0x362F DUP2 DUP7 PUSH2 0x3C76 JUMP JUMPDEST SWAP5 POP PUSH1 0x1 DUP3 AND PUSH1 0x0 DUP2 EQ PUSH2 0x364A JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x365B JUMPI PUSH2 0x368E JUMP JUMPDEST PUSH1 0xFF NOT DUP4 AND DUP7 MSTORE DUP2 DUP7 ADD SWAP4 POP PUSH2 0x368E JUMP JUMPDEST PUSH2 0x3664 DUP6 PUSH2 0x3C11 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3686 JUMPI DUP2 SLOAD DUP2 DUP10 ADD MSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3667 JUMP JUMPDEST DUP4 DUP9 ADD SWAP6 POP POP POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36A2 DUP3 PUSH2 0x3C3C JUMP JUMPDEST PUSH2 0x36AC DUP2 DUP6 PUSH2 0x3C81 JUMP JUMPDEST SWAP4 POP PUSH2 0x36BC DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3DBB JUMP JUMPDEST PUSH2 0x36C5 DUP2 PUSH2 0x3F99 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36DB DUP3 PUSH2 0x3C3C JUMP JUMPDEST PUSH2 0x36E5 DUP2 DUP6 PUSH2 0x3C92 JUMP JUMPDEST SWAP4 POP PUSH2 0x36F5 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3DBB JUMP JUMPDEST PUSH2 0x36FE DUP2 PUSH2 0x3F99 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3714 DUP3 PUSH2 0x3C3C JUMP JUMPDEST PUSH2 0x371E DUP2 DUP6 PUSH2 0x3CA3 JUMP JUMPDEST SWAP4 POP PUSH2 0x372E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3DBB JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3747 PUSH1 0x2D DUP4 PUSH2 0x3C92 JUMP JUMPDEST SWAP2 POP PUSH2 0x3752 DUP3 PUSH2 0x3FAA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x376A PUSH1 0x32 DUP4 PUSH2 0x3C92 JUMP JUMPDEST SWAP2 POP PUSH2 0x3775 DUP3 PUSH2 0x3FF9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x378D PUSH1 0x25 DUP4 PUSH2 0x3C92 JUMP JUMPDEST SWAP2 POP PUSH2 0x3798 DUP3 PUSH2 0x4048 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37B0 PUSH1 0x24 DUP4 PUSH2 0x3C92 JUMP JUMPDEST SWAP2 POP PUSH2 0x37BB DUP3 PUSH2 0x4097 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37D3 PUSH1 0x19 DUP4 PUSH2 0x3C92 JUMP JUMPDEST SWAP2 POP PUSH2 0x37DE DUP3 PUSH2 0x40E6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37F6 PUSH1 0x29 DUP4 PUSH2 0x3C92 JUMP JUMPDEST SWAP2 POP PUSH2 0x3801 DUP3 PUSH2 0x410F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3819 PUSH1 0x18 DUP4 PUSH2 0x3C92 JUMP JUMPDEST SWAP2 POP PUSH2 0x3824 DUP3 PUSH2 0x415E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x383C PUSH1 0x21 DUP4 PUSH2 0x3C92 JUMP JUMPDEST SWAP2 POP PUSH2 0x3847 DUP3 PUSH2 0x4187 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x385F PUSH1 0x3D DUP4 PUSH2 0x3C92 JUMP JUMPDEST SWAP2 POP PUSH2 0x386A DUP3 PUSH2 0x41D6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x387E DUP2 PUSH2 0x3DA2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3890 DUP3 DUP5 PUSH2 0x3618 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38A7 DUP3 DUP6 PUSH2 0x3709 JUMP JUMPDEST SWAP2 POP PUSH2 0x38B3 DUP3 DUP5 PUSH2 0x3709 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x38D4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x354C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x38EF PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x354C JUMP JUMPDEST PUSH2 0x38FC PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x354C JUMP JUMPDEST PUSH2 0x3909 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3875 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x391B DUP2 DUP5 PUSH2 0x35DF JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3940 DUP2 DUP5 PUSH2 0x355B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x395D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x35D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x397D DUP2 DUP5 PUSH2 0x36D0 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x399F DUP2 DUP7 PUSH2 0x36D0 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x39B3 DUP2 DUP6 PUSH2 0x36D0 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x39C7 DUP2 DUP5 PUSH2 0x36D0 JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x39EA DUP2 PUSH2 0x373A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A0A DUP2 PUSH2 0x375D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A2A DUP2 PUSH2 0x3780 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A4A DUP2 PUSH2 0x37A3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A6A DUP2 PUSH2 0x37C6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A8A DUP2 PUSH2 0x37E9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AAA DUP2 PUSH2 0x380C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3ACA DUP2 PUSH2 0x382F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AEA DUP2 PUSH2 0x3852 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3B06 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3875 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3B21 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3875 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x3B33 DUP2 DUP5 PUSH2 0x36D0 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3B51 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x3875 JUMP JUMPDEST PUSH2 0x3B5E PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x3875 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x3B70 DUP2 DUP5 PUSH2 0x36D0 JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B84 PUSH2 0x3B95 JUMP JUMPDEST SWAP1 POP PUSH2 0x3B90 DUP3 DUP3 PUSH2 0x3E20 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3BBA JUMPI PUSH2 0x3BB9 PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST PUSH2 0x3BC3 DUP3 PUSH2 0x3F99 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3BEB JUMPI PUSH2 0x3BEA PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST PUSH2 0x3BF4 DUP3 PUSH2 0x3F99 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CB9 DUP3 PUSH2 0x3DA2 JUMP JUMPDEST SWAP2 POP PUSH2 0x3CC4 DUP4 PUSH2 0x3DA2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x3CF9 JUMPI PUSH2 0x3CF8 PUSH2 0x3E9A JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D0F DUP3 PUSH2 0x3DA2 JUMP JUMPDEST SWAP2 POP PUSH2 0x3D1A DUP4 PUSH2 0x3DA2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x3D2D JUMPI PUSH2 0x3D2C PUSH2 0x3E9A JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D43 DUP3 PUSH2 0x3D82 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3DD9 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3DBE JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x3DE8 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x3E06 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x3E1A JUMPI PUSH2 0x3E19 PUSH2 0x3EF8 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3E29 DUP3 PUSH2 0x3F99 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x3E48 JUMPI PUSH2 0x3E47 PUSH2 0x3F56 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E5C DUP3 PUSH2 0x3DA2 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x3E8F JUMPI PUSH2 0x3E8E PUSH2 0x3E9A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x422E DUP2 PUSH2 0x3D38 JUMP JUMPDEST DUP2 EQ PUSH2 0x4239 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x4245 DUP2 PUSH2 0x3D4A JUMP JUMPDEST DUP2 EQ PUSH2 0x4250 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x425C DUP2 PUSH2 0x3D56 JUMP JUMPDEST DUP2 EQ PUSH2 0x4267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x4273 DUP2 PUSH2 0x3DA2 JUMP JUMPDEST DUP2 EQ PUSH2 0x427E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP16 EXTCODEHASH 0xCF 0x4F PUSH22 0xECE837AE08AF680170C98BED717E0511C5023E434E02 KECCAK256 DELEGATECALL 0xD2 0xCA 0xD7 PUSH5 0x736F6C6343 STOP ADDMOD MOD STOP CALLER ","sourceMap":"204:7358:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3210:455:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4907:460;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1302:71;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;3676:305;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4612:326:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;894:51:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;2904:300;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4162:266;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5004:179:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1170:55:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;6549:552;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2321:150;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2190:219:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2489:254:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6205:338;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1749:265;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6024:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4597:304:11;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5378:313;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5697:320:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7107:452;;;:::i;:::-;;5249:314:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4434:157:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2020:294;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2749:149;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1460:283;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2801:276:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3987:156:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1570:300;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;3210:455:11:-;3281:15;3346:26;3388:9;;3375:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3346:52;;3408:17;3440:9;3452:1;3440:13;;3435:196;3459:9;;3455:1;:13;3435:196;;;3515:7;3491:10;:13;3502:1;3491:13;;;;;;;;;;;:20;;;:31;3487:134;;;3561:10;:13;3572:1;3561:13;;;;;;;;;;;:22;;3537:46;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:10;3548:9;3537:21;;;;;;;;:::i;:::-;;;;;;;:46;;;;3597:11;;;;;:::i;:::-;;;;3487:134;3470:3;;;;;:::i;:::-;;;;3435:196;;;;3648:10;3641:17;;;;3210:455;;;:::o;4907:460::-;4980:15;5046:26;5088:10;;5075:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5046:53;;5117:17;5149:9;5161:1;5149:13;;5144:189;5168:10;;5164:1;:14;5144:189;;;5227:8;5201:11;:14;5213:1;5201:14;;;;;;;;;;;:22;;;:34;5197:100;;;5273:11;:14;5285:1;5273:14;;;;;;;;;;;:24;;5249:48;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:10;5260:9;5249:21;;;;;;;;:::i;:::-;;;;;;;:48;;;;5197:100;5311:11;;;;;:::i;:::-;;;;5180:3;;;;;:::i;:::-;;;;5144:189;;;;5350:10;5343:17;;;;4907:460;;;:::o;1302:71::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3676:305::-;3755:7;3812:9;3824:1;3812:13;;3807:149;3831:9;;3827:1;:13;3807:149;;;3923:9;3907:27;;;;;;3879:10;:13;3890:1;3879:13;;;;;;;;;;;:22;;3863:40;;;;;;:::i;:::-;;;;;;;;:71;3859:86;;;3944:1;3936:9;;;;;3859:86;3842:3;;;;;:::i;:::-;;;;3807:149;;;;3973:1;3966:8;;3676:305;;;;:::o;4612:326:1:-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;894:51:11:-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2904:300::-;2950:15;3005:26;3047:9;;3034:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3005:52;;3072:9;3067:103;3091:9;;3087:1;:13;3067:103;;;3137:10;:13;3148:1;3137:13;;;;;;;;;;;:22;;3121:38;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:10;3132:1;3121:13;;;;;;;;:::i;:::-;;;;;;;:38;;;;3102:3;;;;;:::i;:::-;;;;3067:103;;;;3187:10;3180:17;;;2904:300;:::o;4162:266::-;4244:7;4333:38;;;;;;;;4350:8;4333:38;;;;4360:10;4333:38;;;4307:11;:23;4319:10;;4307:23;;;;;;;;;;;:64;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;4381:10;;:12;;;;;;;;;:::i;:::-;;;;;;4411:10;;4404:17;;4162:266;;;;:::o;5004:179:1:-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;1170:55:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6549:552::-;6642:15;6714:26;6756:15;;6743:29;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6714:58;;6782:17;6814:9;6826:1;6814:13;;6809:259;6833:15;;6829:1;:19;6809:259;;;6906:8;6871:20;:23;6892:1;6871:23;;;;;;;;;;;:31;;;:43;:92;;;;;6954:9;6918:20;:23;6939:1;6918:23;;;;;;;;;;;:32;;;:45;6871:92;6867:165;;;7002:20;:23;7023:1;7002:23;;;;;;;;;;;:30;;6978:54;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:10;6989:9;6978:21;;;;;;;;:::i;:::-;;;;;;;:54;;;;6867:165;7046:11;;;;;:::i;:::-;;;;6850:3;;;;;:::i;:::-;;;;6809:259;;;;7084:10;7077:17;;;;6549:552;;;;:::o;2321:150::-;2376:13;2438:9;:18;2448:7;2438:18;;;;;;;;;;;:26;;2431:33;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2321:150;;;:::o;2190:219:1:-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;1929:204::-;2001:7;2045:1;2028:19;;:5;:19;;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;2489:254:11:-;2568:7;2653:35;;;;;;;;2669:7;2653:35;;;;2678:9;2653:35;;;2629:10;:21;2640:9;;2629:21;;;;;;;;;;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;2698:9;;:11;;;;;;;;;:::i;:::-;;;;;;2727:9;;2720:16;;2489:254;;;;:::o;6205:338::-;6312:7;6424:52;;;;;;;;6448:8;6424:52;;;;6458:9;6424:52;;;;6468:7;6424:52;;;6384:20;:37;6405:15;;6384:37;;;;;;;;;;;:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;6486:15;;:17;;;;;;;;;:::i;:::-;;;;;;6521:15;;6514:22;;6205:338;;;;;:::o;1749:265::-;1949:11;1917:9;:18;1927:7;1917:18;;;;;;;;;;;:29;;:43;;;;;;;;;;;;:::i;:::-;;1999:8;1970:9;:18;1980:7;1970:18;;;;;;;;;;;:26;;:37;;;;;;;;;;;;:::i;:::-;;1749:265;;;:::o;6024:162::-;6083:13;6147:11;:22;6159:9;6147:22;;;;;;;;;;;:32;;6140:39;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6024:162;;;:::o;2633:102:1:-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4597:304:11:-;4643:15;4698:26;4740:10;;4727:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4698:53;;4766:9;4761:106;4785:10;;4781:1;:14;4761:106;;;4832:11;:14;4844:1;4832:14;;;;;;;;;;;:24;;4816:40;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:10;4827:1;4816:13;;;;;;;;:::i;:::-;;;;;;;:40;;;;4797:3;;;;;:::i;:::-;;;;4761:106;;;;4884:10;4877:17;;;4597:304;:::o;5378:313::-;5460:7;5518:9;5530:1;5518:13;;5513:153;5537:10;;5533:1;:14;5513:153;;;5632:10;5616:28;;;;;;5586:11;:14;5598:1;5586:14;;;;;;;;;;;:24;;5570:42;;;;;;:::i;:::-;;;;;;;;:74;5566:89;;;5654:1;5646:9;;;;;5566:89;5549:3;;;;;:::i;:::-;;;;5513:153;;;;5683:1;5676:8;;5378:313;;;;:::o;4169:153:1:-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5697:320:11:-;5780:7;5832:9;5844:1;5832:13;;5827:168;5851:10;;5847:1;:14;5827:168;;;5943:10;5927:28;;;;;;5897:11;:14;5909:1;5897:14;;;;;;;;;;;:24;;5881:42;;;;;;:::i;:::-;;;;;;;;:74;5877:110;;;5965:11;:14;5977:1;5965:14;;;;;;;;;;;:22;;;5957:30;;;;;5877:110;5863:3;;;;;:::i;:::-;;;;5827:168;;;;6009:1;6002:8;;5697:320;;;;:::o;7107:452::-;7154:1;7143:8;:12;;;;7175:1;7163:9;:13;;;;7197:1;7184:10;:14;;;;7224:1;7206:15;:19;;;;7238:9;7233:69;7257:8;;7253:1;:12;7233:69;;;7290:9;:12;7300:1;7290:12;;;;;;;;;;;;7283:19;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;7267:3;;;;;:::i;:::-;;;;7233:69;;;;7315:9;7310:70;7334:9;;7330:1;:13;7310:70;;;7367:10;:13;7378:1;7367:13;;;;;;;;;;;;7360:20;;;;;;;;;;;;;;:::i;:::-;;;7345:3;;;;;:::i;:::-;;;;7310:70;;;;7393:9;7388:71;7412:10;;7408:1;:14;7388:71;;;7445:11;:14;7457:1;7445:14;;;;;;;;;;;;7438:21;;;;;;;;;;;;;;:::i;:::-;;;7424:3;;;;;:::i;:::-;;;;7388:71;;;;7472:9;7467:80;7491:15;;7487:1;:19;7467:80;;;7524:20;:23;7545:1;7524:23;;;;;;;;;;;;7517:30;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;7508:3;;;;;:::i;:::-;;;;7467:80;;;;7107:452::o;5249:314:1:-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;4434:157:11:-;4574:10;4539:11;:22;4551:9;4539:22;;;;;;;;;;;:32;;:45;;;;;;;;;;;;:::i;:::-;;4434:157;;:::o;2020:294::-;2065:15;2119:26;2161:8;;2148:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2119:51;;2185:9;2180:100;2204:8;;2200:1;:12;2180:100;;;2249:9;:12;2259:1;2249:12;;;;;;;;;;;:20;;2233:36;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:10;2244:1;2233:13;;;;;;;;:::i;:::-;;;;;;;:36;;;;2214:3;;;;;:::i;:::-;;;;2180:100;;;;2297:10;2290:17;;;2020:294;:::o;2749:149::-;2882:9;2850:10;:20;2861:8;2850:20;;;;;;;;;;;:29;;:41;;;;;;;;;;;;:::i;:::-;;2749:149;;:::o;1460:283::-;1563:7;1644:46;;;;;;;;1659:11;1644:46;;;;1672:8;1644:46;;;;;;;;;;;;;;;;;;;;;;;;1622:9;:19;1632:8;;1622:19;;;;;;;;;;;:68;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1700:8;;:10;;;;;;;;;:::i;:::-;;;;;;1728:8;;1721:15;;1460:283;;;;:::o;2801:276:1:-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;3987:156:11:-;4044:13;4107:10;:20;4118:8;4107:20;;;;;;;;;;;:29;;4100:36;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3987:156;;;:::o;4388:162:1:-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;829:155:8:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13466:133:1:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:6:-;693:7;719:10;712:17;;640:96;:::o;12768:171:1:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;6838:115::-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;13075:307::-;13225:8;13216:17;;:5;:17;;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;415:696:7:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;:::i;:::-;;;;;1045:1;1036:5;:10;1032:21;;;1048:5;;1032:21;788:280;;;1088:6;1081:13;;;;;415:696;;;:::o;7256:126:1:-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;15698:396::-;15882:1;15870:9;:13;15866:222;;;15919:1;15903:18;;:4;:18;;;15899:85;;15960:9;15941;:15;15951:4;15941:15;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;15899:85;16015:1;16001:16;;:2;:16;;;15997:81;;16054:9;16037;:13;16047:2;16037:13;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;15997:81;15866:222;15698:396;;;;:::o;16800:153::-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;9889:890:10:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;:::i;:::-;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;:::i;:::-;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;:::i;:::-;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;:::i;:::-;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;:::i;:::-;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;:::i;:::-;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;1175:320:5:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:410:21:-;84:5;109:65;125:48;166:6;125:48;:::i;:::-;109:65;:::i;:::-;100:74;;197:6;190:5;183:21;235:4;228:5;224:16;273:3;264:6;259:3;255:16;252:25;249:2;;;280:79;;:::i;:::-;249:2;370:41;404:6;399:3;394;370:41;:::i;:::-;90:327;;;;;;:::o;423:412::-;501:5;526:66;542:49;584:6;542:49;:::i;:::-;526:66;:::i;:::-;517:75;;615:6;608:5;601:21;653:4;646:5;642:16;691:3;682:6;677:3;673:16;670:25;667:2;;;698:79;;:::i;:::-;667:2;788:41;822:6;817:3;812;788:41;:::i;:::-;507:328;;;;;;:::o;841:139::-;887:5;925:6;912:20;903:29;;941:33;968:5;941:33;:::i;:::-;893:87;;;;:::o;986:133::-;1029:5;1067:6;1054:20;1045:29;;1083:30;1107:5;1083:30;:::i;:::-;1035:84;;;;:::o;1125:137::-;1170:5;1208:6;1195:20;1186:29;;1224:32;1250:5;1224:32;:::i;:::-;1176:86;;;;:::o;1268:141::-;1324:5;1355:6;1349:13;1340:22;;1371:32;1397:5;1371:32;:::i;:::-;1330:79;;;;:::o;1428:338::-;1483:5;1532:3;1525:4;1517:6;1513:17;1509:27;1499:2;;1540:79;;:::i;:::-;1499:2;1657:6;1644:20;1682:78;1756:3;1748:6;1741:4;1733:6;1729:17;1682:78;:::i;:::-;1673:87;;1489:277;;;;;:::o;1786:340::-;1842:5;1891:3;1884:4;1876:6;1872:17;1868:27;1858:2;;1899:79;;:::i;:::-;1858:2;2016:6;2003:20;2041:79;2116:3;2108:6;2101:4;2093:6;2089:17;2041:79;:::i;:::-;2032:88;;1848:278;;;;;:::o;2132:139::-;2178:5;2216:6;2203:20;2194:29;;2232:33;2259:5;2232:33;:::i;:::-;2184:87;;;;:::o;2277:329::-;2336:6;2385:2;2373:9;2364:7;2360:23;2356:32;2353:2;;;2391:79;;:::i;:::-;2353:2;2511:1;2536:53;2581:7;2572:6;2561:9;2557:22;2536:53;:::i;:::-;2526:63;;2482:117;2343:263;;;;:::o;2612:474::-;2680:6;2688;2737:2;2725:9;2716:7;2712:23;2708:32;2705:2;;;2743:79;;:::i;:::-;2705:2;2863:1;2888:53;2933:7;2924:6;2913:9;2909:22;2888:53;:::i;:::-;2878:63;;2834:117;2990:2;3016:53;3061:7;3052:6;3041:9;3037:22;3016:53;:::i;:::-;3006:63;;2961:118;2695:391;;;;;:::o;3092:619::-;3169:6;3177;3185;3234:2;3222:9;3213:7;3209:23;3205:32;3202:2;;;3240:79;;:::i;:::-;3202:2;3360:1;3385:53;3430:7;3421:6;3410:9;3406:22;3385:53;:::i;:::-;3375:63;;3331:117;3487:2;3513:53;3558:7;3549:6;3538:9;3534:22;3513:53;:::i;:::-;3503:63;;3458:118;3615:2;3641:53;3686:7;3677:6;3666:9;3662:22;3641:53;:::i;:::-;3631:63;;3586:118;3192:519;;;;;:::o;3717:943::-;3812:6;3820;3828;3836;3885:3;3873:9;3864:7;3860:23;3856:33;3853:2;;;3892:79;;:::i;:::-;3853:2;4012:1;4037:53;4082:7;4073:6;4062:9;4058:22;4037:53;:::i;:::-;4027:63;;3983:117;4139:2;4165:53;4210:7;4201:6;4190:9;4186:22;4165:53;:::i;:::-;4155:63;;4110:118;4267:2;4293:53;4338:7;4329:6;4318:9;4314:22;4293:53;:::i;:::-;4283:63;;4238:118;4423:2;4412:9;4408:18;4395:32;4454:18;4446:6;4443:30;4440:2;;;4476:79;;:::i;:::-;4440:2;4581:62;4635:7;4626:6;4615:9;4611:22;4581:62;:::i;:::-;4571:72;;4366:287;3843:817;;;;;;;:::o;4666:468::-;4731:6;4739;4788:2;4776:9;4767:7;4763:23;4759:32;4756:2;;;4794:79;;:::i;:::-;4756:2;4914:1;4939:53;4984:7;4975:6;4964:9;4960:22;4939:53;:::i;:::-;4929:63;;4885:117;5041:2;5067:50;5109:7;5100:6;5089:9;5085:22;5067:50;:::i;:::-;5057:60;;5012:115;4746:388;;;;;:::o;5140:474::-;5208:6;5216;5265:2;5253:9;5244:7;5240:23;5236:32;5233:2;;;5271:79;;:::i;:::-;5233:2;5391:1;5416:53;5461:7;5452:6;5441:9;5437:22;5416:53;:::i;:::-;5406:63;;5362:117;5518:2;5544:53;5589:7;5580:6;5569:9;5565:22;5544:53;:::i;:::-;5534:63;;5489:118;5223:391;;;;;:::o;5620:327::-;5678:6;5727:2;5715:9;5706:7;5702:23;5698:32;5695:2;;;5733:79;;:::i;:::-;5695:2;5853:1;5878:52;5922:7;5913:6;5902:9;5898:22;5878:52;:::i;:::-;5868:62;;5824:116;5685:262;;;;:::o;5953:349::-;6022:6;6071:2;6059:9;6050:7;6046:23;6042:32;6039:2;;;6077:79;;:::i;:::-;6039:2;6197:1;6222:63;6277:7;6268:6;6257:9;6253:22;6222:63;:::i;:::-;6212:73;;6168:127;6029:273;;;;:::o;6308:509::-;6377:6;6426:2;6414:9;6405:7;6401:23;6397:32;6394:2;;;6432:79;;:::i;:::-;6394:2;6580:1;6569:9;6565:17;6552:31;6610:18;6602:6;6599:30;6596:2;;;6632:79;;:::i;:::-;6596:2;6737:63;6792:7;6783:6;6772:9;6768:22;6737:63;:::i;:::-;6727:73;;6523:287;6384:433;;;;:::o;6823:834::-;6911:6;6919;6968:2;6956:9;6947:7;6943:23;6939:32;6936:2;;;6974:79;;:::i;:::-;6936:2;7122:1;7111:9;7107:17;7094:31;7152:18;7144:6;7141:30;7138:2;;;7174:79;;:::i;:::-;7138:2;7279:63;7334:7;7325:6;7314:9;7310:22;7279:63;:::i;:::-;7269:73;;7065:287;7419:2;7408:9;7404:18;7391:32;7450:18;7442:6;7439:30;7436:2;;;7472:79;;:::i;:::-;7436:2;7577:63;7632:7;7623:6;7612:9;7608:22;7577:63;:::i;:::-;7567:73;;7362:288;6926:731;;;;;:::o;7663:654::-;7741:6;7749;7798:2;7786:9;7777:7;7773:23;7769:32;7766:2;;;7804:79;;:::i;:::-;7766:2;7952:1;7941:9;7937:17;7924:31;7982:18;7974:6;7971:30;7968:2;;;8004:79;;:::i;:::-;7968:2;8109:63;8164:7;8155:6;8144:9;8140:22;8109:63;:::i;:::-;8099:73;;7895:287;8221:2;8247:53;8292:7;8283:6;8272:9;8268:22;8247:53;:::i;:::-;8237:63;;8192:118;7756:561;;;;;:::o;8323:329::-;8382:6;8431:2;8419:9;8410:7;8406:23;8402:32;8399:2;;;8437:79;;:::i;:::-;8399:2;8557:1;8582:53;8627:7;8618:6;8607:9;8603:22;8582:53;:::i;:::-;8572:63;;8528:117;8389:263;;;;:::o;8658:654::-;8736:6;8744;8793:2;8781:9;8772:7;8768:23;8764:32;8761:2;;;8799:79;;:::i;:::-;8761:2;8919:1;8944:53;8989:7;8980:6;8969:9;8965:22;8944:53;:::i;:::-;8934:63;;8890:117;9074:2;9063:9;9059:18;9046:32;9105:18;9097:6;9094:30;9091:2;;;9127:79;;:::i;:::-;9091:2;9232:63;9287:7;9278:6;9267:9;9263:22;9232:63;:::i;:::-;9222:73;;9017:288;8751:561;;;;;:::o;9318:979::-;9415:6;9423;9431;9480:2;9468:9;9459:7;9455:23;9451:32;9448:2;;;9486:79;;:::i;:::-;9448:2;9606:1;9631:53;9676:7;9667:6;9656:9;9652:22;9631:53;:::i;:::-;9621:63;;9577:117;9761:2;9750:9;9746:18;9733:32;9792:18;9784:6;9781:30;9778:2;;;9814:79;;:::i;:::-;9778:2;9919:63;9974:7;9965:6;9954:9;9950:22;9919:63;:::i;:::-;9909:73;;9704:288;10059:2;10048:9;10044:18;10031:32;10090:18;10082:6;10079:30;10076:2;;;10112:79;;:::i;:::-;10076:2;10217:63;10272:7;10263:6;10252:9;10248:22;10217:63;:::i;:::-;10207:73;;10002:288;9438:859;;;;;:::o;10303:474::-;10371:6;10379;10428:2;10416:9;10407:7;10403:23;10399:32;10396:2;;;10434:79;;:::i;:::-;10396:2;10554:1;10579:53;10624:7;10615:6;10604:9;10600:22;10579:53;:::i;:::-;10569:63;;10525:117;10681:2;10707:53;10752:7;10743:6;10732:9;10728:22;10707:53;:::i;:::-;10697:63;;10652:118;10386:391;;;;;:::o;10783:799::-;10870:6;10878;10886;10935:2;10923:9;10914:7;10910:23;10906:32;10903:2;;;10941:79;;:::i;:::-;10903:2;11061:1;11086:53;11131:7;11122:6;11111:9;11107:22;11086:53;:::i;:::-;11076:63;;11032:117;11188:2;11214:53;11259:7;11250:6;11239:9;11235:22;11214:53;:::i;:::-;11204:63;;11159:118;11344:2;11333:9;11329:18;11316:32;11375:18;11367:6;11364:30;11361:2;;;11397:79;;:::i;:::-;11361:2;11502:63;11557:7;11548:6;11537:9;11533:22;11502:63;:::i;:::-;11492:73;;11287:288;10893:689;;;;;:::o;11588:196::-;11677:10;11712:66;11774:3;11766:6;11712:66;:::i;:::-;11698:80;;11688:96;;;;:::o;11790:118::-;11877:24;11895:5;11877:24;:::i;:::-;11872:3;11865:37;11855:53;;:::o;11942:991::-;12081:3;12110:64;12168:5;12110:64;:::i;:::-;12190:96;12279:6;12274:3;12190:96;:::i;:::-;12183:103;;12312:3;12357:4;12349:6;12345:17;12340:3;12336:27;12387:66;12447:5;12387:66;:::i;:::-;12476:7;12507:1;12492:396;12517:6;12514:1;12511:13;12492:396;;;12588:9;12582:4;12578:20;12573:3;12566:33;12639:6;12633:13;12667:84;12746:4;12731:13;12667:84;:::i;:::-;12659:92;;12774:70;12837:6;12774:70;:::i;:::-;12764:80;;12873:4;12868:3;12864:14;12857:21;;12552:336;12539:1;12536;12532:9;12527:14;;12492:396;;;12496:14;12904:4;12897:11;;12924:3;12917:10;;12086:847;;;;;;;;;:::o;12939:109::-;13020:21;13035:5;13020:21;:::i;:::-;13015:3;13008:34;12998:50;;:::o;13054:360::-;13140:3;13168:38;13200:5;13168:38;:::i;:::-;13222:70;13285:6;13280:3;13222:70;:::i;:::-;13215:77;;13301:52;13346:6;13341:3;13334:4;13327:5;13323:16;13301:52;:::i;:::-;13378:29;13400:6;13378:29;:::i;:::-;13373:3;13369:39;13362:46;;13144:270;;;;;:::o;13442:849::-;13547:3;13584:5;13578:12;13613:36;13639:9;13613:36;:::i;:::-;13665:88;13746:6;13741:3;13665:88;:::i;:::-;13658:95;;13784:1;13773:9;13769:17;13800:1;13795:137;;;;13946:1;13941:344;;;;13762:523;;13795:137;13879:4;13875:9;13864;13860:25;13855:3;13848:38;13915:6;13910:3;13906:16;13899:23;;13795:137;;13941:344;14008:41;14043:5;14008:41;:::i;:::-;14071:1;14085:154;14099:6;14096:1;14093:13;14085:154;;;14173:7;14167:14;14163:1;14158:3;14154:11;14147:35;14223:1;14214:7;14210:15;14199:26;;14121:4;14118:1;14114:12;14109:17;;14085:154;;;14268:6;14263:3;14259:16;14252:23;;13948:337;;13762:523;;13551:740;;;;;;:::o;14297:344::-;14375:3;14403:39;14436:5;14403:39;:::i;:::-;14458:61;14512:6;14507:3;14458:61;:::i;:::-;14451:68;;14528:52;14573:6;14568:3;14561:4;14554:5;14550:16;14528:52;:::i;:::-;14605:29;14627:6;14605:29;:::i;:::-;14600:3;14596:39;14589:46;;14379:262;;;;;:::o;14647:364::-;14735:3;14763:39;14796:5;14763:39;:::i;:::-;14818:71;14882:6;14877:3;14818:71;:::i;:::-;14811:78;;14898:52;14943:6;14938:3;14931:4;14924:5;14920:16;14898:52;:::i;:::-;14975:29;14997:6;14975:29;:::i;:::-;14970:3;14966:39;14959:46;;14739:272;;;;;:::o;15017:377::-;15123:3;15151:39;15184:5;15151:39;:::i;:::-;15206:89;15288:6;15283:3;15206:89;:::i;:::-;15199:96;;15304:52;15349:6;15344:3;15337:4;15330:5;15326:16;15304:52;:::i;:::-;15381:6;15376:3;15372:16;15365:23;;15127:267;;;;;:::o;15400:366::-;15542:3;15563:67;15627:2;15622:3;15563:67;:::i;:::-;15556:74;;15639:93;15728:3;15639:93;:::i;:::-;15757:2;15752:3;15748:12;15741:19;;15546:220;;;:::o;15772:366::-;15914:3;15935:67;15999:2;15994:3;15935:67;:::i;:::-;15928:74;;16011:93;16100:3;16011:93;:::i;:::-;16129:2;16124:3;16120:12;16113:19;;15918:220;;;:::o;16144:366::-;16286:3;16307:67;16371:2;16366:3;16307:67;:::i;:::-;16300:74;;16383:93;16472:3;16383:93;:::i;:::-;16501:2;16496:3;16492:12;16485:19;;16290:220;;;:::o;16516:366::-;16658:3;16679:67;16743:2;16738:3;16679:67;:::i;:::-;16672:74;;16755:93;16844:3;16755:93;:::i;:::-;16873:2;16868:3;16864:12;16857:19;;16662:220;;;:::o;16888:366::-;17030:3;17051:67;17115:2;17110:3;17051:67;:::i;:::-;17044:74;;17127:93;17216:3;17127:93;:::i;:::-;17245:2;17240:3;17236:12;17229:19;;17034:220;;;:::o;17260:366::-;17402:3;17423:67;17487:2;17482:3;17423:67;:::i;:::-;17416:74;;17499:93;17588:3;17499:93;:::i;:::-;17617:2;17612:3;17608:12;17601:19;;17406:220;;;:::o;17632:366::-;17774:3;17795:67;17859:2;17854:3;17795:67;:::i;:::-;17788:74;;17871:93;17960:3;17871:93;:::i;:::-;17989:2;17984:3;17980:12;17973:19;;17778:220;;;:::o;18004:366::-;18146:3;18167:67;18231:2;18226:3;18167:67;:::i;:::-;18160:74;;18243:93;18332:3;18243:93;:::i;:::-;18361:2;18356:3;18352:12;18345:19;;18150:220;;;:::o;18376:366::-;18518:3;18539:67;18603:2;18598:3;18539:67;:::i;:::-;18532:74;;18615:93;18704:3;18615:93;:::i;:::-;18733:2;18728:3;18724:12;18717:19;;18522:220;;;:::o;18748:118::-;18835:24;18853:5;18835:24;:::i;:::-;18830:3;18823:37;18813:53;;:::o;18872:273::-;19003:3;19025:94;19115:3;19106:6;19025:94;:::i;:::-;19018:101;;19136:3;19129:10;;19007:138;;;;:::o;19151:435::-;19331:3;19353:95;19444:3;19435:6;19353:95;:::i;:::-;19346:102;;19465:95;19556:3;19547:6;19465:95;:::i;:::-;19458:102;;19577:3;19570:10;;19335:251;;;;;:::o;19592:222::-;19685:4;19723:2;19712:9;19708:18;19700:26;;19736:71;19804:1;19793:9;19789:17;19780:6;19736:71;:::i;:::-;19690:124;;;;:::o;19820:640::-;20015:4;20053:3;20042:9;20038:19;20030:27;;20067:71;20135:1;20124:9;20120:17;20111:6;20067:71;:::i;:::-;20148:72;20216:2;20205:9;20201:18;20192:6;20148:72;:::i;:::-;20230;20298:2;20287:9;20283:18;20274:6;20230:72;:::i;:::-;20349:9;20343:4;20339:20;20334:2;20323:9;20319:18;20312:48;20377:76;20448:4;20439:6;20377:76;:::i;:::-;20369:84;;20020:440;;;;;;;:::o;20466:413::-;20629:4;20667:2;20656:9;20652:18;20644:26;;20716:9;20710:4;20706:20;20702:1;20691:9;20687:17;20680:47;20744:128;20867:4;20858:6;20744:128;:::i;:::-;20736:136;;20634:245;;;;:::o;20885:210::-;20972:4;21010:2;20999:9;20995:18;20987:26;;21023:65;21085:1;21074:9;21070:17;21061:6;21023:65;:::i;:::-;20977:118;;;;:::o;21101:313::-;21214:4;21252:2;21241:9;21237:18;21229:26;;21301:9;21295:4;21291:20;21287:1;21276:9;21272:17;21265:47;21329:78;21402:4;21393:6;21329:78;:::i;:::-;21321:86;;21219:195;;;;:::o;21420:715::-;21629:4;21667:2;21656:9;21652:18;21644:26;;21716:9;21710:4;21706:20;21702:1;21691:9;21687:17;21680:47;21744:78;21817:4;21808:6;21744:78;:::i;:::-;21736:86;;21869:9;21863:4;21859:20;21854:2;21843:9;21839:18;21832:48;21897:78;21970:4;21961:6;21897:78;:::i;:::-;21889:86;;22022:9;22016:4;22012:20;22007:2;21996:9;21992:18;21985:48;22050:78;22123:4;22114:6;22050:78;:::i;:::-;22042:86;;21634:501;;;;;;:::o;22141:419::-;22307:4;22345:2;22334:9;22330:18;22322:26;;22394:9;22388:4;22384:20;22380:1;22369:9;22365:17;22358:47;22422:131;22548:4;22422:131;:::i;:::-;22414:139;;22312:248;;;:::o;22566:419::-;22732:4;22770:2;22759:9;22755:18;22747:26;;22819:9;22813:4;22809:20;22805:1;22794:9;22790:17;22783:47;22847:131;22973:4;22847:131;:::i;:::-;22839:139;;22737:248;;;:::o;22991:419::-;23157:4;23195:2;23184:9;23180:18;23172:26;;23244:9;23238:4;23234:20;23230:1;23219:9;23215:17;23208:47;23272:131;23398:4;23272:131;:::i;:::-;23264:139;;23162:248;;;:::o;23416:419::-;23582:4;23620:2;23609:9;23605:18;23597:26;;23669:9;23663:4;23659:20;23655:1;23644:9;23640:17;23633:47;23697:131;23823:4;23697:131;:::i;:::-;23689:139;;23587:248;;;:::o;23841:419::-;24007:4;24045:2;24034:9;24030:18;24022:26;;24094:9;24088:4;24084:20;24080:1;24069:9;24065:17;24058:47;24122:131;24248:4;24122:131;:::i;:::-;24114:139;;24012:248;;;:::o;24266:419::-;24432:4;24470:2;24459:9;24455:18;24447:26;;24519:9;24513:4;24509:20;24505:1;24494:9;24490:17;24483:47;24547:131;24673:4;24547:131;:::i;:::-;24539:139;;24437:248;;;:::o;24691:419::-;24857:4;24895:2;24884:9;24880:18;24872:26;;24944:9;24938:4;24934:20;24930:1;24919:9;24915:17;24908:47;24972:131;25098:4;24972:131;:::i;:::-;24964:139;;24862:248;;;:::o;25116:419::-;25282:4;25320:2;25309:9;25305:18;25297:26;;25369:9;25363:4;25359:20;25355:1;25344:9;25340:17;25333:47;25397:131;25523:4;25397:131;:::i;:::-;25389:139;;25287:248;;;:::o;25541:419::-;25707:4;25745:2;25734:9;25730:18;25722:26;;25794:9;25788:4;25784:20;25780:1;25769:9;25765:17;25758:47;25822:131;25948:4;25822:131;:::i;:::-;25814:139;;25712:248;;;:::o;25966:222::-;26059:4;26097:2;26086:9;26082:18;26074:26;;26110:71;26178:1;26167:9;26163:17;26154:6;26110:71;:::i;:::-;26064:124;;;;:::o;26194:423::-;26335:4;26373:2;26362:9;26358:18;26350:26;;26386:71;26454:1;26443:9;26439:17;26430:6;26386:71;:::i;:::-;26504:9;26498:4;26494:20;26489:2;26478:9;26474:18;26467:48;26532:78;26605:4;26596:6;26532:78;:::i;:::-;26524:86;;26340:277;;;;;:::o;26623:533::-;26792:4;26830:2;26819:9;26815:18;26807:26;;26843:71;26911:1;26900:9;26896:17;26887:6;26843:71;:::i;:::-;26924:72;26992:2;26981:9;26977:18;26968:6;26924:72;:::i;:::-;27043:9;27037:4;27033:20;27028:2;27017:9;27013:18;27006:48;27071:78;27144:4;27135:6;27071:78;:::i;:::-;27063:86;;26797:359;;;;;;:::o;27162:129::-;27196:6;27223:20;;:::i;:::-;27213:30;;27252:33;27280:4;27272:6;27252:33;:::i;:::-;27203:88;;;:::o;27297:75::-;27330:6;27363:2;27357:9;27347:19;;27337:35;:::o;27378:307::-;27439:4;27529:18;27521:6;27518:30;27515:2;;;27551:18;;:::i;:::-;27515:2;27589:29;27611:6;27589:29;:::i;:::-;27581:37;;27673:4;27667;27663:15;27655:23;;27444:241;;;:::o;27691:308::-;27753:4;27843:18;27835:6;27832:30;27829:2;;;27865:18;;:::i;:::-;27829:2;27903:29;27925:6;27903:29;:::i;:::-;27895:37;;27987:4;27981;27977:15;27969:23;;27758:241;;;:::o;28005:142::-;28082:4;28105:3;28097:11;;28135:4;28130:3;28126:14;28118:22;;28087:60;;;:::o;28153:144::-;28205:4;28228:3;28220:11;;28251:3;28248:1;28241:14;28285:4;28282:1;28272:18;28264:26;;28210:87;;;:::o;28303:124::-;28380:6;28414:5;28408:12;28398:22;;28387:40;;;:::o;28433:98::-;28484:6;28518:5;28512:12;28502:22;;28491:40;;;:::o;28537:99::-;28589:6;28623:5;28617:12;28607:22;;28596:40;;;:::o;28642:123::-;28722:4;28754;28749:3;28745:14;28737:22;;28727:38;;;:::o;28771:194::-;28880:11;28914:6;28909:3;28902:19;28954:4;28949:3;28945:14;28930:29;;28892:73;;;;:::o;28971:168::-;29054:11;29088:6;29083:3;29076:19;29128:4;29123:3;29119:14;29104:29;;29066:73;;;;:::o;29145:147::-;29246:11;29283:3;29268:18;;29258:34;;;;:::o;29298:159::-;29372:11;29406:6;29401:3;29394:19;29446:4;29441:3;29437:14;29422:29;;29384:73;;;;:::o;29463:169::-;29547:11;29581:6;29576:3;29569:19;29621:4;29616:3;29612:14;29597:29;;29559:73;;;;:::o;29638:148::-;29740:11;29777:3;29762:18;;29752:34;;;;:::o;29792:305::-;29832:3;29851:20;29869:1;29851:20;:::i;:::-;29846:25;;29885:20;29903:1;29885:20;:::i;:::-;29880:25;;30039:1;29971:66;29967:74;29964:1;29961:81;29958:2;;;30045:18;;:::i;:::-;29958:2;30089:1;30086;30082:9;30075:16;;29836:261;;;;:::o;30103:191::-;30143:4;30163:20;30181:1;30163:20;:::i;:::-;30158:25;;30197:20;30215:1;30197:20;:::i;:::-;30192:25;;30236:1;30233;30230:8;30227:2;;;30241:18;;:::i;:::-;30227:2;30286:1;30283;30279:9;30271:17;;30148:146;;;;:::o;30300:96::-;30337:7;30366:24;30384:5;30366:24;:::i;:::-;30355:35;;30345:51;;;:::o;30402:90::-;30436:7;30479:5;30472:13;30465:21;30454:32;;30444:48;;;:::o;30498:149::-;30534:7;30574:66;30567:5;30563:78;30552:89;;30542:105;;;:::o;30653:126::-;30690:7;30730:42;30723:5;30719:54;30708:65;;30698:81;;;:::o;30785:77::-;30822:7;30851:5;30840:16;;30830:32;;;:::o;30868:154::-;30952:6;30947:3;30942;30929:30;31014:1;31005:6;31000:3;30996:16;30989:27;30919:103;;;:::o;31028:307::-;31096:1;31106:113;31120:6;31117:1;31114:13;31106:113;;;31205:1;31200:3;31196:11;31190:18;31186:1;31181:3;31177:11;31170:39;31142:2;31139:1;31135:10;31130:15;;31106:113;;;31237:6;31234:1;31231:13;31228:2;;;31317:1;31308:6;31303:3;31299:16;31292:27;31228:2;31077:258;;;;:::o;31341:320::-;31385:6;31422:1;31416:4;31412:12;31402:22;;31469:1;31463:4;31459:12;31490:18;31480:2;;31546:4;31538:6;31534:17;31524:27;;31480:2;31608;31600:6;31597:14;31577:18;31574:38;31571:2;;;31627:18;;:::i;:::-;31571:2;31392:269;;;;:::o;31667:281::-;31750:27;31772:4;31750:27;:::i;:::-;31742:6;31738:40;31880:6;31868:10;31865:22;31844:18;31832:10;31829:34;31826:62;31823:2;;;31891:18;;:::i;:::-;31823:2;31931:10;31927:2;31920:22;31710:238;;;:::o;31954:233::-;31993:3;32016:24;32034:5;32016:24;:::i;:::-;32007:33;;32062:66;32055:5;32052:77;32049:2;;;32132:18;;:::i;:::-;32049:2;32179:1;32172:5;32168:13;32161:20;;31997:190;;;:::o;32193:180::-;32241:77;32238:1;32231:88;32338:4;32335:1;32328:15;32362:4;32359:1;32352:15;32379:180;32427:77;32424:1;32417:88;32524:4;32521:1;32514:15;32548:4;32545:1;32538:15;32565:180;32613:77;32610:1;32603:88;32710:4;32707:1;32700:15;32734:4;32731:1;32724:15;32751:180;32799:77;32796:1;32789:88;32896:4;32893:1;32886:15;32920:4;32917:1;32910:15;32937:180;32985:77;32982:1;32975:88;33082:4;33079:1;33072:15;33106:4;33103:1;33096:15;33123:117;33232:1;33229;33222:12;33246:117;33355:1;33352;33345:12;33369:117;33478:1;33475;33468:12;33492:117;33601:1;33598;33591:12;33615:102;33656:6;33707:2;33703:7;33698:2;33691:5;33687:14;33683:28;33673:38;;33663:54;;;:::o;33723:232::-;33863:34;33859:1;33851:6;33847:14;33840:58;33932:15;33927:2;33919:6;33915:15;33908:40;33829:126;:::o;33961:237::-;34101:34;34097:1;34089:6;34085:14;34078:58;34170:20;34165:2;34157:6;34153:15;34146:45;34067:131;:::o;34204:224::-;34344:34;34340:1;34332:6;34328:14;34321:58;34413:7;34408:2;34400:6;34396:15;34389:32;34310:118;:::o;34434:223::-;34574:34;34570:1;34562:6;34558:14;34551:58;34643:6;34638:2;34630:6;34626:15;34619:31;34540:117;:::o;34663:175::-;34803:27;34799:1;34791:6;34787:14;34780:51;34769:69;:::o;34844:228::-;34984:34;34980:1;34972:6;34968:14;34961:58;35053:11;35048:2;35040:6;35036:15;35029:36;34950:122;:::o;35078:174::-;35218:26;35214:1;35206:6;35202:14;35195:50;35184:68;:::o;35258:220::-;35398:34;35394:1;35386:6;35382:14;35375:58;35467:3;35462:2;35454:6;35450:15;35443:28;35364:114;:::o;35484:248::-;35624:34;35620:1;35612:6;35608:14;35601:58;35693:31;35688:2;35680:6;35676:15;35669:56;35590:142;:::o;35738:122::-;35811:24;35829:5;35811:24;:::i;:::-;35804:5;35801:35;35791:2;;35850:1;35847;35840:12;35791:2;35781:79;:::o;35866:116::-;35936:21;35951:5;35936:21;:::i;:::-;35929:5;35926:32;35916:2;;35972:1;35969;35962:12;35916:2;35906:76;:::o;35988:120::-;36060:23;36077:5;36060:23;:::i;:::-;36053:5;36050:34;36040:2;;36098:1;36095;36088:12;36040:2;36030:78;:::o;36114:122::-;36187:24;36205:5;36187:24;:::i;:::-;36180:5;36177:35;36167:2;;36226:1;36223;36216:12;36167:2;36157:79;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3415800","executionCost":"infinite","totalCost":"infinite"},"external":{"_dao_uris(uint256)":"infinite","_ideas_uris(uint256)":"infinite","all_goal_ideas_votes(uint256)":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"3012","create_dao(string,string)":"infinite","create_goal(string,uint256)":"infinite","create_goal_ideas_vote(uint256,uint256,string)":"infinite","create_ideas(string,uint256)":"infinite","dao_uri(uint256)":"infinite","getApproved(uint256)":"5323","get_all_daos()":"infinite","get_all_goals()":"infinite","get_all_goals_by_dao_id(uint256)":"infinite","get_all_ideas()":"infinite","get_all_ideas_by_goal_id(uint256)":"infinite","get_goal_id_by_goal_uri(string)":"infinite","get_goal_id_from_ideas_uri(string)":"infinite","get_ideas_id_by_ideas_uri(string)":"infinite","get_ideas_votes_from_goal(uint256,uint256)":"infinite","goal_uri(uint256)":"infinite","ideas_uri(uint256)":"infinite","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"3113","reset_all()":"28773","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","set_dao(uint256,string,string)":"infinite","set_goal(uint256,string)":"infinite","set_ideas(uint256,string)":"infinite","supportsInterface(bytes4)":"820","symbol()":"infinite","tokenURI(uint256)":"3489","transferFrom(address,address,uint256)":"infinite"}},"methodIdentifiers":{"_dao_uris(uint256)":"27a568b9","_ideas_uris(uint256)":"468d0c80","all_goal_ideas_votes(uint256)":"1ba44c4c","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","create_dao(string,string)":"c4c2e364","create_goal(string,uint256)":"71085cab","create_goal_ideas_vote(uint256,uint256,string)":"82fcc732","create_ideas(string,uint256)":"2d9cb1ab","dao_uri(uint256)":"5d907da1","getApproved(uint256)":"081812fc","get_all_daos()":"c04fe978","get_all_goals()":"29b56f60","get_all_goals_by_dao_id(uint256)":"109ac970","get_all_ideas()":"97ee7606","get_all_ideas_by_goal_id(uint256)":"131d44f2","get_goal_id_by_goal_uri(string)":"1e9ac9f5","get_goal_id_from_ideas_uri(string)":"aa4cdf2a","get_ideas_id_by_ideas_uri(string)":"a1ca9178","get_ideas_votes_from_goal(uint256,uint256)":"4be7adb5","goal_uri(uint256)":"e32acc1a","ideas_uri(uint256)":"8d3d2595","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","reset_all()":"b16060a6","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","set_dao(uint256,string,string)":"881de858","set_goal(uint256,string)":"c29595c5","set_ideas(uint256,string)":"c04e7430","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dao_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dao_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"finished\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ideas_uris\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ideas_uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_goal_ideas_votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"wallet\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_uri\",\"type\":\"string\"}],\"name\":\"create_dao\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"create_goal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_wallet\",\"type\":\"string\"}],\"name\":\"create_goal_ideas_vote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"create_ideas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"dao_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_daos\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_goals\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"get_all_goals_by_dao_id\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_ideas\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"get_all_ideas_by_goal_id\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"}],\"name\":\"get_goal_id_by_goal_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"get_goal_id_from_ideas_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"get_ideas_id_by_ideas_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"}],\"name\":\"get_ideas_votes_from_goal\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"goal_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"}],\"name\":\"ideas_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset_all\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_uri\",\"type\":\"string\"}],\"name\":\"set_dao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"}],\"name\":\"set_goal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"set_ideas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GreenDAO.sol\":\"GreenDAO\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/GreenDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./extensions/IONFT721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract GreenDAO is ERC721, IONFT721 {\\n   \\n    constructor(\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC721(_name, _symbol) {}\\n\\n      struct dao_uri_struct {\\n        string dao_wallet;\\n        string dao_uri;\\n        string finished;\\n    }\\n    struct goal_uri_struct {\\n        uint256 dao_id;\\n        string goal_uri;\\n    }\\n\\n    struct ideas_uri_struct {\\n        uint256 goal_id;\\n        string ideas_uri;\\n    }\\n\\n    struct goal_ideas_votes_struct {\\n        uint256 goal_id;\\n        uint256 ideas_id;\\n        string wallet;\\n    }\\n\\n    uint256 private _dao_ids;\\n    uint256 private _goal_ids;\\n    uint256 private _ideas_ids;\\n    uint256 private _ideas_vote_ids;\\n    mapping(uint256 => dao_uri_struct) public _dao_uris;                        //_dao_ids          => (Dao)    Dao Wallet + Dao URI   + Finished\\n    mapping(uint256 => goal_uri_struct) private _goal_uris;                     //_goal_ids         => (Goal)   Dao ID + Goal URI\\n    mapping(uint256 => ideas_uri_struct) public _ideas_uris;                    //_ideas_ids        => (Ideas)  Goal ID + Ideas URI\\n    mapping(uint256 => goal_ideas_votes_struct) public all_goal_ideas_votes;    //_ideas_vote_ids   => (Vote)   Goal ID + Ideas ID + Wallet\\n\\n    \\n\\n    //Daos\\n    function create_dao(string memory _dao_wallet, string memory _dao_uri)\\n        public\\n        returns (uint256)\\n    {\\n        //Create Dao into _dao_uris\\n        _dao_uris[_dao_ids] = dao_uri_struct(_dao_wallet, _dao_uri, \\\"False\\\");\\n        _dao_ids++;\\n\\n        return _dao_ids;\\n    }\\n\\n    function set_dao(\\n        uint256 _dao_id,\\n        string memory _dao_wallet,\\n        string memory _dao_uri\\n    ) public {\\n        //Set Dao of wallet and uri\\n        _dao_uris[_dao_id].dao_wallet = _dao_wallet;\\n        _dao_uris[_dao_id].dao_uri = _dao_uri;\\n    }\\n\\n    function get_all_daos() public view returns (string[] memory) {\\n        //Getting all doas\\n        string[] memory _StoreInfo = new string[](_dao_ids);\\n        for (uint256 i = 0; i < _dao_ids; i++) {\\n            _StoreInfo[i] = _dao_uris[i].dao_uri;\\n        }\\n\\n        return _StoreInfo;\\n    }\\n\\n\\n    function dao_uri(uint256 _dao_id) public view returns (string memory) {\\n        //Getting one dao URI\\n        return _dao_uris[_dao_id].dao_uri;\\n    }\\n\\n    //Goals\\n    function create_goal(string memory _goal_uri, uint256 _dao_id) public returns (uint256)\\n    {\\n        //Create goal into _goal_uris\\n        _goal_uris[_goal_ids] = goal_uri_struct(_dao_id, _goal_uri);\\n        _goal_ids++;\\n\\n        return _goal_ids;\\n    }\\n\\n    function set_goal(uint256 _goal_id, string memory _goal_uri) public {\\n        //Set goal uri\\n        _goal_uris[_goal_id].goal_uri = _goal_uri;\\n    }\\n\\n    function get_all_goals() public view returns (string[] memory) {\\n        //Getting all goals\\n        string[] memory _StoreInfo = new string[](_goal_ids);\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\n            _StoreInfo[i] = _goal_uris[i].goal_uri;\\n        }\\n\\n        return _StoreInfo;\\n    }\\n\\n    function get_all_goals_by_dao_id(uint256 _dao_id) public view returns (string[] memory) {\\n        //Getting all goals by dao id\\n        string[] memory _StoreInfo = new string[](_goal_ids);\\n        uint256 _store_id;\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\n          if (_goal_uris[i].dao_id == _dao_id){\\n            _StoreInfo[_store_id] = _goal_uris[i].goal_uri;\\n            _store_id++;\\n          }\\n        }\\n\\n        return _StoreInfo;\\n    }\\n\\n    \\n    function get_goal_id_by_goal_uri(string memory _goal_uri) public view returns (uint256) {\\n        //Getting goal id by uri\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\n          if (keccak256(bytes(_goal_uris[i].goal_uri)) == keccak256(bytes(_goal_uri))) return  i;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function goal_uri(uint256 _goal_id) public view returns (string memory) {\\n        //Getting one goal URI\\n        return _goal_uris[_goal_id].goal_uri;\\n    }\\n\\n\\n    //Ideas\\n    function create_ideas(string memory _ideas_uri, uint256 _goal_id) public returns (uint256)\\n    {\\n        //Create ideas into _ideas_uris\\n        _ideas_uris[_ideas_ids] = ideas_uri_struct(_goal_id, _ideas_uri);\\n        _ideas_ids++;\\n\\n        return _ideas_ids;\\n    }\\n\\n    function set_ideas(uint256 _ideas_id, string memory _ideas_uri) public {\\n        //Set ideas uri\\n        _ideas_uris[_ideas_id].ideas_uri = _ideas_uri;\\n    }\\n\\n    function get_all_ideas() public view returns (string[] memory) {\\n        //Getting all ideas\\n        string[] memory _StoreInfo = new string[](_ideas_ids);\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\n            _StoreInfo[i] = _ideas_uris[i].ideas_uri;\\n        }\\n\\n        return _StoreInfo;\\n    }\\n\\n    function get_all_ideas_by_goal_id(uint256 _goal_id) public view returns (string[] memory) {\\n        //Getting all ideas by goal id\\n        string[] memory _StoreInfo = new string[](_ideas_ids);        \\n        uint256 _store_id;\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\n          if (_ideas_uris[i].goal_id == _goal_id)\\n            _StoreInfo[_store_id] = _ideas_uris[i].ideas_uri;\\n            _store_id++;\\n        }\\n\\n        return _StoreInfo;\\n    }\\n\\n    \\n    function get_ideas_id_by_ideas_uri(string memory _ideas_uri) public view returns (uint256) {\\n        //Getting ideas id by uri\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\n          if (keccak256(bytes(_ideas_uris[i].ideas_uri)) == keccak256(bytes(_ideas_uri))) return  i;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function get_goal_id_from_ideas_uri(string memory _ideas_uri) public view returns (uint256) {\\n     //Getting ideas id by uri\\n     for (uint256 i = 0; i < _ideas_ids; i++) {\\n       if (keccak256(bytes(_ideas_uris[i].ideas_uri)) == keccak256(bytes(_ideas_uri))) return  _ideas_uris[i].goal_id;\\n     }\\n\\n     return 0;\\n    }\\n\\n\\n    function ideas_uri(uint256 _ideas_id) public view returns (string memory) {\\n        //Getting one ideas URI\\n        return _ideas_uris[_ideas_id].ideas_uri;\\n    }\\n\\n\\n    //Votes\\n    function create_goal_ideas_vote(uint256 _goal_id, uint256 _ideas_id,string memory _wallet) public returns (uint256)\\n    {\\n        //Create votes into all_goal_ideas_votes\\n        all_goal_ideas_votes[_ideas_vote_ids] = goal_ideas_votes_struct(_goal_id, _ideas_id,_wallet);\\n        _ideas_vote_ids++;\\n\\n        return _ideas_vote_ids;\\n    }\\n\\n\\n   function get_ideas_votes_from_goal(uint256 _goal_id, uint256 _ideas_id) public view returns (string[] memory)\\n    {\\n        //gets all ideas votes from goal\\n        string[] memory _StoreInfo = new string[](_ideas_vote_ids);\\n        uint256 _store_id;\\n        for (uint256 i = 0; i < _ideas_vote_ids; i++) {\\n          if (all_goal_ideas_votes[i].goal_id == _goal_id && all_goal_ideas_votes[i].ideas_id == _ideas_id )\\n            _StoreInfo[_store_id] = all_goal_ideas_votes[i].wallet;\\n            _store_id++;\\n        }\\n        return _StoreInfo;\\n    }\\n\\n    function reset_all() public {\\n      _dao_ids = 0;\\n      _goal_ids = 0;\\n      _ideas_ids = 0;\\n      _ideas_vote_ids = 0;\\n      for (uint256 i = 0; i < _dao_ids; i++)            delete _dao_uris[i];\\n      for (uint256 i = 0; i < _goal_ids; i++)           delete _goal_uris[i];\\n      for (uint256 i = 0; i < _ideas_ids; i++)          delete _ideas_uris[i];\\n      for (uint256 i = 0; i < _ideas_vote_ids; i++)     delete all_goal_ideas_votes[i];    \\n\\n    }\\n\\n}\\n\",\"keccak256\":\"0xbf83714d5fcb98343ee00f1045bb44a328a075c38ad0816fe2018a97349e9743\",\"license\":\"MIT\"},\"contracts/extensions/IONFT721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./IONFT721Core.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ONFT standard\\r\\n */\\r\\ninterface IONFT721 is  IERC721 {\\r\\n\\r\\n}\",\"keccak256\":\"0x2c1f30d929b11b655c27689e626e5bae376a0d57759467c9ff9ed9811b84cfa6\",\"license\":\"MIT\"},\"contracts/extensions/IONFT721Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ONFT Core standard\\r\\n */\\r\\ninterface IONFT721Core is IERC165 {\\r\\n    /**\\r\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\r\\n     * _dstChainId - L0 defined chain id to send tokens too\\r\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\r\\n     * _tokenId - token Id to transfer\\r\\n     * _useZro - indicates to use zro to pay L0 fees\\r\\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\\r\\n     */\\r\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n    /**\\r\\n     * @dev send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from`\\r\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\r\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\r\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\r\\n     */\\r\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\r\\n     * `_nonce` is the outbound nonce from\\r\\n     */\\r\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes indexed _toAddress, uint _tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce.\\r\\n     */\\r\\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _tokenId);\\r\\n}\",\"keccak256\":\"0x1d2a925823f56ce4715702a7c01473bd17eb97d7ea1922b74c36e2631c20daac\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":140,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":144,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":148,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":152,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":158,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":2693,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"_dao_ids","offset":0,"slot":"6","type":"t_uint256"},{"astId":2695,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"_goal_ids","offset":0,"slot":"7","type":"t_uint256"},{"astId":2697,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"_ideas_ids","offset":0,"slot":"8","type":"t_uint256"},{"astId":2699,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"_ideas_vote_ids","offset":0,"slot":"9","type":"t_uint256"},{"astId":2704,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"_dao_uris","offset":0,"slot":"10","type":"t_mapping(t_uint256,t_struct(dao_uri_struct)2674_storage)"},{"astId":2709,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"_goal_uris","offset":0,"slot":"11","type":"t_mapping(t_uint256,t_struct(goal_uri_struct)2679_storage)"},{"astId":2714,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"_ideas_uris","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_struct(ideas_uri_struct)2684_storage)"},{"astId":2719,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"all_goal_ideas_votes","offset":0,"slot":"13","type":"t_mapping(t_uint256,t_struct(goal_ideas_votes_struct)2691_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_struct(dao_uri_struct)2674_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct GreenDAO.dao_uri_struct)","numberOfBytes":"32","value":"t_struct(dao_uri_struct)2674_storage"},"t_mapping(t_uint256,t_struct(goal_ideas_votes_struct)2691_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct GreenDAO.goal_ideas_votes_struct)","numberOfBytes":"32","value":"t_struct(goal_ideas_votes_struct)2691_storage"},"t_mapping(t_uint256,t_struct(goal_uri_struct)2679_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct GreenDAO.goal_uri_struct)","numberOfBytes":"32","value":"t_struct(goal_uri_struct)2679_storage"},"t_mapping(t_uint256,t_struct(ideas_uri_struct)2684_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct GreenDAO.ideas_uri_struct)","numberOfBytes":"32","value":"t_struct(ideas_uri_struct)2684_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(dao_uri_struct)2674_storage":{"encoding":"inplace","label":"struct GreenDAO.dao_uri_struct","members":[{"astId":2669,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"dao_wallet","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2671,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"dao_uri","offset":0,"slot":"1","type":"t_string_storage"},{"astId":2673,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"finished","offset":0,"slot":"2","type":"t_string_storage"}],"numberOfBytes":"96"},"t_struct(goal_ideas_votes_struct)2691_storage":{"encoding":"inplace","label":"struct GreenDAO.goal_ideas_votes_struct","members":[{"astId":2686,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"goal_id","offset":0,"slot":"0","type":"t_uint256"},{"astId":2688,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"ideas_id","offset":0,"slot":"1","type":"t_uint256"},{"astId":2690,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"wallet","offset":0,"slot":"2","type":"t_string_storage"}],"numberOfBytes":"96"},"t_struct(goal_uri_struct)2679_storage":{"encoding":"inplace","label":"struct GreenDAO.goal_uri_struct","members":[{"astId":2676,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"dao_id","offset":0,"slot":"0","type":"t_uint256"},{"astId":2678,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"goal_uri","offset":0,"slot":"1","type":"t_string_storage"}],"numberOfBytes":"64"},"t_struct(ideas_uri_struct)2684_storage":{"encoding":"inplace","label":"struct GreenDAO.ideas_uri_struct","members":[{"astId":2681,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"goal_id","offset":0,"slot":"0","type":"t_uint256"},{"astId":2683,"contract":"contracts/GreenDAO.sol:GreenDAO","label":"ideas_uri","offset":0,"slot":"1","type":"t_string_storage"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/extensions/ILayerZeroEndpoint.sol":{"ILayerZeroEndpoint":{"abi":[{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"address","name":"_userApplication","type":"address"},{"internalType":"bytes","name":"_payload","type":"bytes"},{"internalType":"bool","name":"_payInZRO","type":"bool"},{"internalType":"bytes","name":"_adapterParam","type":"bytes"}],"name":"estimateFees","outputs":[{"internalType":"uint256","name":"nativeFee","type":"uint256"},{"internalType":"uint256","name":"zroFee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"forceResumeReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getChainId","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"address","name":"_userApplication","type":"address"},{"internalType":"uint256","name":"_configType","type":"uint256"}],"name":"getConfig","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"getInboundNonce","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"address","name":"_srcAddress","type":"address"}],"name":"getOutboundNonce","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userApplication","type":"address"}],"name":"getReceiveLibraryAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userApplication","type":"address"}],"name":"getReceiveVersion","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userApplication","type":"address"}],"name":"getSendLibraryAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userApplication","type":"address"}],"name":"getSendVersion","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"hasStoredPayload","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isReceivingPayload","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isSendingPayload","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"address","name":"_dstAddress","type":"address"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"uint256","name":"_gasLimit","type":"uint256"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"receivePayload","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"retryPayload","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"bytes","name":"_destination","type":"bytes"},{"internalType":"bytes","name":"_payload","type":"bytes"},{"internalType":"address payable","name":"_refundAddress","type":"address"},{"internalType":"address","name":"_zroPaymentAddress","type":"address"},{"internalType":"bytes","name":"_adapterParams","type":"bytes"}],"name":"send","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"uint256","name":"_configType","type":"uint256"},{"internalType":"bytes","name":"_config","type":"bytes"}],"name":"setConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setReceiveVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setSendVersion","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"estimateFees(uint16,address,bytes,bool,bytes)":"40a7bb10","forceResumeReceive(uint16,bytes)":"42d65a8d","getChainId()":"3408e470","getConfig(uint16,uint16,address,uint256)":"f5ecbdbc","getInboundNonce(uint16,bytes)":"fdc07c70","getOutboundNonce(uint16,address)":"7a145748","getReceiveLibraryAddress(address)":"71ba2fd6","getReceiveVersion(address)":"da1a7c9a","getSendLibraryAddress(address)":"9c729da1","getSendVersion(address)":"096568f6","hasStoredPayload(uint16,bytes)":"0eaf6ea6","isReceivingPayload()":"ca066b35","isSendingPayload()":"e97a448a","receivePayload(uint16,bytes,address,uint64,uint256,bytes)":"c2fa4813","retryPayload(uint16,bytes,bytes)":"aaff5f16","send(uint16,bytes,bytes,address,address,bytes)":"c5803100","setConfig(uint16,uint16,uint256,bytes)":"cbed8b9c","setReceiveVersion(uint16)":"10ddb137","setSendVersion(uint16)":"07e0db17"}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInZRO\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParam\",\"type\":\"bytes\"}],\"name\":\"estimateFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"getInboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_srcAddress\",\"type\":\"address\"}],\"name\":\"getOutboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"}],\"name\":\"getReceiveLibraryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"}],\"name\":\"getReceiveVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"}],\"name\":\"getSendLibraryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"}],\"name\":\"getSendVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"hasStoredPayload\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReceivingPayload\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSendingPayload\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"receivePayload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryPayload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_destination\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extensions/ILayerZeroEndpoint.sol\":\"ILayerZeroEndpoint\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/extensions/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\r\\n\\r\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\r\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\r\\n    // @param _payload - a custom bytes payload to send to the destination contract\\r\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\r\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\r\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\r\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\r\\n\\r\\n    // @notice used by the messaging library to publish verified payload\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\r\\n    // @param _dstAddress - the address on destination chain\\r\\n    // @param _nonce - the unbound message ordering nonce\\r\\n    // @param _gasLimit - the gas limit for external contract execution\\r\\n    // @param _payload - verified payload to send to the destination contract\\r\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    // @param _payload - the custom message to send over LayerZero\\r\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\r\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\r\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n    // @notice get this Endpoint's immutable source identifier\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    // @notice the interface to retry failed message on this Endpoint destination\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    // @param _payload - the payload to be retried\\r\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for send() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isSendingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for receive() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isReceivingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\r\\n\\r\\n    // @notice get the send() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\r\\n\\r\\n    // @notice get the lzReceive() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\r\\n}\",\"keccak256\":\"0x8db7119c5ebd5ad0c3a029e512b970d17659639aea3c52974380b707ebdfefd0\",\"license\":\"MIT\"},\"contracts/extensions/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroUserApplicationConfig {\\r\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\r\\n\\r\\n    // @notice set the send() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setSendVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setReceiveVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\r\\n    // @param _srcChainId - the chainId of the source chain\\r\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\r\\n}\",\"keccak256\":\"0x8462616325f7d42a87a9c3e908ac9f6990a96bcf37ba61a524a67519396707be\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/extensions/ILayerZeroReceiver.sol":{"ILayerZeroReceiver":{"abi":[{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"lzReceive","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"lzReceive(uint16,bytes,uint64,bytes)":"001d3567"}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extensions/ILayerZeroReceiver.sol\":\"ILayerZeroReceiver\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/extensions/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroReceiver {\\r\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\r\\n    // @param _srcChainId - the source endpoint identifier\\r\\n    // @param _srcAddress - the source sending contract address from the source chain\\r\\n    // @param _nonce - the ordered message nonce\\r\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\r\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\r\\n}\",\"keccak256\":\"0x145419340a1e545764ab2ff743c92cac8a3650e2b7a2672fdc6dd400559563d5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/extensions/ILayerZeroUserApplicationConfig.sol":{"ILayerZeroUserApplicationConfig":{"abi":[{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"forceResumeReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"uint256","name":"_configType","type":"uint256"},{"internalType":"bytes","name":"_config","type":"bytes"}],"name":"setConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setReceiveVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setSendVersion","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forceResumeReceive(uint16,bytes)":"42d65a8d","setConfig(uint16,uint16,uint256,bytes)":"cbed8b9c","setReceiveVersion(uint16)":"10ddb137","setSendVersion(uint16)":"07e0db17"}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extensions/ILayerZeroUserApplicationConfig.sol\":\"ILayerZeroUserApplicationConfig\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/extensions/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroUserApplicationConfig {\\r\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\r\\n\\r\\n    // @notice set the send() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setSendVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setReceiveVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\r\\n    // @param _srcChainId - the chainId of the source chain\\r\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\r\\n}\",\"keccak256\":\"0x8462616325f7d42a87a9c3e908ac9f6990a96bcf37ba61a524a67519396707be\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/extensions/IONFT721.sol":{"IONFT721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ONFT standard","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ONFT standard\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extensions/IONFT721.sol\":\"IONFT721\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/extensions/IONFT721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./IONFT721Core.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ONFT standard\\r\\n */\\r\\ninterface IONFT721 is  IERC721 {\\r\\n\\r\\n}\",\"keccak256\":\"0x2c1f30d929b11b655c27689e626e5bae376a0d57759467c9ff9ed9811b84cfa6\",\"license\":\"MIT\"},\"contracts/extensions/IONFT721Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ONFT Core standard\\r\\n */\\r\\ninterface IONFT721Core is IERC165 {\\r\\n    /**\\r\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\r\\n     * _dstChainId - L0 defined chain id to send tokens too\\r\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\r\\n     * _tokenId - token Id to transfer\\r\\n     * _useZro - indicates to use zro to pay L0 fees\\r\\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\\r\\n     */\\r\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n    /**\\r\\n     * @dev send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from`\\r\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\r\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\r\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\r\\n     */\\r\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\r\\n     * `_nonce` is the outbound nonce from\\r\\n     */\\r\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes indexed _toAddress, uint _tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce.\\r\\n     */\\r\\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _tokenId);\\r\\n}\",\"keccak256\":\"0x1d2a925823f56ce4715702a7c01473bd17eb97d7ea1922b74c36e2631c20daac\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/extensions/IONFT721Core.sol":{"IONFT721Core":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"indexed":true,"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"indexed":true,"internalType":"address","name":"_toAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"ReceiveFromChain","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"bytes","name":"_toAddress","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"SendToChain","type":"event"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"bytes","name":"_toAddress","type":"bytes"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"bool","name":"_useZro","type":"bool"},{"internalType":"bytes","name":"_adapterParams","type":"bytes"}],"name":"estimateSendFee","outputs":[{"internalType":"uint256","name":"nativeFee","type":"uint256"},{"internalType":"uint256","name":"zroFee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"bytes","name":"_toAddress","type":"bytes"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"address payable","name":"_refundAddress","type":"address"},{"internalType":"address","name":"_zroPaymentAddress","type":"address"},{"internalType":"bytes","name":"_adapterParams","type":"bytes"}],"name":"sendFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ONFT Core standard","events":{"ReceiveFromChain(uint16,bytes,address,uint256)":{"details":"Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce."},"SendToChain(uint16,address,bytes,uint256)":{"details":"Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`) `_nonce` is the outbound nonce from"}},"kind":"dev","methods":{"estimateSendFee(uint16,bytes,uint256,bool,bytes)":{"details":"estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _tokenId - token Id to transfer _useZro - indicates to use zro to pay L0 fees _adapterParams - flexible bytes array to indicate messaging adapter services in L0"},"sendFrom(address,uint16,bytes,uint256,address,address,bytes)":{"details":"send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from` `_toAddress` can be any size depending on the `dstChainId`. `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services"},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"estimateSendFee(uint16,bytes,uint256,bool,bytes)":"2a205e3d","sendFrom(address,uint16,bytes,uint256,address,address,bytes)":"51905636","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ReceiveFromChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"SendToChain\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateSendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"sendFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ONFT Core standard\",\"events\":{\"ReceiveFromChain(uint16,bytes,address,uint256)\":{\"details\":\"Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce.\"},\"SendToChain(uint16,address,bytes,uint256)\":{\"details\":\"Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`) `_nonce` is the outbound nonce from\"}},\"kind\":\"dev\",\"methods\":{\"estimateSendFee(uint16,bytes,uint256,bool,bytes)\":{\"details\":\"estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _tokenId - token Id to transfer _useZro - indicates to use zro to pay L0 fees _adapterParams - flexible bytes array to indicate messaging adapter services in L0\"},\"sendFrom(address,uint16,bytes,uint256,address,address,bytes)\":{\"details\":\"send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from` `_toAddress` can be any size depending on the `dstChainId`. `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extensions/IONFT721Core.sol\":\"IONFT721Core\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/extensions/IONFT721Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ONFT Core standard\\r\\n */\\r\\ninterface IONFT721Core is IERC165 {\\r\\n    /**\\r\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\r\\n     * _dstChainId - L0 defined chain id to send tokens too\\r\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\r\\n     * _tokenId - token Id to transfer\\r\\n     * _useZro - indicates to use zro to pay L0 fees\\r\\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\\r\\n     */\\r\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n    /**\\r\\n     * @dev send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from`\\r\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\r\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\r\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\r\\n     */\\r\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\r\\n     * `_nonce` is the outbound nonce from\\r\\n     */\\r\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes indexed _toAddress, uint _tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce.\\r\\n     */\\r\\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _tokenId);\\r\\n}\",\"keccak256\":\"0x1d2a925823f56ce4715702a7c01473bd17eb97d7ea1922b74c36e2631c20daac\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/extensions/LzApp.sol":{"LzApp":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"_type","type":"uint16"},{"indexed":false,"internalType":"uint256","name":"_minDstGas","type":"uint256"}],"name":"SetMinDstGas","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"precrime","type":"address"}],"name":"SetPrecrime","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_path","type":"bytes"}],"name":"SetTrustedRemote","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_remoteAddress","type":"bytes"}],"name":"SetTrustedRemoteAddress","type":"event"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"forceResumeReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"_configType","type":"uint256"}],"name":"getConfig","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_remoteChainId","type":"uint16"}],"name":"getTrustedRemoteAddress","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"isTrustedRemote","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lzEndpoint","outputs":[{"internalType":"contract ILayerZeroEndpoint","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"lzReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint16","name":"","type":"uint16"}],"name":"minDstGasLookup","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"precrime","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"uint256","name":"_configType","type":"uint256"},{"internalType":"bytes","name":"_config","type":"bytes"}],"name":"setConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"uint16","name":"_packetType","type":"uint16"},{"internalType":"uint256","name":"_minGas","type":"uint256"}],"name":"setMinDstGas","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_precrime","type":"address"}],"name":"setPrecrime","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setReceiveVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setSendVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_path","type":"bytes"}],"name":"setTrustedRemote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"internalType":"bytes","name":"_remoteAddress","type":"bytes"}],"name":"setTrustedRemoteAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"}],"name":"trustedRemoteLookup","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forceResumeReceive(uint16,bytes)":"42d65a8d","getConfig(uint16,uint16,address,uint256)":"f5ecbdbc","getTrustedRemoteAddress(uint16)":"9f38369a","isTrustedRemote(uint16,bytes)":"3d8b38f6","lzEndpoint()":"b353aaa7","lzReceive(uint16,bytes,uint64,bytes)":"001d3567","minDstGasLookup(uint16,uint16)":"8cfd8f5c","owner()":"8da5cb5b","precrime()":"950c8a74","renounceOwnership()":"715018a6","setConfig(uint16,uint16,uint256,bytes)":"cbed8b9c","setMinDstGas(uint16,uint16,uint256)":"df2a5b3b","setPrecrime(address)":"baf3292d","setReceiveVersion(uint16)":"10ddb137","setSendVersion(uint16)":"07e0db17","setTrustedRemote(uint16,bytes)":"eb8d72b7","setTrustedRemoteAddress(uint16,bytes)":"a6c3d165","transferOwnership(address)":"f2fde38b","trustedRemoteLookup(uint16)":"7533d788"}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemoteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extensions/LzApp.sol\":\"LzApp\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/extensions/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\r\\n\\r\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\r\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\r\\n    // @param _payload - a custom bytes payload to send to the destination contract\\r\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\r\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\r\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\r\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\r\\n\\r\\n    // @notice used by the messaging library to publish verified payload\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\r\\n    // @param _dstAddress - the address on destination chain\\r\\n    // @param _nonce - the unbound message ordering nonce\\r\\n    // @param _gasLimit - the gas limit for external contract execution\\r\\n    // @param _payload - verified payload to send to the destination contract\\r\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    // @param _payload - the custom message to send over LayerZero\\r\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\r\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\r\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n    // @notice get this Endpoint's immutable source identifier\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    // @notice the interface to retry failed message on this Endpoint destination\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    // @param _payload - the payload to be retried\\r\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for send() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isSendingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for receive() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isReceivingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\r\\n\\r\\n    // @notice get the send() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\r\\n\\r\\n    // @notice get the lzReceive() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\r\\n}\",\"keccak256\":\"0x8db7119c5ebd5ad0c3a029e512b970d17659639aea3c52974380b707ebdfefd0\",\"license\":\"MIT\"},\"contracts/extensions/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroReceiver {\\r\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\r\\n    // @param _srcChainId - the source endpoint identifier\\r\\n    // @param _srcAddress - the source sending contract address from the source chain\\r\\n    // @param _nonce - the ordered message nonce\\r\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\r\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\r\\n}\",\"keccak256\":\"0x145419340a1e545764ab2ff743c92cac8a3650e2b7a2672fdc6dd400559563d5\",\"license\":\"MIT\"},\"contracts/extensions/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroUserApplicationConfig {\\r\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\r\\n\\r\\n    // @notice set the send() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setSendVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setReceiveVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\r\\n    // @param _srcChainId - the chainId of the source chain\\r\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\r\\n}\",\"keccak256\":\"0x8462616325f7d42a87a9c3e908ac9f6990a96bcf37ba61a524a67519396707be\",\"license\":\"MIT\"},\"contracts/extensions/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./ILayerZeroReceiver.sol\\\";\\r\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\r\\nimport \\\"./ILayerZeroEndpoint.sol\\\";\\r\\nimport \\\"./util/BytesLib.sol\\\";\\r\\n\\r\\n/*\\r\\n * a generic LzReceiver implementation\\r\\n */\\r\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\r\\n    using BytesLib for bytes;\\r\\n\\r\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\r\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\r\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\r\\n    address public precrime;\\r\\n\\r\\n    event SetPrecrime(address precrime);\\r\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\r\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\r\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\r\\n\\r\\n    constructor(address _endpoint) {\\r\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\r\\n    }\\r\\n\\r\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\r\\n        // lzReceive must be called by the endpoint for security\\r\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\r\\n\\r\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\r\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\r\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\r\\n\\r\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n\\r\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\r\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\r\\n\\r\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\r\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\r\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\r\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\r\\n    }\\r\\n\\r\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\r\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\r\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\r\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\r\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\r\\n    }\\r\\n\\r\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\r\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\r\\n        assembly {\\r\\n            gasLimit := mload(add(_adapterParams, 34))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //---------------------------UserApplication config----------------------------------------\\r\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\r\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\r\\n    }\\r\\n\\r\\n    // generic config for LayerZero user Application\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\r\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\r\\n    }\\r\\n\\r\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\r\\n        lzEndpoint.setSendVersion(_version);\\r\\n    }\\r\\n\\r\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\r\\n        lzEndpoint.setReceiveVersion(_version);\\r\\n    }\\r\\n\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\r\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\r\\n    }\\r\\n\\r\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\r\\n    // this function set the trusted path for the cross-chain communication\\r\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\\r\\n        trustedRemoteLookup[_srcChainId] = _path;\\r\\n        emit SetTrustedRemote(_srcChainId, _path);\\r\\n    }\\r\\n\\r\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\r\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\r\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\r\\n    }\\r\\n\\r\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\r\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\r\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\r\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\r\\n    }\\r\\n\\r\\n    function setPrecrime(address _precrime) external onlyOwner {\\r\\n        precrime = _precrime;\\r\\n        emit SetPrecrime(_precrime);\\r\\n    }\\r\\n\\r\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\r\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\r\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\r\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\r\\n    }\\r\\n\\r\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\r\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\r\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\r\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x098ca5ec5caa0a3ad171c63ba5941ec882c3b37929ba20e3a2b8ad91100cd6a3\",\"license\":\"MIT\"},\"contracts/extensions/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\n/*\\r\\n * @title Solidity Bytes Arrays Utils\\r\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\r\\n *\\r\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\r\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\r\\n */\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n\\r\\nlibrary BytesLib {\\r\\n    function concat(\\r\\n        bytes memory _preBytes,\\r\\n        bytes memory _postBytes\\r\\n    )\\r\\n    internal\\r\\n    pure\\r\\n    returns (bytes memory)\\r\\n    {\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n        // Get a location of some free memory and store it in tempBytes as\\r\\n        // Solidity does for memory variables.\\r\\n            tempBytes := mload(0x40)\\r\\n\\r\\n        // Store the length of the first bytes array at the beginning of\\r\\n        // the memory for tempBytes.\\r\\n            let length := mload(_preBytes)\\r\\n            mstore(tempBytes, length)\\r\\n\\r\\n        // Maintain a memory counter for the current write location in the\\r\\n        // temp bytes array by adding the 32 bytes for the array length to\\r\\n        // the starting location.\\r\\n            let mc := add(tempBytes, 0x20)\\r\\n        // Stop copying when the memory counter reaches the length of the\\r\\n        // first bytes array.\\r\\n            let end := add(mc, length)\\r\\n\\r\\n            for {\\r\\n            // Initialize a copy counter to the start of the _preBytes data,\\r\\n            // 32 bytes into its memory.\\r\\n                let cc := add(_preBytes, 0x20)\\r\\n            } lt(mc, end) {\\r\\n            // Increase both counters by 32 bytes each iteration.\\r\\n                mc := add(mc, 0x20)\\r\\n                cc := add(cc, 0x20)\\r\\n            } {\\r\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\r\\n            // at a time.\\r\\n                mstore(mc, mload(cc))\\r\\n            }\\r\\n\\r\\n        // Add the length of _postBytes to the current length of tempBytes\\r\\n        // and store it as the new length in the first 32 bytes of the\\r\\n        // tempBytes memory.\\r\\n            length := mload(_postBytes)\\r\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\r\\n\\r\\n        // Move the memory counter back from a multiple of 0x20 to the\\r\\n        // actual end of the _preBytes data.\\r\\n            mc := end\\r\\n        // Stop copying when the memory counter reaches the new combined\\r\\n        // length of the arrays.\\r\\n            end := add(mc, length)\\r\\n\\r\\n            for {\\r\\n                let cc := add(_postBytes, 0x20)\\r\\n            } lt(mc, end) {\\r\\n                mc := add(mc, 0x20)\\r\\n                cc := add(cc, 0x20)\\r\\n            } {\\r\\n                mstore(mc, mload(cc))\\r\\n            }\\r\\n\\r\\n        // Update the free-memory pointer by padding our last write location\\r\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\r\\n        // next 32 byte block, then round down to the nearest multiple of\\r\\n        // 32. If the sum of the length of the two arrays is zero then add\\r\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\r\\n            mstore(0x40, and(\\r\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\r\\n            not(31) // Round down to the nearest 32 bytes.\\r\\n            ))\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\r\\n        assembly {\\r\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\r\\n        // of the array. (We don't need to use the offset into the slot\\r\\n        // because arrays use the entire slot.)\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n        // Arrays of 31 bytes or less have an even value in their slot,\\r\\n        // while longer arrays have an odd value. The actual length is\\r\\n        // the slot divided by two for odd values, and the lowest order\\r\\n        // byte divided by two for even values.\\r\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\r\\n        // two to get the length. If the slot is odd, bitwise and the slot\\r\\n        // with -1 and divide by two.\\r\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\r\\n            let mlength := mload(_postBytes)\\r\\n            let newlength := add(slength, mlength)\\r\\n        // slength can contain both the length and contents of the array\\r\\n        // if length < 32 bytes so let's prepare for that\\r\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n            switch add(lt(slength, 32), lt(newlength, 32))\\r\\n            case 2 {\\r\\n            // Since the new array still fits in the slot, we just need to\\r\\n            // update the contents of the slot.\\r\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\r\\n                sstore(\\r\\n                _preBytes.slot,\\r\\n                // all the modifications to the slot are inside this\\r\\n                // next block\\r\\n                add(\\r\\n                // we can just add to the slot contents because the\\r\\n                // bytes we want to change are the LSBs\\r\\n                fslot,\\r\\n                add(\\r\\n                mul(\\r\\n                div(\\r\\n                // load the bytes from memory\\r\\n                mload(add(_postBytes, 0x20)),\\r\\n                // zero all bytes to the right\\r\\n                exp(0x100, sub(32, mlength))\\r\\n                ),\\r\\n                // and now shift left the number of bytes to\\r\\n                // leave space for the length in the slot\\r\\n                exp(0x100, sub(32, newlength))\\r\\n                ),\\r\\n                // increase length by the double of the memory\\r\\n                // bytes length\\r\\n                mul(mlength, 2)\\r\\n                )\\r\\n                )\\r\\n                )\\r\\n            }\\r\\n            case 1 {\\r\\n            // The stored value fits in the slot, but the combined value\\r\\n            // will exceed it.\\r\\n            // get the keccak hash to get the contents of the array\\r\\n                mstore(0x0, _preBytes.slot)\\r\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n            // save new length\\r\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n            // The contents of the _postBytes array start 32 bytes into\\r\\n            // the structure. Our first read should obtain the `submod`\\r\\n            // bytes that can fit into the unused space in the last word\\r\\n            // of the stored array. To get this, we read 32 bytes starting\\r\\n            // from `submod`, so the data we read overlaps with the array\\r\\n            // contents by `submod` bytes. Masking the lowest-order\\r\\n            // `submod` bytes allows us to add that value directly to the\\r\\n            // stored value.\\r\\n\\r\\n                let submod := sub(32, slength)\\r\\n                let mc := add(_postBytes, submod)\\r\\n                let end := add(_postBytes, mlength)\\r\\n                let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n                sstore(\\r\\n                sc,\\r\\n                add(\\r\\n                and(\\r\\n                fslot,\\r\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\r\\n                ),\\r\\n                and(mload(mc), mask)\\r\\n                )\\r\\n                )\\r\\n\\r\\n                for {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    sc := add(sc, 1)\\r\\n                } lt(mc, end) {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } {\\r\\n                    sstore(sc, mload(mc))\\r\\n                }\\r\\n\\r\\n                mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n            }\\r\\n            default {\\r\\n            // get the keccak hash to get the contents of the array\\r\\n                mstore(0x0, _preBytes.slot)\\r\\n            // Start copying to the last used word of the stored array.\\r\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n            // save new length\\r\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n            // Copy over the first `submod` bytes of the new data as in\\r\\n            // case 1 above.\\r\\n                let slengthmod := mod(slength, 32)\\r\\n                let mlengthmod := mod(mlength, 32)\\r\\n                let submod := sub(32, slengthmod)\\r\\n                let mc := add(_postBytes, submod)\\r\\n                let end := add(_postBytes, mlength)\\r\\n                let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\r\\n\\r\\n                for {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } lt(mc, end) {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } {\\r\\n                    sstore(sc, mload(mc))\\r\\n                }\\r\\n\\r\\n                mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function slice(\\r\\n        bytes memory _bytes,\\r\\n        uint256 _start,\\r\\n        uint256 _length\\r\\n    )\\r\\n    internal\\r\\n    pure\\r\\n    returns (bytes memory)\\r\\n    {\\r\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\r\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\r\\n\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n            switch iszero(_length)\\r\\n            case 0 {\\r\\n            // Get a location of some free memory and store it in tempBytes as\\r\\n            // Solidity does for memory variables.\\r\\n                tempBytes := mload(0x40)\\r\\n\\r\\n            // The first word of the slice result is potentially a partial\\r\\n            // word read from the original array. To read it, we calculate\\r\\n            // the length of that partial word and start copying that many\\r\\n            // bytes into the array. The first word we copy will start with\\r\\n            // data we don't care about, but the last `lengthmod` bytes will\\r\\n            // land at the beginning of the contents of the new array. When\\r\\n            // we're done copying, we overwrite the full first word with\\r\\n            // the actual length of the slice.\\r\\n                let lengthmod := and(_length, 31)\\r\\n\\r\\n            // The multiplication in the next line is necessary\\r\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\r\\n            // the following copy loop was copying the origin's length\\r\\n            // and then ending prematurely not copying everything it should.\\r\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\r\\n                let end := add(mc, _length)\\r\\n\\r\\n                for {\\r\\n                // The multiplication in the next line has the same exact purpose\\r\\n                // as the one above.\\r\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\r\\n                } lt(mc, end) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                    mstore(mc, mload(cc))\\r\\n                }\\r\\n\\r\\n                mstore(tempBytes, _length)\\r\\n\\r\\n            //update free-memory pointer\\r\\n            //allocating the array padded to 32 bytes like the compiler does now\\r\\n                mstore(0x40, and(add(mc, 31), not(31)))\\r\\n            }\\r\\n            //if we want a zero-length slice let's just return a zero-length array\\r\\n            default {\\r\\n                tempBytes := mload(0x40)\\r\\n            //zero out the 32 bytes slice we are about to return\\r\\n            //we need to do it because Solidity does not garbage collect\\r\\n                mstore(tempBytes, 0)\\r\\n\\r\\n                mstore(0x40, add(tempBytes, 0x20))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\r\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\r\\n        address tempAddress;\\r\\n\\r\\n        assembly {\\r\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\r\\n        }\\r\\n\\r\\n        return tempAddress;\\r\\n    }\\r\\n\\r\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\r\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\r\\n        uint8 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\r\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\r\\n        uint16 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\r\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\r\\n        uint32 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\r\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\r\\n        uint64 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\r\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\r\\n        uint96 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\r\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\r\\n        uint128 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\r\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\r\\n        uint256 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\r\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\r\\n        bytes32 tempBytes32;\\r\\n\\r\\n        assembly {\\r\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\r\\n        }\\r\\n\\r\\n        return tempBytes32;\\r\\n    }\\r\\n\\r\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n            let length := mload(_preBytes)\\r\\n\\r\\n        // if lengths don't match the arrays are not equal\\r\\n            switch eq(length, mload(_postBytes))\\r\\n            case 1 {\\r\\n            // cb is a circuit breaker in the for loop since there's\\r\\n            //  no said feature for inline assembly loops\\r\\n            // cb = 1 - don't breaker\\r\\n            // cb = 0 - break\\r\\n                let cb := 1\\r\\n\\r\\n                let mc := add(_preBytes, 0x20)\\r\\n                let end := add(mc, length)\\r\\n\\r\\n                for {\\r\\n                    let cc := add(_postBytes, 0x20)\\r\\n                // the next line is the loop condition:\\r\\n                // while(uint256(mc < end) + cb == 2)\\r\\n                } eq(add(lt(mc, end), cb), 2) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                // if any of these checks fails then arrays are not equal\\r\\n                    if iszero(eq(mload(mc), mload(cc))) {\\r\\n                    // unsuccess:\\r\\n                        success := 0\\r\\n                        cb := 0\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n            // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    function equalStorage(\\r\\n        bytes storage _preBytes,\\r\\n        bytes memory _postBytes\\r\\n    )\\r\\n    internal\\r\\n    view\\r\\n    returns (bool)\\r\\n    {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n        // we know _preBytes_offset is 0\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n        // Decode the length of the stored array like in concatStorage().\\r\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\r\\n            let mlength := mload(_postBytes)\\r\\n\\r\\n        // if lengths don't match the arrays are not equal\\r\\n            switch eq(slength, mlength)\\r\\n            case 1 {\\r\\n            // slength can contain both the length and contents of the array\\r\\n            // if length < 32 bytes so let's prepare for that\\r\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n                if iszero(iszero(slength)) {\\r\\n                    switch lt(slength, 32)\\r\\n                    case 1 {\\r\\n                    // blank the last byte which is the length\\r\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\r\\n\\r\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\r\\n                        // unsuccess:\\r\\n                            success := 0\\r\\n                        }\\r\\n                    }\\r\\n                    default {\\r\\n                    // cb is a circuit breaker in the for loop since there's\\r\\n                    //  no said feature for inline assembly loops\\r\\n                    // cb = 1 - don't breaker\\r\\n                    // cb = 0 - break\\r\\n                        let cb := 1\\r\\n\\r\\n                    // get the keccak hash to get the contents of the array\\r\\n                        mstore(0x0, _preBytes.slot)\\r\\n                        let sc := keccak256(0x0, 0x20)\\r\\n\\r\\n                        let mc := add(_postBytes, 0x20)\\r\\n                        let end := add(mc, mlength)\\r\\n\\r\\n                    // the next line is the loop condition:\\r\\n                    // while(uint256(mc < end) + cb == 2)\\r\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\r\\n                            sc := add(sc, 1)\\r\\n                            mc := add(mc, 0x20)\\r\\n                        } {\\r\\n                            if iszero(eq(sload(sc), mload(mc))) {\\r\\n                            // unsuccess:\\r\\n                                success := 0\\r\\n                                cb := 0\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n            // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x93271c0733973f6f4a4996a910759b9fb758997c12da6cd65ea169eaa678935c\",\"license\":\"Unlicense\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/extensions/LzApp.sol:LzApp","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":3710,"contract":"contracts/extensions/LzApp.sol:LzApp","label":"trustedRemoteLookup","offset":0,"slot":"1","type":"t_mapping(t_uint16,t_bytes_storage)"},{"astId":3716,"contract":"contracts/extensions/LzApp.sol:LzApp","label":"minDstGasLookup","offset":0,"slot":"2","type":"t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"},{"astId":3718,"contract":"contracts/extensions/LzApp.sol:LzApp","label":"precrime","offset":0,"slot":"3","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_uint16,t_bytes_storage)":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => mapping(uint16 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint16,t_uint256)"},"t_mapping(t_uint16,t_uint256)":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/extensions/NonblockingLzApp.sol":{"NonblockingLzApp":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"indexed":false,"internalType":"uint64","name":"_nonce","type":"uint64"},{"indexed":false,"internalType":"bytes","name":"_payload","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"_reason","type":"bytes"}],"name":"MessageFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"indexed":false,"internalType":"uint64","name":"_nonce","type":"uint64"},{"indexed":false,"internalType":"bytes32","name":"_payloadHash","type":"bytes32"}],"name":"RetryMessageSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"_type","type":"uint16"},{"indexed":false,"internalType":"uint256","name":"_minDstGas","type":"uint256"}],"name":"SetMinDstGas","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"precrime","type":"address"}],"name":"SetPrecrime","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_path","type":"bytes"}],"name":"SetTrustedRemote","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"_remoteAddress","type":"bytes"}],"name":"SetTrustedRemoteAddress","type":"event"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"uint64","name":"","type":"uint64"}],"name":"failedMessages","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"forceResumeReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"_configType","type":"uint256"}],"name":"getConfig","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_remoteChainId","type":"uint16"}],"name":"getTrustedRemoteAddress","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"}],"name":"isTrustedRemote","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lzEndpoint","outputs":[{"internalType":"contract ILayerZeroEndpoint","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"lzReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint16","name":"","type":"uint16"}],"name":"minDstGasLookup","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"nonblockingLzReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"precrime","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"retryMessage","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"},{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"uint256","name":"_configType","type":"uint256"},{"internalType":"bytes","name":"_config","type":"bytes"}],"name":"setConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"uint16","name":"_packetType","type":"uint16"},{"internalType":"uint256","name":"_minGas","type":"uint256"}],"name":"setMinDstGas","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_precrime","type":"address"}],"name":"setPrecrime","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setReceiveVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_version","type":"uint16"}],"name":"setSendVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_srcChainId","type":"uint16"},{"internalType":"bytes","name":"_path","type":"bytes"}],"name":"setTrustedRemote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_remoteChainId","type":"uint16"},{"internalType":"bytes","name":"_remoteAddress","type":"bytes"}],"name":"setTrustedRemoteAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"}],"name":"trustedRemoteLookup","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"failedMessages(uint16,bytes,uint64)":"5b8c41e6","forceResumeReceive(uint16,bytes)":"42d65a8d","getConfig(uint16,uint16,address,uint256)":"f5ecbdbc","getTrustedRemoteAddress(uint16)":"9f38369a","isTrustedRemote(uint16,bytes)":"3d8b38f6","lzEndpoint()":"b353aaa7","lzReceive(uint16,bytes,uint64,bytes)":"001d3567","minDstGasLookup(uint16,uint16)":"8cfd8f5c","nonblockingLzReceive(uint16,bytes,uint64,bytes)":"66ad5c8a","owner()":"8da5cb5b","precrime()":"950c8a74","renounceOwnership()":"715018a6","retryMessage(uint16,bytes,uint64,bytes)":"d1deba1f","setConfig(uint16,uint16,uint256,bytes)":"cbed8b9c","setMinDstGas(uint16,uint16,uint256)":"df2a5b3b","setPrecrime(address)":"baf3292d","setReceiveVersion(uint16)":"10ddb137","setSendVersion(uint16)":"07e0db17","setTrustedRemote(uint16,bytes)":"eb8d72b7","setTrustedRemoteAddress(uint16,bytes)":"a6c3d165","transferOwnership(address)":"f2fde38b","trustedRemoteLookup(uint16)":"7533d788"}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"RetryMessageSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemoteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extensions/NonblockingLzApp.sol\":\"NonblockingLzApp\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/extensions/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\r\\n\\r\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\r\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\r\\n    // @param _payload - a custom bytes payload to send to the destination contract\\r\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\r\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\r\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\r\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\r\\n\\r\\n    // @notice used by the messaging library to publish verified payload\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\r\\n    // @param _dstAddress - the address on destination chain\\r\\n    // @param _nonce - the unbound message ordering nonce\\r\\n    // @param _gasLimit - the gas limit for external contract execution\\r\\n    // @param _payload - verified payload to send to the destination contract\\r\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    // @param _payload - the custom message to send over LayerZero\\r\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\r\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\r\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n    // @notice get this Endpoint's immutable source identifier\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    // @notice the interface to retry failed message on this Endpoint destination\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    // @param _payload - the payload to be retried\\r\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for send() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isSendingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for receive() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isReceivingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\r\\n\\r\\n    // @notice get the send() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\r\\n\\r\\n    // @notice get the lzReceive() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\r\\n}\",\"keccak256\":\"0x8db7119c5ebd5ad0c3a029e512b970d17659639aea3c52974380b707ebdfefd0\",\"license\":\"MIT\"},\"contracts/extensions/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroReceiver {\\r\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\r\\n    // @param _srcChainId - the source endpoint identifier\\r\\n    // @param _srcAddress - the source sending contract address from the source chain\\r\\n    // @param _nonce - the ordered message nonce\\r\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\r\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\r\\n}\",\"keccak256\":\"0x145419340a1e545764ab2ff743c92cac8a3650e2b7a2672fdc6dd400559563d5\",\"license\":\"MIT\"},\"contracts/extensions/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroUserApplicationConfig {\\r\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\r\\n\\r\\n    // @notice set the send() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setSendVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setReceiveVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\r\\n    // @param _srcChainId - the chainId of the source chain\\r\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\r\\n}\",\"keccak256\":\"0x8462616325f7d42a87a9c3e908ac9f6990a96bcf37ba61a524a67519396707be\",\"license\":\"MIT\"},\"contracts/extensions/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./ILayerZeroReceiver.sol\\\";\\r\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\r\\nimport \\\"./ILayerZeroEndpoint.sol\\\";\\r\\nimport \\\"./util/BytesLib.sol\\\";\\r\\n\\r\\n/*\\r\\n * a generic LzReceiver implementation\\r\\n */\\r\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\r\\n    using BytesLib for bytes;\\r\\n\\r\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\r\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\r\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\r\\n    address public precrime;\\r\\n\\r\\n    event SetPrecrime(address precrime);\\r\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\r\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\r\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\r\\n\\r\\n    constructor(address _endpoint) {\\r\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\r\\n    }\\r\\n\\r\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\r\\n        // lzReceive must be called by the endpoint for security\\r\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\r\\n\\r\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\r\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\r\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\r\\n\\r\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n\\r\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\r\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\r\\n\\r\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\r\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\r\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\r\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\r\\n    }\\r\\n\\r\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\r\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\r\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\r\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\r\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\r\\n    }\\r\\n\\r\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\r\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\r\\n        assembly {\\r\\n            gasLimit := mload(add(_adapterParams, 34))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //---------------------------UserApplication config----------------------------------------\\r\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\r\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\r\\n    }\\r\\n\\r\\n    // generic config for LayerZero user Application\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\r\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\r\\n    }\\r\\n\\r\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\r\\n        lzEndpoint.setSendVersion(_version);\\r\\n    }\\r\\n\\r\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\r\\n        lzEndpoint.setReceiveVersion(_version);\\r\\n    }\\r\\n\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\r\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\r\\n    }\\r\\n\\r\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\r\\n    // this function set the trusted path for the cross-chain communication\\r\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\\r\\n        trustedRemoteLookup[_srcChainId] = _path;\\r\\n        emit SetTrustedRemote(_srcChainId, _path);\\r\\n    }\\r\\n\\r\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\r\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\r\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\r\\n    }\\r\\n\\r\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\r\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\r\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\r\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\r\\n    }\\r\\n\\r\\n    function setPrecrime(address _precrime) external onlyOwner {\\r\\n        precrime = _precrime;\\r\\n        emit SetPrecrime(_precrime);\\r\\n    }\\r\\n\\r\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\r\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\r\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\r\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\r\\n    }\\r\\n\\r\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\r\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\r\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\r\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x098ca5ec5caa0a3ad171c63ba5941ec882c3b37929ba20e3a2b8ad91100cd6a3\",\"license\":\"MIT\"},\"contracts/extensions/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./LzApp.sol\\\";\\r\\nimport \\\"./util/ExcessivelySafeCall.sol\\\";\\r\\n\\r\\n/*\\r\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\r\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\r\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\r\\n */\\r\\nabstract contract NonblockingLzApp is LzApp {\\r\\n    using ExcessivelySafeCall for address;\\r\\n\\r\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\r\\n\\r\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\r\\n\\r\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\r\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\r\\n\\r\\n    // overriding the virtual function in LzReceiver\\r\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\r\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\\r\\n        // try-catch all errors/exceptions\\r\\n        if (!success) {\\r\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\\r\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\r\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\r\\n    }\\r\\n\\r\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\\r\\n        // only internal transaction\\r\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\r\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n\\r\\n    //@notice override this function\\r\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\r\\n\\r\\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\\r\\n        // assert there is message to retry\\r\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\r\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\r\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\r\\n        // clear the stored message\\r\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\r\\n        // execute the message. revert if it fails again\\r\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc94e9aaeaf207f1d225f3a157d10a20fcfb20ea8b04d047b4a20f7e0f747d6af\",\"license\":\"MIT\"},\"contracts/extensions/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\n/*\\r\\n * @title Solidity Bytes Arrays Utils\\r\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\r\\n *\\r\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\r\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\r\\n */\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n\\r\\nlibrary BytesLib {\\r\\n    function concat(\\r\\n        bytes memory _preBytes,\\r\\n        bytes memory _postBytes\\r\\n    )\\r\\n    internal\\r\\n    pure\\r\\n    returns (bytes memory)\\r\\n    {\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n        // Get a location of some free memory and store it in tempBytes as\\r\\n        // Solidity does for memory variables.\\r\\n            tempBytes := mload(0x40)\\r\\n\\r\\n        // Store the length of the first bytes array at the beginning of\\r\\n        // the memory for tempBytes.\\r\\n            let length := mload(_preBytes)\\r\\n            mstore(tempBytes, length)\\r\\n\\r\\n        // Maintain a memory counter for the current write location in the\\r\\n        // temp bytes array by adding the 32 bytes for the array length to\\r\\n        // the starting location.\\r\\n            let mc := add(tempBytes, 0x20)\\r\\n        // Stop copying when the memory counter reaches the length of the\\r\\n        // first bytes array.\\r\\n            let end := add(mc, length)\\r\\n\\r\\n            for {\\r\\n            // Initialize a copy counter to the start of the _preBytes data,\\r\\n            // 32 bytes into its memory.\\r\\n                let cc := add(_preBytes, 0x20)\\r\\n            } lt(mc, end) {\\r\\n            // Increase both counters by 32 bytes each iteration.\\r\\n                mc := add(mc, 0x20)\\r\\n                cc := add(cc, 0x20)\\r\\n            } {\\r\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\r\\n            // at a time.\\r\\n                mstore(mc, mload(cc))\\r\\n            }\\r\\n\\r\\n        // Add the length of _postBytes to the current length of tempBytes\\r\\n        // and store it as the new length in the first 32 bytes of the\\r\\n        // tempBytes memory.\\r\\n            length := mload(_postBytes)\\r\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\r\\n\\r\\n        // Move the memory counter back from a multiple of 0x20 to the\\r\\n        // actual end of the _preBytes data.\\r\\n            mc := end\\r\\n        // Stop copying when the memory counter reaches the new combined\\r\\n        // length of the arrays.\\r\\n            end := add(mc, length)\\r\\n\\r\\n            for {\\r\\n                let cc := add(_postBytes, 0x20)\\r\\n            } lt(mc, end) {\\r\\n                mc := add(mc, 0x20)\\r\\n                cc := add(cc, 0x20)\\r\\n            } {\\r\\n                mstore(mc, mload(cc))\\r\\n            }\\r\\n\\r\\n        // Update the free-memory pointer by padding our last write location\\r\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\r\\n        // next 32 byte block, then round down to the nearest multiple of\\r\\n        // 32. If the sum of the length of the two arrays is zero then add\\r\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\r\\n            mstore(0x40, and(\\r\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\r\\n            not(31) // Round down to the nearest 32 bytes.\\r\\n            ))\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\r\\n        assembly {\\r\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\r\\n        // of the array. (We don't need to use the offset into the slot\\r\\n        // because arrays use the entire slot.)\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n        // Arrays of 31 bytes or less have an even value in their slot,\\r\\n        // while longer arrays have an odd value. The actual length is\\r\\n        // the slot divided by two for odd values, and the lowest order\\r\\n        // byte divided by two for even values.\\r\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\r\\n        // two to get the length. If the slot is odd, bitwise and the slot\\r\\n        // with -1 and divide by two.\\r\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\r\\n            let mlength := mload(_postBytes)\\r\\n            let newlength := add(slength, mlength)\\r\\n        // slength can contain both the length and contents of the array\\r\\n        // if length < 32 bytes so let's prepare for that\\r\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n            switch add(lt(slength, 32), lt(newlength, 32))\\r\\n            case 2 {\\r\\n            // Since the new array still fits in the slot, we just need to\\r\\n            // update the contents of the slot.\\r\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\r\\n                sstore(\\r\\n                _preBytes.slot,\\r\\n                // all the modifications to the slot are inside this\\r\\n                // next block\\r\\n                add(\\r\\n                // we can just add to the slot contents because the\\r\\n                // bytes we want to change are the LSBs\\r\\n                fslot,\\r\\n                add(\\r\\n                mul(\\r\\n                div(\\r\\n                // load the bytes from memory\\r\\n                mload(add(_postBytes, 0x20)),\\r\\n                // zero all bytes to the right\\r\\n                exp(0x100, sub(32, mlength))\\r\\n                ),\\r\\n                // and now shift left the number of bytes to\\r\\n                // leave space for the length in the slot\\r\\n                exp(0x100, sub(32, newlength))\\r\\n                ),\\r\\n                // increase length by the double of the memory\\r\\n                // bytes length\\r\\n                mul(mlength, 2)\\r\\n                )\\r\\n                )\\r\\n                )\\r\\n            }\\r\\n            case 1 {\\r\\n            // The stored value fits in the slot, but the combined value\\r\\n            // will exceed it.\\r\\n            // get the keccak hash to get the contents of the array\\r\\n                mstore(0x0, _preBytes.slot)\\r\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n            // save new length\\r\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n            // The contents of the _postBytes array start 32 bytes into\\r\\n            // the structure. Our first read should obtain the `submod`\\r\\n            // bytes that can fit into the unused space in the last word\\r\\n            // of the stored array. To get this, we read 32 bytes starting\\r\\n            // from `submod`, so the data we read overlaps with the array\\r\\n            // contents by `submod` bytes. Masking the lowest-order\\r\\n            // `submod` bytes allows us to add that value directly to the\\r\\n            // stored value.\\r\\n\\r\\n                let submod := sub(32, slength)\\r\\n                let mc := add(_postBytes, submod)\\r\\n                let end := add(_postBytes, mlength)\\r\\n                let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n                sstore(\\r\\n                sc,\\r\\n                add(\\r\\n                and(\\r\\n                fslot,\\r\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\r\\n                ),\\r\\n                and(mload(mc), mask)\\r\\n                )\\r\\n                )\\r\\n\\r\\n                for {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    sc := add(sc, 1)\\r\\n                } lt(mc, end) {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } {\\r\\n                    sstore(sc, mload(mc))\\r\\n                }\\r\\n\\r\\n                mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n            }\\r\\n            default {\\r\\n            // get the keccak hash to get the contents of the array\\r\\n                mstore(0x0, _preBytes.slot)\\r\\n            // Start copying to the last used word of the stored array.\\r\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n            // save new length\\r\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n            // Copy over the first `submod` bytes of the new data as in\\r\\n            // case 1 above.\\r\\n                let slengthmod := mod(slength, 32)\\r\\n                let mlengthmod := mod(mlength, 32)\\r\\n                let submod := sub(32, slengthmod)\\r\\n                let mc := add(_postBytes, submod)\\r\\n                let end := add(_postBytes, mlength)\\r\\n                let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\r\\n\\r\\n                for {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } lt(mc, end) {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } {\\r\\n                    sstore(sc, mload(mc))\\r\\n                }\\r\\n\\r\\n                mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function slice(\\r\\n        bytes memory _bytes,\\r\\n        uint256 _start,\\r\\n        uint256 _length\\r\\n    )\\r\\n    internal\\r\\n    pure\\r\\n    returns (bytes memory)\\r\\n    {\\r\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\r\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\r\\n\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n            switch iszero(_length)\\r\\n            case 0 {\\r\\n            // Get a location of some free memory and store it in tempBytes as\\r\\n            // Solidity does for memory variables.\\r\\n                tempBytes := mload(0x40)\\r\\n\\r\\n            // The first word of the slice result is potentially a partial\\r\\n            // word read from the original array. To read it, we calculate\\r\\n            // the length of that partial word and start copying that many\\r\\n            // bytes into the array. The first word we copy will start with\\r\\n            // data we don't care about, but the last `lengthmod` bytes will\\r\\n            // land at the beginning of the contents of the new array. When\\r\\n            // we're done copying, we overwrite the full first word with\\r\\n            // the actual length of the slice.\\r\\n                let lengthmod := and(_length, 31)\\r\\n\\r\\n            // The multiplication in the next line is necessary\\r\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\r\\n            // the following copy loop was copying the origin's length\\r\\n            // and then ending prematurely not copying everything it should.\\r\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\r\\n                let end := add(mc, _length)\\r\\n\\r\\n                for {\\r\\n                // The multiplication in the next line has the same exact purpose\\r\\n                // as the one above.\\r\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\r\\n                } lt(mc, end) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                    mstore(mc, mload(cc))\\r\\n                }\\r\\n\\r\\n                mstore(tempBytes, _length)\\r\\n\\r\\n            //update free-memory pointer\\r\\n            //allocating the array padded to 32 bytes like the compiler does now\\r\\n                mstore(0x40, and(add(mc, 31), not(31)))\\r\\n            }\\r\\n            //if we want a zero-length slice let's just return a zero-length array\\r\\n            default {\\r\\n                tempBytes := mload(0x40)\\r\\n            //zero out the 32 bytes slice we are about to return\\r\\n            //we need to do it because Solidity does not garbage collect\\r\\n                mstore(tempBytes, 0)\\r\\n\\r\\n                mstore(0x40, add(tempBytes, 0x20))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\r\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\r\\n        address tempAddress;\\r\\n\\r\\n        assembly {\\r\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\r\\n        }\\r\\n\\r\\n        return tempAddress;\\r\\n    }\\r\\n\\r\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\r\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\r\\n        uint8 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\r\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\r\\n        uint16 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\r\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\r\\n        uint32 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\r\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\r\\n        uint64 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\r\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\r\\n        uint96 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\r\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\r\\n        uint128 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\r\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\r\\n        uint256 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\r\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\r\\n        bytes32 tempBytes32;\\r\\n\\r\\n        assembly {\\r\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\r\\n        }\\r\\n\\r\\n        return tempBytes32;\\r\\n    }\\r\\n\\r\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n            let length := mload(_preBytes)\\r\\n\\r\\n        // if lengths don't match the arrays are not equal\\r\\n            switch eq(length, mload(_postBytes))\\r\\n            case 1 {\\r\\n            // cb is a circuit breaker in the for loop since there's\\r\\n            //  no said feature for inline assembly loops\\r\\n            // cb = 1 - don't breaker\\r\\n            // cb = 0 - break\\r\\n                let cb := 1\\r\\n\\r\\n                let mc := add(_preBytes, 0x20)\\r\\n                let end := add(mc, length)\\r\\n\\r\\n                for {\\r\\n                    let cc := add(_postBytes, 0x20)\\r\\n                // the next line is the loop condition:\\r\\n                // while(uint256(mc < end) + cb == 2)\\r\\n                } eq(add(lt(mc, end), cb), 2) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                // if any of these checks fails then arrays are not equal\\r\\n                    if iszero(eq(mload(mc), mload(cc))) {\\r\\n                    // unsuccess:\\r\\n                        success := 0\\r\\n                        cb := 0\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n            // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    function equalStorage(\\r\\n        bytes storage _preBytes,\\r\\n        bytes memory _postBytes\\r\\n    )\\r\\n    internal\\r\\n    view\\r\\n    returns (bool)\\r\\n    {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n        // we know _preBytes_offset is 0\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n        // Decode the length of the stored array like in concatStorage().\\r\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\r\\n            let mlength := mload(_postBytes)\\r\\n\\r\\n        // if lengths don't match the arrays are not equal\\r\\n            switch eq(slength, mlength)\\r\\n            case 1 {\\r\\n            // slength can contain both the length and contents of the array\\r\\n            // if length < 32 bytes so let's prepare for that\\r\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n                if iszero(iszero(slength)) {\\r\\n                    switch lt(slength, 32)\\r\\n                    case 1 {\\r\\n                    // blank the last byte which is the length\\r\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\r\\n\\r\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\r\\n                        // unsuccess:\\r\\n                            success := 0\\r\\n                        }\\r\\n                    }\\r\\n                    default {\\r\\n                    // cb is a circuit breaker in the for loop since there's\\r\\n                    //  no said feature for inline assembly loops\\r\\n                    // cb = 1 - don't breaker\\r\\n                    // cb = 0 - break\\r\\n                        let cb := 1\\r\\n\\r\\n                    // get the keccak hash to get the contents of the array\\r\\n                        mstore(0x0, _preBytes.slot)\\r\\n                        let sc := keccak256(0x0, 0x20)\\r\\n\\r\\n                        let mc := add(_postBytes, 0x20)\\r\\n                        let end := add(mc, mlength)\\r\\n\\r\\n                    // the next line is the loop condition:\\r\\n                    // while(uint256(mc < end) + cb == 2)\\r\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\r\\n                            sc := add(sc, 1)\\r\\n                            mc := add(mc, 0x20)\\r\\n                        } {\\r\\n                            if iszero(eq(sload(sc), mload(mc))) {\\r\\n                            // unsuccess:\\r\\n                                success := 0\\r\\n                                cb := 0\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n            // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x93271c0733973f6f4a4996a910759b9fb758997c12da6cd65ea169eaa678935c\",\"license\":\"Unlicense\"},\"contracts/extensions/util/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.7.6;\\r\\n\\r\\nlibrary ExcessivelySafeCall {\\r\\n    uint256 constant LOW_28_MASK =\\r\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\r\\n\\r\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\r\\n    /// contract. This prevents the called contract from causing reversion of\\r\\n    /// the caller in as many ways as we can.\\r\\n    /// @dev The main difference between this and a solidity low-level call is\\r\\n    /// that we limit the number of bytes that the callee can cause to be\\r\\n    /// copied to caller memory. This prevents stupid things like malicious\\r\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\r\\n    /// to memory.\\r\\n    /// @param _target The address to call\\r\\n    /// @param _gas The amount of gas to forward to the remote contract\\r\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\r\\n    /// to memory.\\r\\n    /// @param _calldata The data to send to the remote contract\\r\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\r\\n    /// `_maxCopy` bytes.\\r\\n    function excessivelySafeCall(\\r\\n        address _target,\\r\\n        uint256 _gas,\\r\\n        uint16 _maxCopy,\\r\\n        bytes memory _calldata\\r\\n    ) internal returns (bool, bytes memory) {\\r\\n        // set up for assembly call\\r\\n        uint256 _toCopy;\\r\\n        bool _success;\\r\\n        bytes memory _returnData = new bytes(_maxCopy);\\r\\n        // dispatch message to recipient\\r\\n        // by assembly calling \\\"handle\\\" function\\r\\n        // we call via assembly to avoid memcopying a very large returndata\\r\\n        // returned by a malicious contract\\r\\n        assembly {\\r\\n            _success := call(\\r\\n            _gas, // gas\\r\\n            _target, // recipient\\r\\n            0, // ether value\\r\\n            add(_calldata, 0x20), // inloc\\r\\n            mload(_calldata), // inlen\\r\\n            0, // outloc\\r\\n            0 // outlen\\r\\n            )\\r\\n        // limit our copy to 256 bytes\\r\\n            _toCopy := returndatasize()\\r\\n            if gt(_toCopy, _maxCopy) {\\r\\n                _toCopy := _maxCopy\\r\\n            }\\r\\n        // Store the length of the copied bytes\\r\\n            mstore(_returnData, _toCopy)\\r\\n        // copy the bytes from returndata[0:_toCopy]\\r\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\r\\n        }\\r\\n        return (_success, _returnData);\\r\\n    }\\r\\n\\r\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\r\\n    /// contract. This prevents the called contract from causing reversion of\\r\\n    /// the caller in as many ways as we can.\\r\\n    /// @dev The main difference between this and a solidity low-level call is\\r\\n    /// that we limit the number of bytes that the callee can cause to be\\r\\n    /// copied to caller memory. This prevents stupid things like malicious\\r\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\r\\n    /// to memory.\\r\\n    /// @param _target The address to call\\r\\n    /// @param _gas The amount of gas to forward to the remote contract\\r\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\r\\n    /// to memory.\\r\\n    /// @param _calldata The data to send to the remote contract\\r\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\r\\n    /// `_maxCopy` bytes.\\r\\n    function excessivelySafeStaticCall(\\r\\n        address _target,\\r\\n        uint256 _gas,\\r\\n        uint16 _maxCopy,\\r\\n        bytes memory _calldata\\r\\n    ) internal view returns (bool, bytes memory) {\\r\\n        // set up for assembly call\\r\\n        uint256 _toCopy;\\r\\n        bool _success;\\r\\n        bytes memory _returnData = new bytes(_maxCopy);\\r\\n        // dispatch message to recipient\\r\\n        // by assembly calling \\\"handle\\\" function\\r\\n        // we call via assembly to avoid memcopying a very large returndata\\r\\n        // returned by a malicious contract\\r\\n        assembly {\\r\\n            _success := staticcall(\\r\\n            _gas, // gas\\r\\n            _target, // recipient\\r\\n            add(_calldata, 0x20), // inloc\\r\\n            mload(_calldata), // inlen\\r\\n            0, // outloc\\r\\n            0 // outlen\\r\\n            )\\r\\n        // limit our copy to 256 bytes\\r\\n            _toCopy := returndatasize()\\r\\n            if gt(_toCopy, _maxCopy) {\\r\\n                _toCopy := _maxCopy\\r\\n            }\\r\\n        // Store the length of the copied bytes\\r\\n            mstore(_returnData, _toCopy)\\r\\n        // copy the bytes from returndata[0:_toCopy]\\r\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\r\\n        }\\r\\n        return (_success, _returnData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swaps function selectors in encoded contract calls\\r\\n     * @dev Allows reuse of encoded calldata for functions with identical\\r\\n     * argument types but different names. It simply swaps out the first 4 bytes\\r\\n     * for the new selector. This function modifies memory in place, and should\\r\\n     * only be used with caution.\\r\\n     * @param _newSelector The new 4-byte selector\\r\\n     * @param _buf The encoded contract args\\r\\n     */\\r\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\r\\n    internal\\r\\n    pure\\r\\n    {\\r\\n        require(_buf.length >= 4);\\r\\n        uint256 _mask = LOW_28_MASK;\\r\\n        assembly {\\r\\n        // load the first word of\\r\\n            let _word := mload(add(_buf, 0x20))\\r\\n        // mask out the top 4 bytes\\r\\n        // /x\\r\\n            _word := and(_word, _mask)\\r\\n            _word := or(_newSelector, _word)\\r\\n            mstore(add(_buf, 0x20), _word)\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc460b65f6b39fd07a741212b7e7b4b04814d3dc2b28b58df92bc7899aa72ee54\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/extensions/NonblockingLzApp.sol:NonblockingLzApp","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":3710,"contract":"contracts/extensions/NonblockingLzApp.sol:NonblockingLzApp","label":"trustedRemoteLookup","offset":0,"slot":"1","type":"t_mapping(t_uint16,t_bytes_storage)"},{"astId":3716,"contract":"contracts/extensions/NonblockingLzApp.sol:NonblockingLzApp","label":"minDstGasLookup","offset":0,"slot":"2","type":"t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"},{"astId":3718,"contract":"contracts/extensions/NonblockingLzApp.sol:NonblockingLzApp","label":"precrime","offset":0,"slot":"3","type":"t_address"},{"astId":4203,"contract":"contracts/extensions/NonblockingLzApp.sol:NonblockingLzApp","label":"failedMessages","offset":0,"slot":"4","type":"t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_memory_ptr":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))":{"encoding":"mapping","key":"t_bytes_memory_ptr","label":"mapping(bytes => mapping(uint64 => bytes32))","numberOfBytes":"32","value":"t_mapping(t_uint64,t_bytes32)"},"t_mapping(t_uint16,t_bytes_storage)":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))","numberOfBytes":"32","value":"t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"},"t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => mapping(uint16 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint16,t_uint256)"},"t_mapping(t_uint16,t_uint256)":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint64,t_bytes32)":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => bytes32)","numberOfBytes":"32","value":"t_bytes32"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/extensions/util/BytesLib.sol":{"BytesLib":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220971bcff7f9c97bb64576c0d16270c3dc140b06570bf0965fbdc30e23fa1ec27d64736f6c63430008060033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP8 SHL 0xCF 0xF7 0xF9 0xC9 PUSH28 0xB64576C0D16270C3DC140B06570BF0965FBDC30E23FA1EC27D64736F PUSH13 0x63430008060033000000000000 ","sourceMap":"381:18606:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220971bcff7f9c97bb64576c0d16270c3dc140b06570bf0965fbdc30e23fa1ec27d64736f6c63430008060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP8 SHL 0xCF 0xF7 0xF9 0xC9 PUSH28 0xB64576C0D16270C3DC140B06570BF0965FBDC30E23FA1EC27D64736F PUSH13 0x63430008060033000000000000 ","sourceMap":"381:18606:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"concat(bytes memory,bytes memory)":"infinite","concatStorage(bytes storage pointer,bytes memory)":"infinite","equal(bytes memory,bytes memory)":"infinite","equalStorage(bytes storage pointer,bytes memory)":"infinite","slice(bytes memory,uint256,uint256)":"infinite","toAddress(bytes memory,uint256)":"infinite","toBytes32(bytes memory,uint256)":"infinite","toUint128(bytes memory,uint256)":"infinite","toUint16(bytes memory,uint256)":"infinite","toUint256(bytes memory,uint256)":"infinite","toUint32(bytes memory,uint256)":"infinite","toUint64(bytes memory,uint256)":"infinite","toUint8(bytes memory,uint256)":"infinite","toUint96(bytes memory,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extensions/util/BytesLib.sol\":\"BytesLib\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/extensions/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\n/*\\r\\n * @title Solidity Bytes Arrays Utils\\r\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\r\\n *\\r\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\r\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\r\\n */\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n\\r\\nlibrary BytesLib {\\r\\n    function concat(\\r\\n        bytes memory _preBytes,\\r\\n        bytes memory _postBytes\\r\\n    )\\r\\n    internal\\r\\n    pure\\r\\n    returns (bytes memory)\\r\\n    {\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n        // Get a location of some free memory and store it in tempBytes as\\r\\n        // Solidity does for memory variables.\\r\\n            tempBytes := mload(0x40)\\r\\n\\r\\n        // Store the length of the first bytes array at the beginning of\\r\\n        // the memory for tempBytes.\\r\\n            let length := mload(_preBytes)\\r\\n            mstore(tempBytes, length)\\r\\n\\r\\n        // Maintain a memory counter for the current write location in the\\r\\n        // temp bytes array by adding the 32 bytes for the array length to\\r\\n        // the starting location.\\r\\n            let mc := add(tempBytes, 0x20)\\r\\n        // Stop copying when the memory counter reaches the length of the\\r\\n        // first bytes array.\\r\\n            let end := add(mc, length)\\r\\n\\r\\n            for {\\r\\n            // Initialize a copy counter to the start of the _preBytes data,\\r\\n            // 32 bytes into its memory.\\r\\n                let cc := add(_preBytes, 0x20)\\r\\n            } lt(mc, end) {\\r\\n            // Increase both counters by 32 bytes each iteration.\\r\\n                mc := add(mc, 0x20)\\r\\n                cc := add(cc, 0x20)\\r\\n            } {\\r\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\r\\n            // at a time.\\r\\n                mstore(mc, mload(cc))\\r\\n            }\\r\\n\\r\\n        // Add the length of _postBytes to the current length of tempBytes\\r\\n        // and store it as the new length in the first 32 bytes of the\\r\\n        // tempBytes memory.\\r\\n            length := mload(_postBytes)\\r\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\r\\n\\r\\n        // Move the memory counter back from a multiple of 0x20 to the\\r\\n        // actual end of the _preBytes data.\\r\\n            mc := end\\r\\n        // Stop copying when the memory counter reaches the new combined\\r\\n        // length of the arrays.\\r\\n            end := add(mc, length)\\r\\n\\r\\n            for {\\r\\n                let cc := add(_postBytes, 0x20)\\r\\n            } lt(mc, end) {\\r\\n                mc := add(mc, 0x20)\\r\\n                cc := add(cc, 0x20)\\r\\n            } {\\r\\n                mstore(mc, mload(cc))\\r\\n            }\\r\\n\\r\\n        // Update the free-memory pointer by padding our last write location\\r\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\r\\n        // next 32 byte block, then round down to the nearest multiple of\\r\\n        // 32. If the sum of the length of the two arrays is zero then add\\r\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\r\\n            mstore(0x40, and(\\r\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\r\\n            not(31) // Round down to the nearest 32 bytes.\\r\\n            ))\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\r\\n        assembly {\\r\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\r\\n        // of the array. (We don't need to use the offset into the slot\\r\\n        // because arrays use the entire slot.)\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n        // Arrays of 31 bytes or less have an even value in their slot,\\r\\n        // while longer arrays have an odd value. The actual length is\\r\\n        // the slot divided by two for odd values, and the lowest order\\r\\n        // byte divided by two for even values.\\r\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\r\\n        // two to get the length. If the slot is odd, bitwise and the slot\\r\\n        // with -1 and divide by two.\\r\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\r\\n            let mlength := mload(_postBytes)\\r\\n            let newlength := add(slength, mlength)\\r\\n        // slength can contain both the length and contents of the array\\r\\n        // if length < 32 bytes so let's prepare for that\\r\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n            switch add(lt(slength, 32), lt(newlength, 32))\\r\\n            case 2 {\\r\\n            // Since the new array still fits in the slot, we just need to\\r\\n            // update the contents of the slot.\\r\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\r\\n                sstore(\\r\\n                _preBytes.slot,\\r\\n                // all the modifications to the slot are inside this\\r\\n                // next block\\r\\n                add(\\r\\n                // we can just add to the slot contents because the\\r\\n                // bytes we want to change are the LSBs\\r\\n                fslot,\\r\\n                add(\\r\\n                mul(\\r\\n                div(\\r\\n                // load the bytes from memory\\r\\n                mload(add(_postBytes, 0x20)),\\r\\n                // zero all bytes to the right\\r\\n                exp(0x100, sub(32, mlength))\\r\\n                ),\\r\\n                // and now shift left the number of bytes to\\r\\n                // leave space for the length in the slot\\r\\n                exp(0x100, sub(32, newlength))\\r\\n                ),\\r\\n                // increase length by the double of the memory\\r\\n                // bytes length\\r\\n                mul(mlength, 2)\\r\\n                )\\r\\n                )\\r\\n                )\\r\\n            }\\r\\n            case 1 {\\r\\n            // The stored value fits in the slot, but the combined value\\r\\n            // will exceed it.\\r\\n            // get the keccak hash to get the contents of the array\\r\\n                mstore(0x0, _preBytes.slot)\\r\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n            // save new length\\r\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n            // The contents of the _postBytes array start 32 bytes into\\r\\n            // the structure. Our first read should obtain the `submod`\\r\\n            // bytes that can fit into the unused space in the last word\\r\\n            // of the stored array. To get this, we read 32 bytes starting\\r\\n            // from `submod`, so the data we read overlaps with the array\\r\\n            // contents by `submod` bytes. Masking the lowest-order\\r\\n            // `submod` bytes allows us to add that value directly to the\\r\\n            // stored value.\\r\\n\\r\\n                let submod := sub(32, slength)\\r\\n                let mc := add(_postBytes, submod)\\r\\n                let end := add(_postBytes, mlength)\\r\\n                let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n                sstore(\\r\\n                sc,\\r\\n                add(\\r\\n                and(\\r\\n                fslot,\\r\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\r\\n                ),\\r\\n                and(mload(mc), mask)\\r\\n                )\\r\\n                )\\r\\n\\r\\n                for {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    sc := add(sc, 1)\\r\\n                } lt(mc, end) {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } {\\r\\n                    sstore(sc, mload(mc))\\r\\n                }\\r\\n\\r\\n                mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n            }\\r\\n            default {\\r\\n            // get the keccak hash to get the contents of the array\\r\\n                mstore(0x0, _preBytes.slot)\\r\\n            // Start copying to the last used word of the stored array.\\r\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n            // save new length\\r\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n            // Copy over the first `submod` bytes of the new data as in\\r\\n            // case 1 above.\\r\\n                let slengthmod := mod(slength, 32)\\r\\n                let mlengthmod := mod(mlength, 32)\\r\\n                let submod := sub(32, slengthmod)\\r\\n                let mc := add(_postBytes, submod)\\r\\n                let end := add(_postBytes, mlength)\\r\\n                let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\r\\n\\r\\n                for {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } lt(mc, end) {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } {\\r\\n                    sstore(sc, mload(mc))\\r\\n                }\\r\\n\\r\\n                mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function slice(\\r\\n        bytes memory _bytes,\\r\\n        uint256 _start,\\r\\n        uint256 _length\\r\\n    )\\r\\n    internal\\r\\n    pure\\r\\n    returns (bytes memory)\\r\\n    {\\r\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\r\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\r\\n\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n            switch iszero(_length)\\r\\n            case 0 {\\r\\n            // Get a location of some free memory and store it in tempBytes as\\r\\n            // Solidity does for memory variables.\\r\\n                tempBytes := mload(0x40)\\r\\n\\r\\n            // The first word of the slice result is potentially a partial\\r\\n            // word read from the original array. To read it, we calculate\\r\\n            // the length of that partial word and start copying that many\\r\\n            // bytes into the array. The first word we copy will start with\\r\\n            // data we don't care about, but the last `lengthmod` bytes will\\r\\n            // land at the beginning of the contents of the new array. When\\r\\n            // we're done copying, we overwrite the full first word with\\r\\n            // the actual length of the slice.\\r\\n                let lengthmod := and(_length, 31)\\r\\n\\r\\n            // The multiplication in the next line is necessary\\r\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\r\\n            // the following copy loop was copying the origin's length\\r\\n            // and then ending prematurely not copying everything it should.\\r\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\r\\n                let end := add(mc, _length)\\r\\n\\r\\n                for {\\r\\n                // The multiplication in the next line has the same exact purpose\\r\\n                // as the one above.\\r\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\r\\n                } lt(mc, end) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                    mstore(mc, mload(cc))\\r\\n                }\\r\\n\\r\\n                mstore(tempBytes, _length)\\r\\n\\r\\n            //update free-memory pointer\\r\\n            //allocating the array padded to 32 bytes like the compiler does now\\r\\n                mstore(0x40, and(add(mc, 31), not(31)))\\r\\n            }\\r\\n            //if we want a zero-length slice let's just return a zero-length array\\r\\n            default {\\r\\n                tempBytes := mload(0x40)\\r\\n            //zero out the 32 bytes slice we are about to return\\r\\n            //we need to do it because Solidity does not garbage collect\\r\\n                mstore(tempBytes, 0)\\r\\n\\r\\n                mstore(0x40, add(tempBytes, 0x20))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\r\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\r\\n        address tempAddress;\\r\\n\\r\\n        assembly {\\r\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\r\\n        }\\r\\n\\r\\n        return tempAddress;\\r\\n    }\\r\\n\\r\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\r\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\r\\n        uint8 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\r\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\r\\n        uint16 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\r\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\r\\n        uint32 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\r\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\r\\n        uint64 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\r\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\r\\n        uint96 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\r\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\r\\n        uint128 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\r\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\r\\n        uint256 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\r\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\r\\n        bytes32 tempBytes32;\\r\\n\\r\\n        assembly {\\r\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\r\\n        }\\r\\n\\r\\n        return tempBytes32;\\r\\n    }\\r\\n\\r\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n            let length := mload(_preBytes)\\r\\n\\r\\n        // if lengths don't match the arrays are not equal\\r\\n            switch eq(length, mload(_postBytes))\\r\\n            case 1 {\\r\\n            // cb is a circuit breaker in the for loop since there's\\r\\n            //  no said feature for inline assembly loops\\r\\n            // cb = 1 - don't breaker\\r\\n            // cb = 0 - break\\r\\n                let cb := 1\\r\\n\\r\\n                let mc := add(_preBytes, 0x20)\\r\\n                let end := add(mc, length)\\r\\n\\r\\n                for {\\r\\n                    let cc := add(_postBytes, 0x20)\\r\\n                // the next line is the loop condition:\\r\\n                // while(uint256(mc < end) + cb == 2)\\r\\n                } eq(add(lt(mc, end), cb), 2) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                // if any of these checks fails then arrays are not equal\\r\\n                    if iszero(eq(mload(mc), mload(cc))) {\\r\\n                    // unsuccess:\\r\\n                        success := 0\\r\\n                        cb := 0\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n            // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    function equalStorage(\\r\\n        bytes storage _preBytes,\\r\\n        bytes memory _postBytes\\r\\n    )\\r\\n    internal\\r\\n    view\\r\\n    returns (bool)\\r\\n    {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n        // we know _preBytes_offset is 0\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n        // Decode the length of the stored array like in concatStorage().\\r\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\r\\n            let mlength := mload(_postBytes)\\r\\n\\r\\n        // if lengths don't match the arrays are not equal\\r\\n            switch eq(slength, mlength)\\r\\n            case 1 {\\r\\n            // slength can contain both the length and contents of the array\\r\\n            // if length < 32 bytes so let's prepare for that\\r\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n                if iszero(iszero(slength)) {\\r\\n                    switch lt(slength, 32)\\r\\n                    case 1 {\\r\\n                    // blank the last byte which is the length\\r\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\r\\n\\r\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\r\\n                        // unsuccess:\\r\\n                            success := 0\\r\\n                        }\\r\\n                    }\\r\\n                    default {\\r\\n                    // cb is a circuit breaker in the for loop since there's\\r\\n                    //  no said feature for inline assembly loops\\r\\n                    // cb = 1 - don't breaker\\r\\n                    // cb = 0 - break\\r\\n                        let cb := 1\\r\\n\\r\\n                    // get the keccak hash to get the contents of the array\\r\\n                        mstore(0x0, _preBytes.slot)\\r\\n                        let sc := keccak256(0x0, 0x20)\\r\\n\\r\\n                        let mc := add(_postBytes, 0x20)\\r\\n                        let end := add(mc, mlength)\\r\\n\\r\\n                    // the next line is the loop condition:\\r\\n                    // while(uint256(mc < end) + cb == 2)\\r\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\r\\n                            sc := add(sc, 1)\\r\\n                            mc := add(mc, 0x20)\\r\\n                        } {\\r\\n                            if iszero(eq(sload(sc), mload(mc))) {\\r\\n                            // unsuccess:\\r\\n                                success := 0\\r\\n                                cb := 0\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n            // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x93271c0733973f6f4a4996a910759b9fb758997c12da6cd65ea169eaa678935c\",\"license\":\"Unlicense\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/extensions/util/ExcessivelySafeCall.sol":{"ExcessivelySafeCall":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206608e05fe739e0a725bc7b5c9546ae85ba922755d8b76694d87c377012b2ca7e64736f6c63430008060033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x8E05FE739E0A7 0x25 0xBC PUSH28 0x5C9546AE85BA922755D8B76694D87C377012B2CA7E64736F6C634300 ADDMOD MOD STOP CALLER ","sourceMap":"75:5465:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206608e05fe739e0a725bc7b5c9546ae85ba922755d8b76694d87c377012b2ca7e64736f6c63430008060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x8E05FE739E0A7 0x25 0xBC PUSH28 0x5C9546AE85BA922755D8B76694D87C377012B2CA7E64736F6C634300 ADDMOD MOD STOP CALLER ","sourceMap":"75:5465:20:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"excessivelySafeCall(address,uint256,uint16,bytes memory)":"infinite","excessivelySafeStaticCall(address,uint256,uint16,bytes memory)":"infinite","swapSelector(bytes4,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extensions/util/ExcessivelySafeCall.sol\":\"ExcessivelySafeCall\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/extensions/util/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.7.6;\\r\\n\\r\\nlibrary ExcessivelySafeCall {\\r\\n    uint256 constant LOW_28_MASK =\\r\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\r\\n\\r\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\r\\n    /// contract. This prevents the called contract from causing reversion of\\r\\n    /// the caller in as many ways as we can.\\r\\n    /// @dev The main difference between this and a solidity low-level call is\\r\\n    /// that we limit the number of bytes that the callee can cause to be\\r\\n    /// copied to caller memory. This prevents stupid things like malicious\\r\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\r\\n    /// to memory.\\r\\n    /// @param _target The address to call\\r\\n    /// @param _gas The amount of gas to forward to the remote contract\\r\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\r\\n    /// to memory.\\r\\n    /// @param _calldata The data to send to the remote contract\\r\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\r\\n    /// `_maxCopy` bytes.\\r\\n    function excessivelySafeCall(\\r\\n        address _target,\\r\\n        uint256 _gas,\\r\\n        uint16 _maxCopy,\\r\\n        bytes memory _calldata\\r\\n    ) internal returns (bool, bytes memory) {\\r\\n        // set up for assembly call\\r\\n        uint256 _toCopy;\\r\\n        bool _success;\\r\\n        bytes memory _returnData = new bytes(_maxCopy);\\r\\n        // dispatch message to recipient\\r\\n        // by assembly calling \\\"handle\\\" function\\r\\n        // we call via assembly to avoid memcopying a very large returndata\\r\\n        // returned by a malicious contract\\r\\n        assembly {\\r\\n            _success := call(\\r\\n            _gas, // gas\\r\\n            _target, // recipient\\r\\n            0, // ether value\\r\\n            add(_calldata, 0x20), // inloc\\r\\n            mload(_calldata), // inlen\\r\\n            0, // outloc\\r\\n            0 // outlen\\r\\n            )\\r\\n        // limit our copy to 256 bytes\\r\\n            _toCopy := returndatasize()\\r\\n            if gt(_toCopy, _maxCopy) {\\r\\n                _toCopy := _maxCopy\\r\\n            }\\r\\n        // Store the length of the copied bytes\\r\\n            mstore(_returnData, _toCopy)\\r\\n        // copy the bytes from returndata[0:_toCopy]\\r\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\r\\n        }\\r\\n        return (_success, _returnData);\\r\\n    }\\r\\n\\r\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\r\\n    /// contract. This prevents the called contract from causing reversion of\\r\\n    /// the caller in as many ways as we can.\\r\\n    /// @dev The main difference between this and a solidity low-level call is\\r\\n    /// that we limit the number of bytes that the callee can cause to be\\r\\n    /// copied to caller memory. This prevents stupid things like malicious\\r\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\r\\n    /// to memory.\\r\\n    /// @param _target The address to call\\r\\n    /// @param _gas The amount of gas to forward to the remote contract\\r\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\r\\n    /// to memory.\\r\\n    /// @param _calldata The data to send to the remote contract\\r\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\r\\n    /// `_maxCopy` bytes.\\r\\n    function excessivelySafeStaticCall(\\r\\n        address _target,\\r\\n        uint256 _gas,\\r\\n        uint16 _maxCopy,\\r\\n        bytes memory _calldata\\r\\n    ) internal view returns (bool, bytes memory) {\\r\\n        // set up for assembly call\\r\\n        uint256 _toCopy;\\r\\n        bool _success;\\r\\n        bytes memory _returnData = new bytes(_maxCopy);\\r\\n        // dispatch message to recipient\\r\\n        // by assembly calling \\\"handle\\\" function\\r\\n        // we call via assembly to avoid memcopying a very large returndata\\r\\n        // returned by a malicious contract\\r\\n        assembly {\\r\\n            _success := staticcall(\\r\\n            _gas, // gas\\r\\n            _target, // recipient\\r\\n            add(_calldata, 0x20), // inloc\\r\\n            mload(_calldata), // inlen\\r\\n            0, // outloc\\r\\n            0 // outlen\\r\\n            )\\r\\n        // limit our copy to 256 bytes\\r\\n            _toCopy := returndatasize()\\r\\n            if gt(_toCopy, _maxCopy) {\\r\\n                _toCopy := _maxCopy\\r\\n            }\\r\\n        // Store the length of the copied bytes\\r\\n            mstore(_returnData, _toCopy)\\r\\n        // copy the bytes from returndata[0:_toCopy]\\r\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\r\\n        }\\r\\n        return (_success, _returnData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swaps function selectors in encoded contract calls\\r\\n     * @dev Allows reuse of encoded calldata for functions with identical\\r\\n     * argument types but different names. It simply swaps out the first 4 bytes\\r\\n     * for the new selector. This function modifies memory in place, and should\\r\\n     * only be used with caution.\\r\\n     * @param _newSelector The new 4-byte selector\\r\\n     * @param _buf The encoded contract args\\r\\n     */\\r\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\r\\n    internal\\r\\n    pure\\r\\n    {\\r\\n        require(_buf.length >= 4);\\r\\n        uint256 _mask = LOW_28_MASK;\\r\\n        assembly {\\r\\n        // load the first word of\\r\\n            let _word := mload(add(_buf, 0x20))\\r\\n        // mask out the top 4 bytes\\r\\n        // /x\\r\\n            _word := and(_word, _mask)\\r\\n            _word := or(_newSelector, _word)\\r\\n            mstore(add(_buf, 0x20), _word)\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc460b65f6b39fd07a741212b7e7b4b04814d3dc2b28b58df92bc7899aa72ee54\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}