{
  "address": "0xA8e72f679159122BbF9d420a689f2283F47229F0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dao_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dao_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "finished",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_ideas_uris",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "goal_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ideas_uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_goal_ideas_votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "wallet",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_uri",
          "type": "string"
        }
      ],
      "name": "create_dao",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        }
      ],
      "name": "create_goal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_wallet",
          "type": "string"
        }
      ],
      "name": "create_goal_ideas_vote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        }
      ],
      "name": "create_ideas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        }
      ],
      "name": "dao_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_daos",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_goals",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        }
      ],
      "name": "get_all_goals_by_dao_id",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_ideas",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        }
      ],
      "name": "get_all_ideas_by_goal_id",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        }
      ],
      "name": "get_goal_id_by_goal_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "get_goal_id_from_ideas_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "get_ideas_id_by_ideas_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        }
      ],
      "name": "get_ideas_votes_from_goal",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        }
      ],
      "name": "goal_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        }
      ],
      "name": "ideas_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset_all",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_uri",
          "type": "string"
        }
      ],
      "name": "set_dao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        }
      ],
      "name": "set_goal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "set_ideas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3076ec0aaaf1dd7d665c735ac82017f63d8e53dd9ecfb534b9f658bc3cb856b7",
  "receipt": {
    "to": null,
    "from": "0x32F48d18db5A63D3345Eaee9d9C326a2cC647B80",
    "contractAddress": "0xA8e72f679159122BbF9d420a689f2283F47229F0",
    "transactionIndex": 0,
    "gasUsed": "4006527",
    "logsBloom": "0x
    "blockHash": "0x7c84a7330cb91a70d304eee7a8f9a784e848e781107a4b394cae868959916474",
    "transactionHash": "0x3076ec0aaaf1dd7d665c735ac82017f63d8e53dd9ecfb534b9f658bc3cb856b7",
    "logs": [],
    "blockNumber": 3320330,
    "cumulativeGasUsed": "4006527",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "GreenDAO",
    "DEV"
  ],
  "numDeployments": 2,
  "solcInputHash": "a843081b6503f9a2444aae0a094623f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dao_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dao_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"finished\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ideas_uris\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ideas_uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_goal_ideas_votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"wallet\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_uri\",\"type\":\"string\"}],\"name\":\"create_dao\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"create_goal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_wallet\",\"type\":\"string\"}],\"name\":\"create_goal_ideas_vote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"create_ideas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"dao_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_daos\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_goals\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"get_all_goals_by_dao_id\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_ideas\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"get_all_ideas_by_goal_id\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"}],\"name\":\"get_goal_id_by_goal_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"get_goal_id_from_ideas_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"get_ideas_id_by_ideas_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"}],\"name\":\"get_ideas_votes_from_goal\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"goal_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"}],\"name\":\"ideas_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset_all\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_uri\",\"type\":\"string\"}],\"name\":\"set_dao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"}],\"name\":\"set_goal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"set_ideas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GreenDAO.sol\":\"GreenDAO\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/GreenDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./extensions/IONFT721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract GreenDAO is ERC721, IONFT721 {\\n   \\n    constructor(\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC721(_name, _symbol) {}\\n\\n      struct dao_uri_struct {\\n        string dao_wallet;\\n        string dao_uri;\\n        string finished;\\n    }\\n    struct goal_uri_struct {\\n        uint256 dao_id;\\n        string goal_uri;\\n    }\\n\\n    struct ideas_uri_struct {\\n        uint256 goal_id;\\n        string ideas_uri;\\n    }\\n\\n    struct goal_ideas_votes_struct {\\n        uint256 goal_id;\\n        uint256 ideas_id;\\n        string wallet;\\n    }\\n\\n    uint256 private _dao_ids;\\n    uint256 private _goal_ids;\\n    uint256 private _ideas_ids;\\n    uint256 private _ideas_vote_ids;\\n    mapping(uint256 => dao_uri_struct) public _dao_uris;                        //_dao_ids          => (Dao)    Dao Wallet + Dao URI   + Finished\\n    mapping(uint256 => goal_uri_struct) private _goal_uris;                     //_goal_ids         => (Goal)   Dao ID + Goal URI\\n    mapping(uint256 => ideas_uri_struct) public _ideas_uris;                    //_ideas_ids        => (Ideas)  Goal ID + Ideas URI\\n    mapping(uint256 => goal_ideas_votes_struct) public all_goal_ideas_votes;    //_ideas_vote_ids   => (Vote)   Goal ID + Ideas ID + Wallet\\n\\n    \\n\\n    //Daos\\n    function create_dao(string memory _dao_wallet, string memory _dao_uri)\\n        public\\n        returns (uint256)\\n    {\\n        //Create Dao into _dao_uris\\n        _dao_uris[_dao_ids] = dao_uri_struct(_dao_wallet, _dao_uri, \\\"False\\\");\\n        _dao_ids++;\\n\\n        return _dao_ids;\\n    }\\n\\n    function set_dao(\\n        uint256 _dao_id,\\n        string memory _dao_wallet,\\n        string memory _dao_uri\\n    ) public {\\n        //Set Dao of wallet and uri\\n        _dao_uris[_dao_id].dao_wallet = _dao_wallet;\\n        _dao_uris[_dao_id].dao_uri = _dao_uri;\\n    }\\n\\n    function get_all_daos() public view returns (string[] memory) {\\n        //Getting all doas\\n        string[] memory _StoreInfo = new string[](_dao_ids);\\n        for (uint256 i = 0; i < _dao_ids; i++) {\\n            _StoreInfo[i] = _dao_uris[i].dao_uri;\\n        }\\n\\n        return _StoreInfo;\\n    }\\n\\n\\n    function dao_uri(uint256 _dao_id) public view returns (string memory) {\\n        //Getting one dao URI\\n        return _dao_uris[_dao_id].dao_uri;\\n    }\\n\\n    //Goals\\n    function create_goal(string memory _goal_uri, uint256 _dao_id) public returns (uint256)\\n    {\\n        //Create goal into _goal_uris\\n        _goal_uris[_goal_ids] = goal_uri_struct(_dao_id, _goal_uri);\\n        _goal_ids++;\\n\\n        return _goal_ids;\\n    }\\n\\n    function set_goal(uint256 _goal_id, string memory _goal_uri) public {\\n        //Set goal uri\\n        _goal_uris[_goal_id].goal_uri = _goal_uri;\\n    }\\n\\n    function get_all_goals() public view returns (string[] memory) {\\n        //Getting all goals\\n        string[] memory _StoreInfo = new string[](_goal_ids);\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\n            _StoreInfo[i] = _goal_uris[i].goal_uri;\\n        }\\n\\n        return _StoreInfo;\\n    }\\n\\n    function get_all_goals_by_dao_id(uint256 _dao_id) public view returns (string[] memory) {\\n        //Getting all goals by dao id\\n        string[] memory _StoreInfo = new string[](_goal_ids);\\n        uint256 _store_id;\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\n          if (_goal_uris[i].dao_id == _dao_id){\\n            _StoreInfo[_store_id] = _goal_uris[i].goal_uri;\\n            _store_id++;\\n          }\\n        }\\n\\n        return _StoreInfo;\\n    }\\n\\n    \\n    function get_goal_id_by_goal_uri(string memory _goal_uri) public view returns (uint256) {\\n        //Getting goal id by uri\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\n          if (keccak256(bytes(_goal_uris[i].goal_uri)) == keccak256(bytes(_goal_uri))) return  i;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function goal_uri(uint256 _goal_id) public view returns (string memory) {\\n        //Getting one goal URI\\n        return _goal_uris[_goal_id].goal_uri;\\n    }\\n\\n\\n    //Ideas\\n    function create_ideas(address _claimer,string memory _ideas_uri, uint256 _goal_id) public returns (uint256)\\n    {\\n        _safeMint(_claimer, _ideas_ids);\\n        //Create ideas into _ideas_uris\\n        _ideas_uris[_ideas_ids] = ideas_uri_struct(_goal_id, _ideas_uri);\\n        _ideas_ids++;\\n\\n        return _ideas_ids;\\n    }\\n\\n    function set_ideas(uint256 _ideas_id, string memory _ideas_uri) public {\\n        //Set ideas uri\\n        _ideas_uris[_ideas_id].ideas_uri = _ideas_uri;\\n    }\\n\\n    function get_all_ideas() public view returns (string[] memory) {\\n        //Getting all ideas\\n        string[] memory _StoreInfo = new string[](_ideas_ids);\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\n            _StoreInfo[i] = _ideas_uris[i].ideas_uri;\\n        }\\n\\n        return _StoreInfo;\\n    }\\n\\n    function get_all_ideas_by_goal_id(uint256 _goal_id) public view returns (string[] memory) {\\n        //Getting all ideas by goal id\\n        string[] memory _StoreInfo = new string[](_ideas_ids);        \\n        uint256 _store_id;\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\n          if (_ideas_uris[i].goal_id == _goal_id)\\n            _StoreInfo[_store_id] = _ideas_uris[i].ideas_uri;\\n            _store_id++;\\n        }\\n\\n        return _StoreInfo;\\n    }\\n\\n    \\n    function get_ideas_id_by_ideas_uri(string memory _ideas_uri) public view returns (uint256) {\\n        //Getting ideas id by uri\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\n          if (keccak256(bytes(_ideas_uris[i].ideas_uri)) == keccak256(bytes(_ideas_uri))) return  i;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function get_goal_id_from_ideas_uri(string memory _ideas_uri) public view returns (uint256) {\\n     //Getting ideas id by uri\\n     for (uint256 i = 0; i < _ideas_ids; i++) {\\n       if (keccak256(bytes(_ideas_uris[i].ideas_uri)) == keccak256(bytes(_ideas_uri))) return  _ideas_uris[i].goal_id;\\n     }\\n\\n     return 0;\\n    }\\n\\n\\n    function ideas_uri(uint256 _ideas_id) public view returns (string memory) {\\n        //Getting one ideas URI\\n        return _ideas_uris[_ideas_id].ideas_uri;\\n    }\\n\\n\\n    //Votes\\n    function create_goal_ideas_vote(uint256 _goal_id, uint256 _ideas_id,string memory _wallet) public returns (uint256)\\n    {\\n        //Create votes into all_goal_ideas_votes\\n        all_goal_ideas_votes[_ideas_vote_ids] = goal_ideas_votes_struct(_goal_id, _ideas_id,_wallet);\\n        _ideas_vote_ids++;\\n\\n        return _ideas_vote_ids;\\n    }\\n\\n\\n   function get_ideas_votes_from_goal(uint256 _goal_id, uint256 _ideas_id) public view returns (string[] memory)\\n    {\\n        //gets all ideas votes from goal\\n        string[] memory _StoreInfo = new string[](_ideas_vote_ids);\\n        uint256 _store_id;\\n        for (uint256 i = 0; i < _ideas_vote_ids; i++) {\\n          if (all_goal_ideas_votes[i].goal_id == _goal_id && all_goal_ideas_votes[i].ideas_id == _ideas_id )\\n            _StoreInfo[_store_id] = all_goal_ideas_votes[i].wallet;\\n            _store_id++;\\n        }\\n        return _StoreInfo;\\n    }\\n\\n    function reset_all() public {\\n      _dao_ids = 0;\\n      _goal_ids = 0;\\n      _ideas_ids = 0;\\n      _ideas_vote_ids = 0;\\n      for (uint256 i = 0; i < _dao_ids; i++)            delete _dao_uris[i];\\n      for (uint256 i = 0; i < _goal_ids; i++)           delete _goal_uris[i];\\n      for (uint256 i = 0; i < _ideas_ids; i++)          delete _ideas_uris[i];\\n      for (uint256 i = 0; i < _ideas_vote_ids; i++)     delete all_goal_ideas_votes[i];    \\n\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5554b4fbcd5da70e4c730dce636a7f484a40a75988b89c5a4a6bec9426981199\",\"license\":\"MIT\"},\"contracts/extensions/IONFT721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./IONFT721Core.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ONFT standard\\r\\n */\\r\\ninterface IONFT721 is  IERC721 {\\r\\n\\r\\n}\",\"keccak256\":\"0x2c1f30d929b11b655c27689e626e5bae376a0d57759467c9ff9ed9811b84cfa6\",\"license\":\"MIT\"},\"contracts/extensions/IONFT721Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ONFT Core standard\\r\\n */\\r\\ninterface IONFT721Core is IERC165 {\\r\\n    /**\\r\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\r\\n     * _dstChainId - L0 defined chain id to send tokens too\\r\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\r\\n     * _tokenId - token Id to transfer\\r\\n     * _useZro - indicates to use zro to pay L0 fees\\r\\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\\r\\n     */\\r\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n    /**\\r\\n     * @dev send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from`\\r\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\r\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\r\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\r\\n     */\\r\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\r\\n     * `_nonce` is the outbound nonce from\\r\\n     */\\r\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes indexed _toAddress, uint _tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce.\\r\\n     */\\r\\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _tokenId);\\r\\n}\",\"keccak256\":\"0x1d2a925823f56ce4715702a7c01473bd17eb97d7ea1922b74c36e2631c20daac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c806382fcc73211610125578063b88d4fde116100ad578063c4c2e3641161007c578063c4c2e364146106d6578063c87b56dd14610706578063d00b0e7e14610736578063e32acc1a14610766578063e985e9c5146107965761021c565b8063b88d4fde14610664578063c04e743014610680578063c04fe9781461069c578063c29595c5146106ba5761021c565b806397ee7606116100f457806397ee7606146105c0578063a1ca9178146105de578063a22cb4651461060e578063aa4cdf2a1461062a578063b16060a61461065a5761021c565b806382fcc73214610526578063881de858146105565780638d3d25951461057257806395d89b41146105a25761021c565b806327a568b9116101a85780634be7adb5116101775780634be7adb5146104365780635d907da1146104665780636352211e1461049657806370a08231146104c657806371085cab146104f65761021c565b806327a568b91461039957806329b56f60146103cb57806342842e0e146103e9578063468d0c80146104055761021c565b8063109ac970116101ef578063109ac970146102bb578063131d44f2146102eb5780631ba44c4c1461031b5780631e9ac9f51461034d57806323b872dd1461037d5761021c565b806301ffc9a71461022157806306fdde0314610251578063081812fc1461026f578063095ea7b31461029f575b600080fd5b61023b60048036038101906102369190613511565b6107c6565b6040516102489190613ca1565b60405180910390f35b6102596108a8565b6040516102669190613cbc565b60405180910390f35b61028960048036038101906102849190613688565b61093a565b6040516102969190613c18565b60405180910390f35b6102b960048036038101906102b491906134d1565b610980565b005b6102d560048036038101906102d09190613688565b610a98565b6040516102e29190613c7f565b60405180910390f35b61030560048036038101906103009190613688565b610c08565b6040516103129190613c7f565b60405180910390f35b61033560048036038101906103309190613688565b610d78565b60405161034493929190613ed5565b60405180910390f35b6103676004803603810190610362919061356b565b610e2a565b6040516103749190613e8a565b60405180910390f35b6103976004803603810190610392919061334c565b610e9c565b005b6103b360048036038101906103ae9190613688565b610efc565b6040516103c293929190613cde565b60405180910390f35b6103d36110be565b6040516103e09190613c7f565b60405180910390f35b61040360048036038101906103fe919061334c565b6111f9565b005b61041f600480360381019061041a9190613688565b611219565b60405161042d929190613ea5565b60405180910390f35b610450600480360381019061044b919061379c565b6112c5565b60405161045d9190613c7f565b60405180910390f35b610480600480360381019061047b9190613688565b611457565b60405161048d9190613cbc565b60405180910390f35b6104b060048036038101906104ab9190613688565b6114ff565b6040516104bd9190613c18565b60405180910390f35b6104e060048036038101906104db91906132df565b611586565b6040516104ed9190613e8a565b60405180910390f35b610510600480360381019061050b919061362c565b61163e565b60405161051d9190613e8a565b60405180910390f35b610540600480360381019061053b91906137dc565b6116b7565b60405161054d9190613e8a565b60405180910390f35b610570600480360381019061056b9190613711565b611741565b005b61058c60048036038101906105879190613688565b61179c565b6040516105999190613cbc565b60405180910390f35b6105aa611844565b6040516105b79190613cbc565b60405180910390f35b6105c86118d6565b6040516105d59190613c7f565b60405180910390f35b6105f860048036038101906105f3919061356b565b611a11565b6040516106059190613e8a565b60405180910390f35b61062860048036038101906106239190613422565b611a83565b005b610644600480360381019061063f919061356b565b611a99565b6040516106519190613e8a565b60405180910390f35b610662611b21565b005b61067e6004803603810190610679919061339f565b611c9f565b005b61069a600480360381019061069591906136b5565b611d01565b005b6106a4611d30565b6040516106b19190613c7f565b60405180910390f35b6106d460048036038101906106cf91906136b5565b611e6b565b005b6106f060048036038101906106eb91906135b4565b611e9a565b6040516106fd9190613e8a565b60405180910390f35b610720600480360381019061071b9190613688565b611f7e565b60405161072d9190613cbc565b60405180910390f35b610750600480360381019061074b9190613462565b611fe6565b60405161075d9190613e8a565b60405180910390f35b610780600480360381019061077b9190613688565b61206c565b60405161078d9190613cbc565b60405180910390f35b6107b060048036038101906107ab919061330c565b612114565b6040516107bd9190613ca1565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061089157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806108a157506108a0826121a8565b5b9050919050565b6060600080546108b790614187565b80601f01602080910402602001604051908101604052809291908181526020018280546108e390614187565b80156109305780601f1061090557610100808354040283529160200191610930565b820191906000526020600020905b81548152906001019060200180831161091357829003601f168201915b5050505050905090565b600061094582612212565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061098b826114ff565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f390613e4a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610a1b61225d565b73ffffffffffffffffffffffffffffffffffffffff161480610a4a5750610a4981610a4461225d565b612114565b5b610a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8090613e6a565b60405180910390fd5b610a938383612265565b505050565b6060600060075467ffffffffffffffff811115610ab857610ab76142ef565b5b604051908082528060200260200182016040528015610aeb57816020015b6060815260200190600190039081610ad65790505b509050600080600090505b600754811015610bfd5784600b6000838152602001908152602001600020600001541415610bea57600b60008281526020019081526020016000206001018054610b3f90614187565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6b90614187565b8015610bb85780601f10610b8d57610100808354040283529160200191610bb8565b820191906000526020600020905b815481529060010190602001808311610b9b57829003601f168201915b5050505050838381518110610bd057610bcf6142c0565b5b60200260200101819052508180610be6906141ea565b9250505b8080610bf5906141ea565b915050610af6565b508192505050919050565b6060600060085467ffffffffffffffff811115610c2857610c276142ef565b5b604051908082528060200260200182016040528015610c5b57816020015b6060815260200190600190039081610c465790505b509050600080600090505b600854811015610d6d5784600c6000838152602001908152602001600020600001541415610d4c57600c60008281526020019081526020016000206001018054610caf90614187565b80601f0160208091040260200160405190810160405280929190818152602001828054610cdb90614187565b8015610d285780601f10610cfd57610100808354040283529160200191610d28565b820191906000526020600020905b815481529060010190602001808311610d0b57829003601f168201915b5050505050838381518110610d4057610d3f6142c0565b5b60200260200101819052505b8180610d57906141ea565b9250508080610d65906141ea565b915050610c66565b508192505050919050565b600d602052806000526040600020600091509050806000015490806001015490806002018054610da790614187565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd390614187565b8015610e205780601f10610df557610100808354040283529160200191610e20565b820191906000526020600020905b815481529060010190602001808311610e0357829003601f168201915b5050505050905083565b600080600090505b600754811015610e91578280519060200120600b6000838152602001908152602001600020600101604051610e679190613bdd565b60405180910390201415610e7e5780915050610e97565b8080610e89906141ea565b915050610e32565b50600090505b919050565b610ead610ea761225d565b8261231e565b610eec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee390613d2a565b60405180910390fd5b610ef78383836123b3565b505050565b600a602052806000526040600020600091509050806000018054610f1f90614187565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4b90614187565b8015610f985780601f10610f6d57610100808354040283529160200191610f98565b820191906000526020600020905b815481529060010190602001808311610f7b57829003601f168201915b505050505090806001018054610fad90614187565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd990614187565b80156110265780601f10610ffb57610100808354040283529160200191611026565b820191906000526020600020905b81548152906001019060200180831161100957829003601f168201915b50505050509080600201805461103b90614187565b80601f016020809104026020016040519081016040528092919081815260200182805461106790614187565b80156110b45780601f10611089576101008083540402835291602001916110b4565b820191906000526020600020905b81548152906001019060200180831161109757829003601f168201915b5050505050905083565b6060600060075467ffffffffffffffff8111156110de576110dd6142ef565b5b60405190808252806020026020018201604052801561111157816020015b60608152602001906001900390816110fc5790505b50905060005b6007548110156111f157600b6000828152602001908152602001600020600101805461114290614187565b80601f016020809104026020016040519081016040528092919081815260200182805461116e90614187565b80156111bb5780601f10611190576101008083540402835291602001916111bb565b820191906000526020600020905b81548152906001019060200180831161119e57829003601f168201915b50505050508282815181106111d3576111d26142c0565b5b602002602001018190525080806111e9906141ea565b915050611117565b508091505090565b61121483838360405180602001604052806000815250611c9f565b505050565b600c60205280600052604060002060009150905080600001549080600101805461124290614187565b80601f016020809104026020016040519081016040528092919081815260200182805461126e90614187565b80156112bb5780601f10611290576101008083540402835291602001916112bb565b820191906000526020600020905b81548152906001019060200180831161129e57829003601f168201915b5050505050905082565b6060600060095467ffffffffffffffff8111156112e5576112e46142ef565b5b60405190808252806020026020018201604052801561131857816020015b60608152602001906001900390816113035790505b509050600080600090505b60095481101561144b5785600d600083815260200190815260200160002060000154148015611367575084600d600083815260200190815260200160002060010154145b1561142a57600d6000828152602001908152602001600020600201805461138d90614187565b80601f01602080910402602001604051908101604052809291908181526020018280546113b990614187565b80156114065780601f106113db57610100808354040283529160200191611406565b820191906000526020600020905b8154815290600101906020018083116113e957829003601f168201915b505050505083838151811061141e5761141d6142c0565b5b60200260200101819052505b8180611435906141ea565b9250508080611443906141ea565b915050611323565b50819250505092915050565b6060600a6000838152602001908152602001600020600101805461147a90614187565b80601f01602080910402602001604051908101604052809291908181526020018280546114a690614187565b80156114f35780601f106114c8576101008083540402835291602001916114f3565b820191906000526020600020905b8154815290600101906020018083116114d657829003601f168201915b50505050509050919050565b60008061150b836126ad565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561157d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157490613e2a565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ee90613dea565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000604051806040016040528083815260200184815250600b600060075481526020019081526020016000206000820151816000015560208201518160010190805190602001906116909291906130b3565b50905050600760008154809291906116a7906141ea565b9190505550600754905092915050565b6000604051806060016040528085815260200184815260200183815250600d60006009548152602001908152602001600020600082015181600001556020820151816001015560408201518160020190805190602001906117199291906130b3565b5090505060096000815480929190611730906141ea565b919050555060095490509392505050565b81600a6000858152602001908152602001600020600001908051906020019061176b9291906130b3565b5080600a600085815260200190815260200160002060010190805190602001906117969291906130b3565b50505050565b6060600c600083815260200190815260200160002060010180546117bf90614187565b80601f01602080910402602001604051908101604052809291908181526020018280546117eb90614187565b80156118385780601f1061180d57610100808354040283529160200191611838565b820191906000526020600020905b81548152906001019060200180831161181b57829003601f168201915b50505050509050919050565b60606001805461185390614187565b80601f016020809104026020016040519081016040528092919081815260200182805461187f90614187565b80156118cc5780601f106118a1576101008083540402835291602001916118cc565b820191906000526020600020905b8154815290600101906020018083116118af57829003601f168201915b5050505050905090565b6060600060085467ffffffffffffffff8111156118f6576118f56142ef565b5b60405190808252806020026020018201604052801561192957816020015b60608152602001906001900390816119145790505b50905060005b600854811015611a0957600c6000828152602001908152602001600020600101805461195a90614187565b80601f016020809104026020016040519081016040528092919081815260200182805461198690614187565b80156119d35780601f106119a8576101008083540402835291602001916119d3565b820191906000526020600020905b8154815290600101906020018083116119b657829003601f168201915b50505050508282815181106119eb576119ea6142c0565b5b60200260200101819052508080611a01906141ea565b91505061192f565b508091505090565b600080600090505b600854811015611a78578280519060200120600c6000838152602001908152602001600020600101604051611a4e9190613bdd565b60405180910390201415611a655780915050611a7e565b8080611a70906141ea565b915050611a19565b50600090505b919050565b611a95611a8e61225d565b83836126ea565b5050565b600080600090505b600854811015611b16578280519060200120600c6000838152602001908152602001600020600101604051611ad69190613bdd565b60405180910390201415611b0357600c600082815260200190815260200160002060000154915050611b1c565b8080611b0e906141ea565b915050611aa1565b50600090505b919050565b600060068190555060006007819055506000600881905550600060098190555060005b600654811015611ba757600a600082815260200190815260200160002060008082016000611b729190613139565b600182016000611b829190613139565b600282016000611b929190613139565b50508080611b9f906141ea565b915050611b44565b5060005b600754811015611bf657600b6000828152602001908152602001600020600080820160009055600182016000611be19190613139565b50508080611bee906141ea565b915050611bab565b5060005b600854811015611c4557600c6000828152602001908152602001600020600080820160009055600182016000611c309190613139565b50508080611c3d906141ea565b915050611bfa565b5060005b600954811015611c9c57600d60008281526020019081526020016000206000808201600090556001820160009055600282016000611c879190613139565b50508080611c94906141ea565b915050611c49565b50565b611cb0611caa61225d565b8361231e565b611cef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce690613d2a565b60405180910390fd5b611cfb84848484612857565b50505050565b80600c60008481526020019081526020016000206001019080519060200190611d2b9291906130b3565b505050565b6060600060065467ffffffffffffffff811115611d5057611d4f6142ef565b5b604051908082528060200260200182016040528015611d8357816020015b6060815260200190600190039081611d6e5790505b50905060005b600654811015611e6357600a60008281526020019081526020016000206001018054611db490614187565b80601f0160208091040260200160405190810160405280929190818152602001828054611de090614187565b8015611e2d5780601f10611e0257610100808354040283529160200191611e2d565b820191906000526020600020905b815481529060010190602001808311611e1057829003601f168201915b5050505050828281518110611e4557611e446142c0565b5b60200260200101819052508080611e5b906141ea565b915050611d89565b508091505090565b80600b60008481526020019081526020016000206001019080519060200190611e959291906130b3565b505050565b600060405180606001604052808481526020018381526020016040518060400160405280600581526020017f46616c7365000000000000000000000000000000000000000000000000000000815250815250600a600060065481526020019081526020016000206000820151816000019080519060200190611f1d9291906130b3565b506020820151816001019080519060200190611f3a9291906130b3565b506040820151816002019080519060200190611f579291906130b3565b5090505060066000815480929190611f6e906141ea565b9190505550600654905092915050565b6060611f8982612212565b6000611f936128b3565b90506000815111611fb35760405180602001604052806000815250611fde565b80611fbd846128ca565b604051602001611fce929190613bf4565b6040516020818303038152906040525b915050919050565b6000611ff4846008546129a2565b604051806040016040528083815260200184815250600c600060085481526020019081526020016000206000820151816000015560208201518160010190805190602001906120449291906130b3565b509050506008600081548092919061205b906141ea565b919050555060085490509392505050565b6060600b6000838152602001908152602001600020600101805461208f90614187565b80601f01602080910402602001604051908101604052809291908181526020018280546120bb90614187565b80156121085780601f106120dd57610100808354040283529160200191612108565b820191906000526020600020905b8154815290600101906020018083116120eb57829003601f168201915b50505050509050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61221b816129c0565b61225a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225190613e2a565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166122d8836114ff565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061232a836114ff565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061236c575061236b8185612114565b5b806123aa57508373ffffffffffffffffffffffffffffffffffffffff166123928461093a565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166123d3826114ff565b73ffffffffffffffffffffffffffffffffffffffff1614612429576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242090613d6a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249090613daa565b60405180910390fd5b6124a68383836001612a01565b8273ffffffffffffffffffffffffffffffffffffffff166124c6826114ff565b73ffffffffffffffffffffffffffffffffffffffff161461251c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251390613d6a565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46126a88383836001612b27565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612759576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275090613dca565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161284a9190613ca1565b60405180910390a3505050565b6128628484846123b3565b61286e84848484612b2d565b6128ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a490613d4a565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060600060016128d984612cc4565b01905060008167ffffffffffffffff8111156128f8576128f76142ef565b5b6040519080825280601f01601f19166020018201604052801561292a5781602001600182028036833780820191505090505b509050600082602001820190505b600115612997578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161298157612980614262565b5b049450600085141561299257612997565b612938565b819350505050919050565b6129bc828260405180602001604052806000815250612e17565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff166129e2836126ad565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6001811115612b2157600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612a955780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a8d919061409d565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612b205780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b189190614047565b925050819055505b5b50505050565b50505050565b6000612b4e8473ffffffffffffffffffffffffffffffffffffffff16612e72565b15612cb7578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612b7761225d565b8786866040518563ffffffff1660e01b8152600401612b999493929190613c33565b602060405180830381600087803b158015612bb357600080fd5b505af1925050508015612be457506040513d601f19601f82011682018060405250810190612be1919061353e565b60015b612c67573d8060008114612c14576040519150601f19603f3d011682016040523d82523d6000602084013e612c19565b606091505b50600081511415612c5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c5690613d4a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612cbc565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612d22577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612d1857612d17614262565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612d5f576d04ee2d6d415b85acef81000000008381612d5557612d54614262565b5b0492506020810190505b662386f26fc100008310612d8e57662386f26fc100008381612d8457612d83614262565b5b0492506010810190505b6305f5e1008310612db7576305f5e1008381612dad57612dac614262565b5b0492506008810190505b6127108310612ddc576127108381612dd257612dd1614262565b5b0492506004810190505b60648310612dff5760648381612df557612df4614262565b5b0492506002810190505b600a8310612e0e576001810190505b80915050919050565b612e218383612e95565b612e2e6000848484612b2d565b612e6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e6490613d4a565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612f05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612efc90613e0a565b60405180910390fd5b612f0e816129c0565b15612f4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4590613d8a565b60405180910390fd5b612f5c600083836001612a01565b612f65816129c0565b15612fa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f9c90613d8a565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46130af600083836001612b27565b5050565b8280546130bf90614187565b90600052602060002090601f0160209004810192826130e15760008555613128565b82601f106130fa57805160ff1916838001178555613128565b82800160010185558215613128579182015b8281111561312757825182559160200191906001019061310c565b5b5090506131359190613179565b5090565b50805461314590614187565b6000825580601f106131575750613176565b601f0160209004906000526020600020908101906131759190613179565b5b50565b5b8082111561319257600081600090555060010161317a565b5090565b60006131a96131a484613f38565b613f13565b9050828152602081018484840111156131c5576131c4614323565b5b6131d0848285614145565b509392505050565b60006131eb6131e684613f69565b613f13565b90508281526020810184848401111561320757613206614323565b5b613212848285614145565b509392505050565b60008135905061322981614610565b92915050565b60008135905061323e81614627565b92915050565b6000813590506132538161463e565b92915050565b6000815190506132688161463e565b92915050565b600082601f8301126132835761328261431e565b5b8135613293848260208601613196565b91505092915050565b600082601f8301126132b1576132b061431e565b5b81356132c18482602086016131d8565b91505092915050565b6000813590506132d981614655565b92915050565b6000602082840312156132f5576132f461432d565b5b60006133038482850161321a565b91505092915050565b600080604083850312156133235761332261432d565b5b60006133318582860161321a565b92505060206133428582860161321a565b9150509250929050565b6000806000606084860312156133655761336461432d565b5b60006133738682870161321a565b93505060206133848682870161321a565b9250506040613395868287016132ca565b9150509250925092565b600080600080608085870312156133b9576133b861432d565b5b60006133c78782880161321a565b94505060206133d88782880161321a565b93505060406133e9878288016132ca565b925050606085013567ffffffffffffffff81111561340a57613409614328565b5b6134168782880161326e565b91505092959194509250565b600080604083850312156134395761343861432d565b5b60006134478582860161321a565b92505060206134588582860161322f565b9150509250929050565b60008060006060848603121561347b5761347a61432d565b5b60006134898682870161321a565b935050602084013567ffffffffffffffff8111156134aa576134a9614328565b5b6134b68682870161329c565b92505060406134c7868287016132ca565b9150509250925092565b600080604083850312156134e8576134e761432d565b5b60006134f68582860161321a565b9250506020613507858286016132ca565b9150509250929050565b6000602082840312156135275761352661432d565b5b600061353584828501613244565b91505092915050565b6000602082840312156135545761355361432d565b5b600061356284828501613259565b91505092915050565b6000602082840312156135815761358061432d565b5b600082013567ffffffffffffffff81111561359f5761359e614328565b5b6135ab8482850161329c565b91505092915050565b600080604083850312156135cb576135ca61432d565b5b600083013567ffffffffffffffff8111156135e9576135e8614328565b5b6135f58582860161329c565b925050602083013567ffffffffffffffff81111561361657613615614328565b5b6136228582860161329c565b9150509250929050565b600080604083850312156136435761364261432d565b5b600083013567ffffffffffffffff81111561366157613660614328565b5b61366d8582860161329c565b925050602061367e858286016132ca565b9150509250929050565b60006020828403121561369e5761369d61432d565b5b60006136ac848285016132ca565b91505092915050565b600080604083850312156136cc576136cb61432d565b5b60006136da858286016132ca565b925050602083013567ffffffffffffffff8111156136fb576136fa614328565b5b6137078582860161329c565b9150509250929050565b60008060006060848603121561372a5761372961432d565b5b6000613738868287016132ca565b935050602084013567ffffffffffffffff81111561375957613758614328565b5b6137658682870161329c565b925050604084013567ffffffffffffffff81111561378657613785614328565b5b6137928682870161329c565b9150509250925092565b600080604083850312156137b3576137b261432d565b5b60006137c1858286016132ca565b92505060206137d2858286016132ca565b9150509250929050565b6000806000606084860312156137f5576137f461432d565b5b6000613803868287016132ca565b9350506020613814868287016132ca565b925050604084013567ffffffffffffffff81111561383557613834614328565b5b6138418682870161329c565b9150509250925092565b600061385783836139aa565b905092915050565b613868816140d1565b82525050565b600061387982613fbf565b6138838185613fed565b93508360208202850161389585613f9a565b8060005b858110156138d157848403895281516138b2858261384b565b94506138bd83613fe0565b925060208a01995050600181019050613899565b50829750879550505050505092915050565b6138ec816140e3565b82525050565b60006138fd82613fca565b6139078185613ffe565b9350613917818560208601614154565b61392081614332565b840191505092915050565b6000815461393881614187565b613942818661400f565b9450600182166000811461395d576001811461396e576139a1565b60ff198316865281860193506139a1565b61397785613faa565b60005b838110156139995781548189015260018201915060208101905061397a565b838801955050505b50505092915050565b60006139b582613fd5565b6139bf818561401a565b93506139cf818560208601614154565b6139d881614332565b840191505092915050565b60006139ee82613fd5565b6139f8818561402b565b9350613a08818560208601614154565b613a1181614332565b840191505092915050565b6000613a2782613fd5565b613a31818561403c565b9350613a41818560208601614154565b80840191505092915050565b6000613a5a602d8361402b565b9150613a6582614343565b604082019050919050565b6000613a7d60328361402b565b9150613a8882614392565b604082019050919050565b6000613aa060258361402b565b9150613aab826143e1565b604082019050919050565b6000613ac3601c8361402b565b9150613ace82614430565b602082019050919050565b6000613ae660248361402b565b9150613af182614459565b604082019050919050565b6000613b0960198361402b565b9150613b14826144a8565b602082019050919050565b6000613b2c60298361402b565b9150613b37826144d1565b604082019050919050565b6000613b4f60208361402b565b9150613b5a82614520565b602082019050919050565b6000613b7260188361402b565b9150613b7d82614549565b602082019050919050565b6000613b9560218361402b565b9150613ba082614572565b604082019050919050565b6000613bb8603d8361402b565b9150613bc3826145c1565b604082019050919050565b613bd78161413b565b82525050565b6000613be9828461392b565b915081905092915050565b6000613c008285613a1c565b9150613c0c8284613a1c565b91508190509392505050565b6000602082019050613c2d600083018461385f565b92915050565b6000608082019050613c48600083018761385f565b613c55602083018661385f565b613c626040830185613bce565b8181036060830152613c7481846138f2565b905095945050505050565b60006020820190508181036000830152613c99818461386e565b905092915050565b6000602082019050613cb660008301846138e3565b92915050565b60006020820190508181036000830152613cd681846139e3565b905092915050565b60006060820190508181036000830152613cf881866139e3565b90508181036020830152613d0c81856139e3565b90508181036040830152613d2081846139e3565b9050949350505050565b60006020820190508181036000830152613d4381613a4d565b9050919050565b60006020820190508181036000830152613d6381613a70565b9050919050565b60006020820190508181036000830152613d8381613a93565b9050919050565b60006020820190508181036000830152613da381613ab6565b9050919050565b60006020820190508181036000830152613dc381613ad9565b9050919050565b60006020820190508181036000830152613de381613afc565b9050919050565b60006020820190508181036000830152613e0381613b1f565b9050919050565b60006020820190508181036000830152613e2381613b42565b9050919050565b60006020820190508181036000830152613e4381613b65565b9050919050565b60006020820190508181036000830152613e6381613b88565b9050919050565b60006020820190508181036000830152613e8381613bab565b9050919050565b6000602082019050613e9f6000830184613bce565b92915050565b6000604082019050613eba6000830185613bce565b8181036020830152613ecc81846139e3565b90509392505050565b6000606082019050613eea6000830186613bce565b613ef76020830185613bce565b8181036040830152613f0981846139e3565b9050949350505050565b6000613f1d613f2e565b9050613f2982826141b9565b919050565b6000604051905090565b600067ffffffffffffffff821115613f5357613f526142ef565b5b613f5c82614332565b9050602081019050919050565b600067ffffffffffffffff821115613f8457613f836142ef565b5b613f8d82614332565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006140528261413b565b915061405d8361413b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561409257614091614233565b5b828201905092915050565b60006140a88261413b565b91506140b38361413b565b9250828210156140c6576140c5614233565b5b828203905092915050565b60006140dc8261411b565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614172578082015181840152602081019050614157565b83811115614181576000848401525b50505050565b6000600282049050600182168061419f57607f821691505b602082108114156141b3576141b2614291565b5b50919050565b6141c282614332565b810181811067ffffffffffffffff821117156141e1576141e06142ef565b5b80604052505050565b60006141f58261413b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561422857614227614233565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b614619816140d1565b811461462457600080fd5b50565b614630816140e3565b811461463b57600080fd5b50565b614647816140ef565b811461465257600080fd5b50565b61465e8161413b565b811461466957600080fd5b5056fea264697066735822122063e2094feab09cc16daec3aea4d022d5b4aa52cd81e877fef01231987e9fee8164736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2580,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_dao_ids",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2582,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_goal_ids",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2584,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_ideas_ids",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2586,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_ideas_vote_ids",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2591,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_dao_uris",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(dao_uri_struct)2561_storage)"
      },
      {
        "astId": 2596,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_goal_uris",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(goal_uri_struct)2566_storage)"
      },
      {
        "astId": 2601,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_ideas_uris",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(ideas_uri_struct)2571_storage)"
      },
      {
        "astId": 2606,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "all_goal_ideas_votes",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(goal_ideas_votes_struct)2578_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(dao_uri_struct)2561_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.dao_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(dao_uri_struct)2561_storage"
      },
      "t_mapping(t_uint256,t_struct(goal_ideas_votes_struct)2578_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.goal_ideas_votes_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(goal_ideas_votes_struct)2578_storage"
      },
      "t_mapping(t_uint256,t_struct(goal_uri_struct)2566_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.goal_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(goal_uri_struct)2566_storage"
      },
      "t_mapping(t_uint256,t_struct(ideas_uri_struct)2571_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.ideas_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(ideas_uri_struct)2571_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(dao_uri_struct)2561_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.dao_uri_struct",
        "members": [
          {
            "astId": 2556,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "dao_wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2558,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "dao_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2560,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "finished",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(goal_ideas_votes_struct)2578_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.goal_ideas_votes_struct",
        "members": [
          {
            "astId": 2573,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "goal_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2575,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2577,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "wallet",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(goal_uri_struct)2566_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.goal_uri_struct",
        "members": [
          {
            "astId": 2563,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "dao_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2565,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "goal_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ideas_uri_struct)2571_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.ideas_uri_struct",
        "members": [
          {
            "astId": 2568,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "goal_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2570,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "ideas_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}