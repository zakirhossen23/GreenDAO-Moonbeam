{
  "address": "0x16141fa5E89Bfa2Df2cf4A0033E49cD20C4dCF86",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dao_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dao_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "finished",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_ideas_uris",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "goal_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ideas_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "donation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_smart_contracts_uris",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "smart_contract_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "smart_contract_uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_doantion",
          "type": "uint256"
        }
      ],
      "name": "add_donation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_goal_ideas_votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "wallet",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_uri",
          "type": "string"
        }
      ],
      "name": "create_dao",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        }
      ],
      "name": "create_goal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_wallet",
          "type": "string"
        }
      ],
      "name": "create_goal_ideas_vote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "_smart_contracts",
          "type": "string[]"
        }
      ],
      "name": "create_ideas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        }
      ],
      "name": "dao_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_daos",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_goals",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        }
      ],
      "name": "get_all_goals_by_dao_id",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_ideas",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        }
      ],
      "name": "get_all_ideas_by_goal_id",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        }
      ],
      "name": "get_goal_id_by_goal_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "get_goal_id_from_ideas_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "get_ideas_id_by_ideas_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        }
      ],
      "name": "get_ideas_votes_from_goal",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        }
      ],
      "name": "goal_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        }
      ],
      "name": "ideas_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset_all",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_uri",
          "type": "string"
        }
      ],
      "name": "set_dao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        }
      ],
      "name": "set_goal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "set_ideas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6af316332599ada446ef3a991346328e56a7e8f1fa4cd871bb81ce02ae868d4d",
  "receipt": {
    "to": null,
    "from": "0x32F48d18db5A63D3345Eaee9d9C326a2cC647B80",
    "contractAddress": "0x16141fa5E89Bfa2Df2cf4A0033E49cD20C4dCF86",
    "transactionIndex": 0,
    "gasUsed": "4569487",
    "logsBloom": "0x
    "blockHash": "0x149f37b7ba9dff7707dfeb857c329e5104309665af9c50d39e397515baf325d9",
    "transactionHash": "0x6af316332599ada446ef3a991346328e56a7e8f1fa4cd871bb81ce02ae868d4d",
    "logs": [],
    "blockNumber": 3372766,
    "cumulativeGasUsed": "4569487",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3c6e58be825638601320a40cbdc8d72f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dao_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dao_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"finished\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ideas_uris\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ideas_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_smart_contracts_uris\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"smart_contract_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"smart_contract_uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_doantion\",\"type\":\"uint256\"}],\"name\":\"add_donation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_goal_ideas_votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"wallet\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_uri\",\"type\":\"string\"}],\"name\":\"create_dao\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"create_goal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_wallet\",\"type\":\"string\"}],\"name\":\"create_goal_ideas_vote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_smart_contracts\",\"type\":\"string[]\"}],\"name\":\"create_ideas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"dao_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_daos\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_goals\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"get_all_goals_by_dao_id\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_ideas\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"get_all_ideas_by_goal_id\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"}],\"name\":\"get_goal_id_by_goal_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"get_goal_id_from_ideas_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"get_ideas_id_by_ideas_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"}],\"name\":\"get_ideas_votes_from_goal\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"goal_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"}],\"name\":\"ideas_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset_all\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_uri\",\"type\":\"string\"}],\"name\":\"set_dao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"}],\"name\":\"set_goal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"set_ideas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GreenDAO.sol\":\"GreenDAO\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x2a6a0b9fd2d316dcb4141159a9d13be92654066d6c0ae92757ed908ecdfecff0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x2c98457c4171d86094adf9a4fd8cd2402b7e3e309e961f07910a60a576dd100f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/GreenDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport {ERC721EnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\r\\n\\r\\ncontract GreenDAO  is ERC721EnumerableUpgradeable{\\r\\n\\r\\n    struct dao_uri_struct {\\r\\n        string dao_wallet;\\r\\n        string dao_uri;\\r\\n        string finished;\\r\\n    }\\r\\n    struct goal_uri_struct {\\r\\n        uint256 dao_id;\\r\\n        string goal_uri;\\r\\n    }\\r\\n\\r\\n    struct ideas_uri_struct {\\r\\n        uint256 goal_id;\\r\\n        string ideas_uri;\\r\\n        uint256 donation;\\r\\n    }\\r\\n    struct smart_contract_uri_struct {\\r\\n        uint256 smart_contract_id;\\r\\n        uint256 ideas_id;\\r\\n        string smart_contract_uri;\\r\\n    }\\r\\n    struct goal_ideas_votes_struct {\\r\\n        uint256 goal_id;\\r\\n        uint256 ideas_id;\\r\\n        string wallet;\\r\\n    }\\r\\n\\r\\n    uint256 private _dao_ids;\\r\\n    uint256 private _goal_ids;\\r\\n    uint256 private _ideas_ids;\\r\\n    uint256 private _smart_contract_ids;\\r\\n    uint256 private _ideas_vote_ids;\\r\\n    mapping(uint256 => dao_uri_struct) public _dao_uris;                            //_dao_ids              => (Dao)                    Dao Wallet + Dao URI   + Finished\\r\\n    mapping(uint256 => goal_uri_struct) private _goal_uris;                         //_goal_ids             => (Goal)                   Dao ID + Goal URI\\r\\n    mapping(uint256 => ideas_uri_struct) public _ideas_uris;                        //_ideas_ids            => (Ideas)                  Goal ID + Ideas URI\\r\\n    mapping(uint256 => smart_contract_uri_struct) public _smart_contracts_uris;     //_smart_contract_ids   => (Ideas Smart contract)   Goal ID + Ideas URI\\r\\n    mapping(uint256 => goal_ideas_votes_struct) public all_goal_ideas_votes;        //_ideas_vote_ids       => (Vote)                   Goal ID + Ideas ID + Wallet\\r\\n\\r\\n    \\r\\n\\r\\n    //Daos\\r\\n    function create_dao(string memory _dao_wallet, string memory _dao_uri)\\r\\n        public\\r\\n        returns (uint256)\\r\\n    {\\r\\n        //Create Dao into _dao_uris\\r\\n        _dao_uris[_dao_ids] = dao_uri_struct(_dao_wallet, _dao_uri, \\\"False\\\");\\r\\n        _dao_ids++;\\r\\n\\r\\n        return _dao_ids;\\r\\n    }\\r\\n\\r\\n    function set_dao(\\r\\n        uint256 _dao_id,\\r\\n        string memory _dao_wallet,\\r\\n        string memory _dao_uri\\r\\n    ) public {\\r\\n        //Set Dao of wallet and uri\\r\\n        _dao_uris[_dao_id].dao_wallet = _dao_wallet;\\r\\n        _dao_uris[_dao_id].dao_uri = _dao_uri;\\r\\n    }\\r\\n\\r\\n    function get_all_daos() public view returns (string[] memory) {\\r\\n        //Getting all doas\\r\\n        string[] memory _StoreInfo = new string[](_dao_ids);\\r\\n        for (uint256 i = 0; i < _dao_ids; i++) {\\r\\n            _StoreInfo[i] = _dao_uris[i].dao_uri;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n\\r\\n    function dao_uri(uint256 _dao_id) public view returns (string memory) {\\r\\n        //Getting one dao URI\\r\\n        return _dao_uris[_dao_id].dao_uri;\\r\\n    }\\r\\n\\r\\n    //Goals\\r\\n    function create_goal(string memory _goal_uri, uint256 _dao_id) public returns (uint256)\\r\\n    {\\r\\n        //Create goal into _goal_uris\\r\\n        _goal_uris[_goal_ids] = goal_uri_struct(_dao_id, _goal_uri);\\r\\n        _goal_ids++;\\r\\n\\r\\n        return _goal_ids;\\r\\n    }\\r\\n\\r\\n    function set_goal(uint256 _goal_id, string memory _goal_uri) public {\\r\\n        //Set goal uri\\r\\n        _goal_uris[_goal_id].goal_uri = _goal_uri;\\r\\n    }\\r\\n\\r\\n    function get_all_goals() public view returns (string[] memory) {\\r\\n        //Getting all goals\\r\\n        string[] memory _StoreInfo = new string[](_goal_ids);\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n            _StoreInfo[i] = _goal_uris[i].goal_uri;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function get_all_goals_by_dao_id(uint256 _dao_id) public view returns (string[] memory) {\\r\\n        //Getting all goals by dao id\\r\\n        string[] memory _StoreInfo = new string[](_goal_ids);\\r\\n        uint256 _store_id;\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n          if (_goal_uris[i].dao_id == _dao_id){\\r\\n            _StoreInfo[_store_id] = _goal_uris[i].goal_uri;\\r\\n            _store_id++;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function get_goal_id_by_goal_uri(string memory _goal_uri) public view returns (uint256) {\\r\\n        //Getting goal id by uri\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n          if (keccak256(bytes(_goal_uris[i].goal_uri)) == keccak256(bytes(_goal_uri))) return  i;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function goal_uri(uint256 _goal_id) public view returns (string memory) {\\r\\n        //Getting one goal URI\\r\\n        return _goal_uris[_goal_id].goal_uri;\\r\\n    }\\r\\n\\r\\n\\r\\n    //Ideas\\r\\n    function create_ideas(string memory _ideas_uri, uint256 _goal_id, string[] memory _smart_contracts) public returns (uint256)\\r\\n    {\\r\\n        //Create ideas into _ideas_uris\\r\\n        _ideas_uris[_ideas_ids] = ideas_uri_struct(_goal_id, _ideas_uri,0);\\r\\n        _ideas_ids++;\\r\\n\\r\\n        for  (uint256 i = 0; i < _smart_contracts.length; i++) {\\r\\n            create_ideas_smart_contract(_ideas_ids,_smart_contract_ids,_smart_contracts[i]);\\r\\n            _smart_contract_ids++;\\r\\n        }\\r\\n\\r\\n        return _ideas_ids;\\r\\n    }\\r\\n    function create_ideas_smart_contract(uint256 _ideas_id,uint256 _smart_contract_id ,string memory _smart_contract) private {\\r\\n        _smart_contracts_uris[_smart_contract_id] = smart_contract_uri_struct(_ideas_id,_smart_contract_id,_smart_contract);\\r\\n        _mint(msg.sender, _smart_contract_id);\\r\\n    }\\r\\n\\r\\n    function set_ideas(uint256 _ideas_id, string memory _ideas_uri) public {\\r\\n        //Set ideas uri\\r\\n        _ideas_uris[_ideas_id].ideas_uri = _ideas_uri;\\r\\n    }\\r\\n    \\r\\n    function add_donation(uint256 _ideas_id, uint256 _doantion) public {\\r\\n        //Set ideas uri\\r\\n        _ideas_uris[_ideas_id].donation += _doantion;\\r\\n    }\\r\\n\\r\\n    function get_all_ideas() public view returns (string[] memory) {\\r\\n        //Getting all ideas\\r\\n        string[] memory _StoreInfo = new string[](_ideas_ids);\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n            _StoreInfo[i] = _ideas_uris[i].ideas_uri;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function get_all_ideas_by_goal_id(uint256 _goal_id) public view returns (string[] memory) {\\r\\n        //Getting all ideas by goal id\\r\\n        string[] memory _StoreInfo = new string[](_ideas_ids);        \\r\\n        uint256 _store_id;\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n          if (_ideas_uris[i].goal_id == _goal_id)\\r\\n            _StoreInfo[_store_id] = _ideas_uris[i].ideas_uri;\\r\\n            _store_id++;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function get_ideas_id_by_ideas_uri(string memory _ideas_uri) public view returns (uint256) {\\r\\n        //Getting ideas id by uri\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n          if (keccak256(bytes(_ideas_uris[i].ideas_uri)) == keccak256(bytes(_ideas_uri))) return  i;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function get_goal_id_from_ideas_uri(string memory _ideas_uri) public view returns (uint256) {\\r\\n     //Getting ideas id by uri\\r\\n     for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n       if (keccak256(bytes(_ideas_uris[i].ideas_uri)) == keccak256(bytes(_ideas_uri))) return  _ideas_uris[i].goal_id;\\r\\n     }\\r\\n\\r\\n     return 0;\\r\\n    }\\r\\n\\r\\n\\r\\n    function ideas_uri(uint256 _ideas_id) public view returns (string memory) {\\r\\n        //Getting one ideas URI\\r\\n        return _ideas_uris[_ideas_id].ideas_uri;\\r\\n    }\\r\\n\\r\\n\\r\\n    //Votes\\r\\n    function create_goal_ideas_vote(uint256 _goal_id, uint256 _ideas_id,string memory _wallet) public returns (uint256)\\r\\n    {\\r\\n        //Create votes into all_goal_ideas_votes\\r\\n        all_goal_ideas_votes[_ideas_vote_ids] = goal_ideas_votes_struct(_goal_id, _ideas_id,_wallet);\\r\\n        _ideas_vote_ids++;\\r\\n\\r\\n        return _ideas_vote_ids;\\r\\n    }\\r\\n\\r\\n\\r\\n   function get_ideas_votes_from_goal(uint256 _goal_id, uint256 _ideas_id) public view returns (string[] memory)\\r\\n    {\\r\\n        //gets all ideas votes from goal\\r\\n        string[] memory _StoreInfo = new string[](_ideas_vote_ids);\\r\\n        uint256 _store_id;\\r\\n        for (uint256 i = 0; i < _ideas_vote_ids; i++) {\\r\\n          if (all_goal_ideas_votes[i].goal_id == _goal_id && all_goal_ideas_votes[i].ideas_id == _ideas_id )\\r\\n            _StoreInfo[_store_id] = all_goal_ideas_votes[i].wallet;\\r\\n            _store_id++;\\r\\n        }\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function reset_all() public {\\r\\n      _dao_ids = 0;\\r\\n      _goal_ids = 0;\\r\\n      _ideas_ids = 0;\\r\\n      _ideas_vote_ids = 0;\\r\\n      for (uint256 i = 0; i < _dao_ids; i++)            delete _dao_uris[i];\\r\\n      for (uint256 i = 0; i < _goal_ids; i++)           delete _goal_uris[i];\\r\\n      for (uint256 i = 0; i < _ideas_ids; i++)          delete _ideas_uris[i];\\r\\n      for (uint256 i = 0; i < _ideas_vote_ids; i++)     delete all_goal_ideas_votes[i];    \\r\\n\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3b5e5ad332602a7fdd3075fb353440cd19ec492dd81a3b5bd93007c0da71e396\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506151f4806100206000396000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c806371085cab11610146578063b16060a6116100c3578063c4c2e36411610087578063c4c2e364146107a8578063c87b56dd146107d8578063e3280c9614610808578063e32acc1a14610838578063e985e9c514610868578063ff4a37ef1461089857610253565b8063b16060a61461072c578063b88d4fde14610736578063c04e743014610752578063c04fe9781461076e578063c29595c51461078c57610253565b806397ee76061161010a57806397ee760614610676578063a1ca917814610694578063a22cb465146106c4578063a2cdb3a9146106e0578063aa4cdf2a146106fc57610253565b806371085cab146105ac57806382fcc732146105dc578063881de8581461060c5780638d3d25951461062857806395d89b411461065857610253565b806327a568b9116101d45780634be7adb5116101985780634be7adb5146104bc5780634f6ccce7146104ec5780635d907da11461051c5780636352211e1461054c57806370a082311461057c57610253565b806327a568b9146103ee57806329b56f60146104205780632f745c591461043e57806342842e0e1461046e578063468d0c801461048a57610253565b8063131d44f21161021b578063131d44f21461032257806318160ddd146103525780631ba44c4c146103705780631e9ac9f5146103a257806323b872dd146103d257610253565b806301ffc9a71461025857806306fdde0314610288578063081812fc146102a6578063095ea7b3146102d6578063109ac970146102f2575b600080fd5b610272600480360381019061026d9190613db4565b6108ca565b60405161027f9190614638565b60405180910390f35b610290610944565b60405161029d9190614653565b60405180910390f35b6102c060048036038101906102bb9190613fb6565b6109d6565b6040516102cd91906145af565b60405180910390f35b6102f060048036038101906102eb9190613d74565b610a1c565b005b61030c60048036038101906103079190613fb6565b610b34565b6040516103199190614616565b60405180910390f35b61033c60048036038101906103379190613fb6565b610ca4565b6040516103499190614616565b60405180910390f35b61035a610e14565b6040516103679190614881565b60405180910390f35b61038a60048036038101906103859190613fb6565b610e21565b604051610399939291906148da565b60405180910390f35b6103bc60048036038101906103b79190613e0e565b610ed3565b6040516103c99190614881565b60405180910390f35b6103ec60048036038101906103e79190613c5e565b610f45565b005b61040860048036038101906104039190613fb6565b610fa5565b60405161041793929190614675565b60405180910390f35b610428611167565b6040516104359190614616565b60405180910390f35b61045860048036038101906104539190613d74565b6112a2565b6040516104659190614881565b60405180910390f35b61048860048036038101906104839190613c5e565b611347565b005b6104a4600480360381019061049f9190613fb6565b611367565b6040516104b39392919061489c565b60405180910390f35b6104d660048036038101906104d191906140ca565b611419565b6040516104e39190614616565b60405180910390f35b61050660048036038101906105019190613fb6565b6115ab565b6040516105139190614881565b60405180910390f35b61053660048036038101906105319190613fb6565b61161c565b6040516105439190614653565b60405180910390f35b61056660048036038101906105619190613fb6565b6116c4565b60405161057391906145af565b60405180910390f35b61059660048036038101906105919190613bf1565b61174b565b6040516105a39190614881565b60405180910390f35b6105c660048036038101906105c19190613ecf565b611803565b6040516105d39190614881565b60405180910390f35b6105f660048036038101906105f1919061410a565b61187c565b6040516106039190614881565b60405180910390f35b6106266004803603810190610621919061403f565b611906565b005b610642600480360381019061063d9190613fb6565b611961565b60405161064f9190614653565b60405180910390f35b610660611a09565b60405161066d9190614653565b60405180910390f35b61067e611a9b565b60405161068b9190614616565b60405180910390f35b6106ae60048036038101906106a99190613e0e565b611bd6565b6040516106bb9190614881565b60405180910390f35b6106de60048036038101906106d99190613d34565b611c48565b005b6106fa60048036038101906106f591906140ca565b611c5e565b005b61071660048036038101906107119190613e0e565b611c8f565b6040516107239190614881565b60405180910390f35b610734611d17565b005b610750600480360381019061074b9190613cb1565b611e9d565b005b61076c60048036038101906107679190613fe3565b611eff565b005b610776611f2e565b6040516107839190614616565b60405180910390f35b6107a660048036038101906107a19190613fe3565b612069565b005b6107c260048036038101906107bd9190613e57565b612098565b6040516107cf9190614881565b60405180910390f35b6107f260048036038101906107ed9190613fb6565b61217c565b6040516107ff9190614653565b60405180910390f35b610822600480360381019061081d9190613f2b565b6121e4565b60405161082f9190614881565b60405180910390f35b610852600480360381019061084d9190613fb6565b6122d0565b60405161085f9190614653565b60405180910390f35b610882600480360381019061087d9190613c1e565b612378565b60405161088f9190614638565b60405180910390f35b6108b260048036038101906108ad9190613fb6565b61240c565b6040516108c1939291906148da565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061093d575061093c826124be565b5b9050919050565b60606065805461095390614bb8565b80601f016020809104026020016040519081016040528092919081815260200182805461097f90614bb8565b80156109cc5780601f106109a1576101008083540402835291602001916109cc565b820191906000526020600020905b8154815290600101906020018083116109af57829003601f168201915b5050505050905090565b60006109e1826125a0565b6069600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a27826116c4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8f90614801565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610ab76125eb565b73ffffffffffffffffffffffffffffffffffffffff161480610ae65750610ae581610ae06125eb565b612378565b5b610b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1c90614821565b60405180910390fd5b610b2f83836125f3565b505050565b6060600060ca5467ffffffffffffffff811115610b5457610b53614d4f565b5b604051908082528060200260200182016040528015610b8757816020015b6060815260200190600190039081610b725790505b509050600080600090505b60ca54811015610c99578460cf6000838152602001908152602001600020600001541415610c865760cf60008281526020019081526020016000206001018054610bdb90614bb8565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0790614bb8565b8015610c545780601f10610c2957610100808354040283529160200191610c54565b820191906000526020600020905b815481529060010190602001808311610c3757829003601f168201915b5050505050838381518110610c6c57610c6b614d20565b5b60200260200101819052508180610c8290614c1b565b9250505b8080610c9190614c1b565b915050610b92565b508192505050919050565b6060600060cb5467ffffffffffffffff811115610cc457610cc3614d4f565b5b604051908082528060200260200182016040528015610cf757816020015b6060815260200190600190039081610ce25790505b509050600080600090505b60cb54811015610e09578460d06000838152602001908152602001600020600001541415610de85760d060008281526020019081526020016000206001018054610d4b90614bb8565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7790614bb8565b8015610dc45780601f10610d9957610100808354040283529160200191610dc4565b820191906000526020600020905b815481529060010190602001808311610da757829003601f168201915b5050505050838381518110610ddc57610ddb614d20565b5b60200260200101819052505b8180610df390614c1b565b9250508080610e0190614c1b565b915050610d02565b508192505050919050565b6000609980549050905090565b60d2602052806000526040600020600091509050806000015490806001015490806002018054610e5090614bb8565b80601f0160208091040260200160405190810160405280929190818152602001828054610e7c90614bb8565b8015610ec95780601f10610e9e57610100808354040283529160200191610ec9565b820191906000526020600020905b815481529060010190602001808311610eac57829003601f168201915b5050505050905083565b600080600090505b60ca54811015610f3a57828051906020012060cf6000838152602001908152602001600020600101604051610f109190614574565b60405180910390201415610f275780915050610f40565b8080610f3290614c1b565b915050610edb565b50600090505b919050565b610f56610f506125eb565b826126ac565b610f95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8c906146c1565b60405180910390fd5b610fa0838383612741565b505050565b60ce602052806000526040600020600091509050806000018054610fc890614bb8565b80601f0160208091040260200160405190810160405280929190818152602001828054610ff490614bb8565b80156110415780601f1061101657610100808354040283529160200191611041565b820191906000526020600020905b81548152906001019060200180831161102457829003601f168201915b50505050509080600101805461105690614bb8565b80601f016020809104026020016040519081016040528092919081815260200182805461108290614bb8565b80156110cf5780601f106110a4576101008083540402835291602001916110cf565b820191906000526020600020905b8154815290600101906020018083116110b257829003601f168201915b5050505050908060020180546110e490614bb8565b80601f016020809104026020016040519081016040528092919081815260200182805461111090614bb8565b801561115d5780601f106111325761010080835404028352916020019161115d565b820191906000526020600020905b81548152906001019060200180831161114057829003601f168201915b5050505050905083565b6060600060ca5467ffffffffffffffff81111561118757611186614d4f565b5b6040519080825280602002602001820160405280156111ba57816020015b60608152602001906001900390816111a55790505b50905060005b60ca5481101561129a5760cf600082815260200190815260200160002060010180546111eb90614bb8565b80601f016020809104026020016040519081016040528092919081815260200182805461121790614bb8565b80156112645780601f1061123957610100808354040283529160200191611264565b820191906000526020600020905b81548152906001019060200180831161124757829003601f168201915b505050505082828151811061127c5761127b614d20565b5b6020026020010181905250808061129290614c1b565b9150506111c0565b508091505090565b60006112ad8361174b565b82106112ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e5906146e1565b60405180910390fd5b609760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b61136283838360405180602001604052806000815250611e9d565b505050565b60d060205280600052604060002060009150905080600001549080600101805461139090614bb8565b80601f01602080910402602001604051908101604052809291908181526020018280546113bc90614bb8565b80156114095780601f106113de57610100808354040283529160200191611409565b820191906000526020600020905b8154815290600101906020018083116113ec57829003601f168201915b5050505050908060020154905083565b6060600060cd5467ffffffffffffffff81111561143957611438614d4f565b5b60405190808252806020026020018201604052801561146c57816020015b60608152602001906001900390816114575790505b509050600080600090505b60cd5481101561159f578560d26000838152602001908152602001600020600001541480156114bb57508460d2600083815260200190815260200160002060010154145b1561157e5760d2600082815260200190815260200160002060020180546114e190614bb8565b80601f016020809104026020016040519081016040528092919081815260200182805461150d90614bb8565b801561155a5780601f1061152f5761010080835404028352916020019161155a565b820191906000526020600020905b81548152906001019060200180831161153d57829003601f168201915b505050505083838151811061157257611571614d20565b5b60200260200101819052505b818061158990614c1b565b925050808061159790614c1b565b915050611477565b50819250505092915050565b60006115b5610e14565b82106115f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ed90614841565b60405180910390fd5b6099828154811061160a57611609614d20565b5b90600052602060002001549050919050565b606060ce6000838152602001908152602001600020600101805461163f90614bb8565b80601f016020809104026020016040519081016040528092919081815260200182805461166b90614bb8565b80156116b85780601f1061168d576101008083540402835291602001916116b8565b820191906000526020600020905b81548152906001019060200180831161169b57829003601f168201915b50505050509050919050565b6000806116d083612a3b565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611742576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611739906147e1565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b3906147a1565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600060405180604001604052808381526020018481525060cf600060ca548152602001908152602001600020600082015181600001556020820151816001019080519060200190611855929190613909565b5090505060ca600081548092919061186c90614c1b565b919050555060ca54905092915050565b600060405180606001604052808581526020018481526020018381525060d2600060cd548152602001908152602001600020600082015181600001556020820151816001015560408201518160020190805190602001906118de929190613909565b5090505060cd60008154809291906118f590614c1b565b919050555060cd5490509392505050565b8160ce60008581526020019081526020016000206000019080519060200190611930929190613909565b508060ce6000858152602001908152602001600020600101908051906020019061195b929190613909565b50505050565b606060d06000838152602001908152602001600020600101805461198490614bb8565b80601f01602080910402602001604051908101604052809291908181526020018280546119b090614bb8565b80156119fd5780601f106119d2576101008083540402835291602001916119fd565b820191906000526020600020905b8154815290600101906020018083116119e057829003601f168201915b50505050509050919050565b606060668054611a1890614bb8565b80601f0160208091040260200160405190810160405280929190818152602001828054611a4490614bb8565b8015611a915780601f10611a6657610100808354040283529160200191611a91565b820191906000526020600020905b815481529060010190602001808311611a7457829003601f168201915b5050505050905090565b6060600060cb5467ffffffffffffffff811115611abb57611aba614d4f565b5b604051908082528060200260200182016040528015611aee57816020015b6060815260200190600190039081611ad95790505b50905060005b60cb54811015611bce5760d060008281526020019081526020016000206001018054611b1f90614bb8565b80601f0160208091040260200160405190810160405280929190818152602001828054611b4b90614bb8565b8015611b985780601f10611b6d57610100808354040283529160200191611b98565b820191906000526020600020905b815481529060010190602001808311611b7b57829003601f168201915b5050505050828281518110611bb057611baf614d20565b5b60200260200101819052508080611bc690614c1b565b915050611af4565b508091505090565b600080600090505b60cb54811015611c3d57828051906020012060d06000838152602001908152602001600020600101604051611c139190614574565b60405180910390201415611c2a5780915050611c43565b8080611c3590614c1b565b915050611bde565b50600090505b919050565b611c5a611c536125eb565b8383612a78565b5050565b8060d060008481526020019081526020016000206002016000828254611c849190614a78565b925050819055505050565b600080600090505b60cb54811015611d0c57828051906020012060d06000838152602001908152602001600020600101604051611ccc9190614574565b60405180910390201415611cf95760d0600082815260200190815260200160002060000154915050611d12565b8080611d0490614c1b565b915050611c97565b50600090505b919050565b600060c981905550600060ca81905550600060cb81905550600060cd8190555060005b60c954811015611d9d5760ce600082815260200190815260200160002060008082016000611d68919061398f565b600182016000611d78919061398f565b600282016000611d88919061398f565b50508080611d9590614c1b565b915050611d3a565b5060005b60ca54811015611dec5760cf6000828152602001908152602001600020600080820160009055600182016000611dd7919061398f565b50508080611de490614c1b565b915050611da1565b5060005b60cb54811015611e435760d06000828152602001908152602001600020600080820160009055600182016000611e26919061398f565b600282016000905550508080611e3b90614c1b565b915050611df0565b5060005b60cd54811015611e9a5760d260008281526020019081526020016000206000808201600090556001820160009055600282016000611e85919061398f565b50508080611e9290614c1b565b915050611e47565b50565b611eae611ea86125eb565b836126ac565b611eed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee4906146c1565b60405180910390fd5b611ef984848484612be5565b50505050565b8060d060008481526020019081526020016000206001019080519060200190611f29929190613909565b505050565b6060600060c95467ffffffffffffffff811115611f4e57611f4d614d4f565b5b604051908082528060200260200182016040528015611f8157816020015b6060815260200190600190039081611f6c5790505b50905060005b60c9548110156120615760ce60008281526020019081526020016000206001018054611fb290614bb8565b80601f0160208091040260200160405190810160405280929190818152602001828054611fde90614bb8565b801561202b5780601f106120005761010080835404028352916020019161202b565b820191906000526020600020905b81548152906001019060200180831161200e57829003601f168201915b505050505082828151811061204357612042614d20565b5b6020026020010181905250808061205990614c1b565b915050611f87565b508091505090565b8060cf60008481526020019081526020016000206001019080519060200190612093929190613909565b505050565b600060405180606001604052808481526020018381526020016040518060400160405280600581526020017f46616c736500000000000000000000000000000000000000000000000000000081525081525060ce600060c9548152602001908152602001600020600082015181600001908051906020019061211b929190613909565b506020820151816001019080519060200190612138929190613909565b506040820151816002019080519060200190612155929190613909565b5090505060c9600081548092919061216c90614c1b565b919050555060c954905092915050565b6060612187826125a0565b6000612191612c41565b905060008151116121b157604051806020016040528060008152506121dc565b806121bb84612c58565b6040516020016121cc92919061458b565b6040516020818303038152906040525b915050919050565b60006040518060600160405280848152602001858152602001600081525060d0600060cb54815260200190815260200160002060008201518160000155602082015181600101908051906020019061223d929190613909565b506040820151816002015590505060cb600081548092919061225e90614c1b565b919050555060005b82518110156122c35761229860cb5460cc5485848151811061228b5761228a614d20565b5b6020026020010151612d30565b60cc60008154809291906122ab90614c1b565b919050555080806122bb90614c1b565b915050612266565b5060cb5490509392505050565b606060cf600083815260200190815260200160002060010180546122f390614bb8565b80601f016020809104026020016040519081016040528092919081815260200182805461231f90614bb8565b801561236c5780601f106123415761010080835404028352916020019161236c565b820191906000526020600020905b81548152906001019060200180831161234f57829003601f168201915b50505050509050919050565b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60d160205280600052604060002060009150905080600001549080600101549080600201805461243b90614bb8565b80601f016020809104026020016040519081016040528092919081815260200182805461246790614bb8565b80156124b45780601f10612489576101008083540402835291602001916124b4565b820191906000526020600020905b81548152906001019060200180831161249757829003601f168201915b5050505050905083565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061258957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612599575061259882612da1565b5b9050919050565b6125a981612e0b565b6125e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125df906147e1565b60405180910390fd5b50565b600033905090565b816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16612666836116c4565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806126b8836116c4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806126fa57506126f98185612378565b5b8061273857508373ffffffffffffffffffffffffffffffffffffffff16612720846109d6565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612761826116c4565b73ffffffffffffffffffffffffffffffffffffffff16146127b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127ae90614721565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612827576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281e90614761565b60405180910390fd5b6128348383836001612e4c565b8273ffffffffffffffffffffffffffffffffffffffff16612854826116c4565b73ffffffffffffffffffffffffffffffffffffffff16146128aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a190614721565b60405180910390fd5b6069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612a368383836001612fac565b505050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ade90614781565b60405180910390fd5b80606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612bd89190614638565b60405180910390a3505050565b612bf0848484612741565b612bfc84848484612fb2565b612c3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3290614701565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606060006001612c6784613149565b01905060008167ffffffffffffffff811115612c8657612c85614d4f565b5b6040519080825280601f01601f191660200182016040528015612cb85781602001600182028036833780820191505090505b509050600082602001820190505b600115612d25578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612d0f57612d0e614c93565b5b0494506000851415612d2057612d25565b612cc6565b819350505050919050565b60405180606001604052808481526020018381526020018281525060d1600084815260200190815260200160002060008201518160000155602082015181600101556040820151816002019080519060200190612d8e929190613909565b50905050612d9c338361329c565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16612e2d83612a3b565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b612e58848484846134ba565b6001811115612e9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e9390614861565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415612ee457612edf816135e0565b612f23565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612f2257612f218582613629565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612f6657612f6181613796565b612fa5565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612fa457612fa38482613867565b5b5b5050505050565b50505050565b6000612fd38473ffffffffffffffffffffffffffffffffffffffff166138e6565b1561313c578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612ffc6125eb565b8786866040518563ffffffff1660e01b815260040161301e94939291906145ca565b602060405180830381600087803b15801561303857600080fd5b505af192505050801561306957506040513d601f19601f820116820180604052508101906130669190613de1565b60015b6130ec573d8060008114613099576040519150601f19603f3d011682016040523d82523d6000602084013e61309e565b606091505b506000815114156130e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130db90614701565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613141565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106131a7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161319d5761319c614c93565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106131e4576d04ee2d6d415b85acef810000000083816131da576131d9614c93565b5b0492506020810190505b662386f26fc10000831061321357662386f26fc10000838161320957613208614c93565b5b0492506010810190505b6305f5e100831061323c576305f5e100838161323257613231614c93565b5b0492506008810190505b612710831061326157612710838161325757613256614c93565b5b0492506004810190505b60648310613284576064838161327a57613279614c93565b5b0492506002810190505b600a8310613293576001810190505b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561330c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613303906147c1565b60405180910390fd5b61331581612e0b565b15613355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161334c90614741565b60405180910390fd5b613363600083836001612e4c565b61336c81612e0b565b156133ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133a390614741565b60405180910390fd5b6001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46134b6600083836001612fac565b5050565b60018111156135da57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461354e5780606860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546135469190614ace565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146135d95780606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546135d19190614a78565b925050819055505b5b50505050565b609980549050609a600083815260200190815260200160002081905550609981908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016136368461174b565b6136409190614ace565b9050600060986000848152602001908152602001600020549050818114613725576000609760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080609760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816098600083815260200190815260200160002081905550505b6098600084815260200190815260200160002060009055609760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016099805490506137aa9190614ace565b90506000609a60008481526020019081526020016000205490506000609983815481106137da576137d9614d20565b5b9060005260206000200154905080609983815481106137fc576137fb614d20565b5b906000526020600020018190555081609a600083815260200190815260200160002081905550609a600085815260200190815260200160002060009055609980548061384b5761384a614cf1565b5b6001900381819060005260206000200160009055905550505050565b60006138728361174b565b905081609760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806098600084815260200190815260200160002081905550505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461391590614bb8565b90600052602060002090601f016020900481019282613937576000855561397e565b82601f1061395057805160ff191683800117855561397e565b8280016001018555821561397e579182015b8281111561397d578251825591602001919060010190613962565b5b50905061398b91906139cf565b5090565b50805461399b90614bb8565b6000825580601f106139ad57506139cc565b601f0160209004906000526020600020908101906139cb91906139cf565b5b50565b5b808211156139e85760008160009055506001016139d0565b5090565b60006139ff6139fa8461493d565b614918565b90508083825260208201905082856020860282011115613a2257613a21614d83565b5b60005b85811015613a7057813567ffffffffffffffff811115613a4857613a47614d7e565b5b808601613a558982613bae565b85526020850194506020840193505050600181019050613a25565b5050509392505050565b6000613a8d613a8884614969565b614918565b905082815260208101848484011115613aa957613aa8614d88565b5b613ab4848285614b76565b509392505050565b6000613acf613aca8461499a565b614918565b905082815260208101848484011115613aeb57613aea614d88565b5b613af6848285614b76565b509392505050565b600081359050613b0d81615162565b92915050565b600082601f830112613b2857613b27614d7e565b5b8135613b388482602086016139ec565b91505092915050565b600081359050613b5081615179565b92915050565b600081359050613b6581615190565b92915050565b600081519050613b7a81615190565b92915050565b600082601f830112613b9557613b94614d7e565b5b8135613ba5848260208601613a7a565b91505092915050565b600082601f830112613bc357613bc2614d7e565b5b8135613bd3848260208601613abc565b91505092915050565b600081359050613beb816151a7565b92915050565b600060208284031215613c0757613c06614d92565b5b6000613c1584828501613afe565b91505092915050565b60008060408385031215613c3557613c34614d92565b5b6000613c4385828601613afe565b9250506020613c5485828601613afe565b9150509250929050565b600080600060608486031215613c7757613c76614d92565b5b6000613c8586828701613afe565b9350506020613c9686828701613afe565b9250506040613ca786828701613bdc565b9150509250925092565b60008060008060808587031215613ccb57613cca614d92565b5b6000613cd987828801613afe565b9450506020613cea87828801613afe565b9350506040613cfb87828801613bdc565b925050606085013567ffffffffffffffff811115613d1c57613d1b614d8d565b5b613d2887828801613b80565b91505092959194509250565b60008060408385031215613d4b57613d4a614d92565b5b6000613d5985828601613afe565b9250506020613d6a85828601613b41565b9150509250929050565b60008060408385031215613d8b57613d8a614d92565b5b6000613d9985828601613afe565b9250506020613daa85828601613bdc565b9150509250929050565b600060208284031215613dca57613dc9614d92565b5b6000613dd884828501613b56565b91505092915050565b600060208284031215613df757613df6614d92565b5b6000613e0584828501613b6b565b91505092915050565b600060208284031215613e2457613e23614d92565b5b600082013567ffffffffffffffff811115613e4257613e41614d8d565b5b613e4e84828501613bae565b91505092915050565b60008060408385031215613e6e57613e6d614d92565b5b600083013567ffffffffffffffff811115613e8c57613e8b614d8d565b5b613e9885828601613bae565b925050602083013567ffffffffffffffff811115613eb957613eb8614d8d565b5b613ec585828601613bae565b9150509250929050565b60008060408385031215613ee657613ee5614d92565b5b600083013567ffffffffffffffff811115613f0457613f03614d8d565b5b613f1085828601613bae565b9250506020613f2185828601613bdc565b9150509250929050565b600080600060608486031215613f4457613f43614d92565b5b600084013567ffffffffffffffff811115613f6257613f61614d8d565b5b613f6e86828701613bae565b9350506020613f7f86828701613bdc565b925050604084013567ffffffffffffffff811115613fa057613f9f614d8d565b5b613fac86828701613b13565b9150509250925092565b600060208284031215613fcc57613fcb614d92565b5b6000613fda84828501613bdc565b91505092915050565b60008060408385031215613ffa57613ff9614d92565b5b600061400885828601613bdc565b925050602083013567ffffffffffffffff81111561402957614028614d8d565b5b61403585828601613bae565b9150509250929050565b60008060006060848603121561405857614057614d92565b5b600061406686828701613bdc565b935050602084013567ffffffffffffffff81111561408757614086614d8d565b5b61409386828701613bae565b925050604084013567ffffffffffffffff8111156140b4576140b3614d8d565b5b6140c086828701613bae565b9150509250925092565b600080604083850312156140e1576140e0614d92565b5b60006140ef85828601613bdc565b925050602061410085828601613bdc565b9150509250929050565b60008060006060848603121561412357614122614d92565b5b600061413186828701613bdc565b935050602061414286828701613bdc565b925050604084013567ffffffffffffffff81111561416357614162614d8d565b5b61416f86828701613bae565b9150509250925092565b600061418583836142d8565b905092915050565b61419681614b02565b82525050565b60006141a7826149f0565b6141b18185614a1e565b9350836020820285016141c3856149cb565b8060005b858110156141ff57848403895281516141e08582614179565b94506141eb83614a11565b925060208a019950506001810190506141c7565b50829750879550505050505092915050565b61421a81614b14565b82525050565b600061422b826149fb565b6142358185614a2f565b9350614245818560208601614b85565b61424e81614d97565b840191505092915050565b6000815461426681614bb8565b6142708186614a40565b9450600182166000811461428b576001811461429c576142cf565b60ff198316865281860193506142cf565b6142a5856149db565b60005b838110156142c7578154818901526001820191506020810190506142a8565b838801955050505b50505092915050565b60006142e382614a06565b6142ed8185614a4b565b93506142fd818560208601614b85565b61430681614d97565b840191505092915050565b600061431c82614a06565b6143268185614a5c565b9350614336818560208601614b85565b61433f81614d97565b840191505092915050565b600061435582614a06565b61435f8185614a6d565b935061436f818560208601614b85565b80840191505092915050565b6000614388602d83614a5c565b915061439382614da8565b604082019050919050565b60006143ab602b83614a5c565b91506143b682614df7565b604082019050919050565b60006143ce603283614a5c565b91506143d982614e46565b604082019050919050565b60006143f1602583614a5c565b91506143fc82614e95565b604082019050919050565b6000614414601c83614a5c565b915061441f82614ee4565b602082019050919050565b6000614437602483614a5c565b915061444282614f0d565b604082019050919050565b600061445a601983614a5c565b915061446582614f5c565b602082019050919050565b600061447d602983614a5c565b915061448882614f85565b604082019050919050565b60006144a0602083614a5c565b91506144ab82614fd4565b602082019050919050565b60006144c3601883614a5c565b91506144ce82614ffd565b602082019050919050565b60006144e6602183614a5c565b91506144f182615026565b604082019050919050565b6000614509603d83614a5c565b915061451482615075565b604082019050919050565b600061452c602c83614a5c565b9150614537826150c4565b604082019050919050565b600061454f603583614a5c565b915061455a82615113565b604082019050919050565b61456e81614b6c565b82525050565b60006145808284614259565b915081905092915050565b6000614597828561434a565b91506145a3828461434a565b91508190509392505050565b60006020820190506145c4600083018461418d565b92915050565b60006080820190506145df600083018761418d565b6145ec602083018661418d565b6145f96040830185614565565b818103606083015261460b8184614220565b905095945050505050565b60006020820190508181036000830152614630818461419c565b905092915050565b600060208201905061464d6000830184614211565b92915050565b6000602082019050818103600083015261466d8184614311565b905092915050565b6000606082019050818103600083015261468f8186614311565b905081810360208301526146a38185614311565b905081810360408301526146b78184614311565b9050949350505050565b600060208201905081810360008301526146da8161437b565b9050919050565b600060208201905081810360008301526146fa8161439e565b9050919050565b6000602082019050818103600083015261471a816143c1565b9050919050565b6000602082019050818103600083015261473a816143e4565b9050919050565b6000602082019050818103600083015261475a81614407565b9050919050565b6000602082019050818103600083015261477a8161442a565b9050919050565b6000602082019050818103600083015261479a8161444d565b9050919050565b600060208201905081810360008301526147ba81614470565b9050919050565b600060208201905081810360008301526147da81614493565b9050919050565b600060208201905081810360008301526147fa816144b6565b9050919050565b6000602082019050818103600083015261481a816144d9565b9050919050565b6000602082019050818103600083015261483a816144fc565b9050919050565b6000602082019050818103600083015261485a8161451f565b9050919050565b6000602082019050818103600083015261487a81614542565b9050919050565b60006020820190506148966000830184614565565b92915050565b60006060820190506148b16000830186614565565b81810360208301526148c38185614311565b90506148d26040830184614565565b949350505050565b60006060820190506148ef6000830186614565565b6148fc6020830185614565565b818103604083015261490e8184614311565b9050949350505050565b6000614922614933565b905061492e8282614bea565b919050565b6000604051905090565b600067ffffffffffffffff82111561495857614957614d4f565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561498457614983614d4f565b5b61498d82614d97565b9050602081019050919050565b600067ffffffffffffffff8211156149b5576149b4614d4f565b5b6149be82614d97565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614a8382614b6c565b9150614a8e83614b6c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614ac357614ac2614c64565b5b828201905092915050565b6000614ad982614b6c565b9150614ae483614b6c565b925082821015614af757614af6614c64565b5b828203905092915050565b6000614b0d82614b4c565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614ba3578082015181840152602081019050614b88565b83811115614bb2576000848401525b50505050565b60006002820490506001821680614bd057607f821691505b60208210811415614be457614be3614cc2565b5b50919050565b614bf382614d97565b810181811067ffffffffffffffff82111715614c1257614c11614d4f565b5b80604052505050565b6000614c2682614b6c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c5957614c58614c64565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b61516b81614b02565b811461517657600080fd5b50565b61518281614b14565b811461518d57600080fd5b50565b61519981614b20565b81146151a457600080fd5b50565b6151b081614b6c565b81146151bb57600080fd5b5056fea264697066735822122035844669f37d9eb8bec71d7483a496d4816c1bb6726ccb7c6d5f94708b36092c64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102535760003560e01c806371085cab11610146578063b16060a6116100c3578063c4c2e36411610087578063c4c2e364146107a8578063c87b56dd146107d8578063e3280c9614610808578063e32acc1a14610838578063e985e9c514610868578063ff4a37ef1461089857610253565b8063b16060a61461072c578063b88d4fde14610736578063c04e743014610752578063c04fe9781461076e578063c29595c51461078c57610253565b806397ee76061161010a57806397ee760614610676578063a1ca917814610694578063a22cb465146106c4578063a2cdb3a9146106e0578063aa4cdf2a146106fc57610253565b806371085cab146105ac57806382fcc732146105dc578063881de8581461060c5780638d3d25951461062857806395d89b411461065857610253565b806327a568b9116101d45780634be7adb5116101985780634be7adb5146104bc5780634f6ccce7146104ec5780635d907da11461051c5780636352211e1461054c57806370a082311461057c57610253565b806327a568b9146103ee57806329b56f60146104205780632f745c591461043e57806342842e0e1461046e578063468d0c801461048a57610253565b8063131d44f21161021b578063131d44f21461032257806318160ddd146103525780631ba44c4c146103705780631e9ac9f5146103a257806323b872dd146103d257610253565b806301ffc9a71461025857806306fdde0314610288578063081812fc146102a6578063095ea7b3146102d6578063109ac970146102f2575b600080fd5b610272600480360381019061026d9190613db4565b6108ca565b60405161027f9190614638565b60405180910390f35b610290610944565b60405161029d9190614653565b60405180910390f35b6102c060048036038101906102bb9190613fb6565b6109d6565b6040516102cd91906145af565b60405180910390f35b6102f060048036038101906102eb9190613d74565b610a1c565b005b61030c60048036038101906103079190613fb6565b610b34565b6040516103199190614616565b60405180910390f35b61033c60048036038101906103379190613fb6565b610ca4565b6040516103499190614616565b60405180910390f35b61035a610e14565b6040516103679190614881565b60405180910390f35b61038a60048036038101906103859190613fb6565b610e21565b604051610399939291906148da565b60405180910390f35b6103bc60048036038101906103b79190613e0e565b610ed3565b6040516103c99190614881565b60405180910390f35b6103ec60048036038101906103e79190613c5e565b610f45565b005b61040860048036038101906104039190613fb6565b610fa5565b60405161041793929190614675565b60405180910390f35b610428611167565b6040516104359190614616565b60405180910390f35b61045860048036038101906104539190613d74565b6112a2565b6040516104659190614881565b60405180910390f35b61048860048036038101906104839190613c5e565b611347565b005b6104a4600480360381019061049f9190613fb6565b611367565b6040516104b39392919061489c565b60405180910390f35b6104d660048036038101906104d191906140ca565b611419565b6040516104e39190614616565b60405180910390f35b61050660048036038101906105019190613fb6565b6115ab565b6040516105139190614881565b60405180910390f35b61053660048036038101906105319190613fb6565b61161c565b6040516105439190614653565b60405180910390f35b61056660048036038101906105619190613fb6565b6116c4565b60405161057391906145af565b60405180910390f35b61059660048036038101906105919190613bf1565b61174b565b6040516105a39190614881565b60405180910390f35b6105c660048036038101906105c19190613ecf565b611803565b6040516105d39190614881565b60405180910390f35b6105f660048036038101906105f1919061410a565b61187c565b6040516106039190614881565b60405180910390f35b6106266004803603810190610621919061403f565b611906565b005b610642600480360381019061063d9190613fb6565b611961565b60405161064f9190614653565b60405180910390f35b610660611a09565b60405161066d9190614653565b60405180910390f35b61067e611a9b565b60405161068b9190614616565b60405180910390f35b6106ae60048036038101906106a99190613e0e565b611bd6565b6040516106bb9190614881565b60405180910390f35b6106de60048036038101906106d99190613d34565b611c48565b005b6106fa60048036038101906106f591906140ca565b611c5e565b005b61071660048036038101906107119190613e0e565b611c8f565b6040516107239190614881565b60405180910390f35b610734611d17565b005b610750600480360381019061074b9190613cb1565b611e9d565b005b61076c60048036038101906107679190613fe3565b611eff565b005b610776611f2e565b6040516107839190614616565b60405180910390f35b6107a660048036038101906107a19190613fe3565b612069565b005b6107c260048036038101906107bd9190613e57565b612098565b6040516107cf9190614881565b60405180910390f35b6107f260048036038101906107ed9190613fb6565b61217c565b6040516107ff9190614653565b60405180910390f35b610822600480360381019061081d9190613f2b565b6121e4565b60405161082f9190614881565b60405180910390f35b610852600480360381019061084d9190613fb6565b6122d0565b60405161085f9190614653565b60405180910390f35b610882600480360381019061087d9190613c1e565b612378565b60405161088f9190614638565b60405180910390f35b6108b260048036038101906108ad9190613fb6565b61240c565b6040516108c1939291906148da565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061093d575061093c826124be565b5b9050919050565b60606065805461095390614bb8565b80601f016020809104026020016040519081016040528092919081815260200182805461097f90614bb8565b80156109cc5780601f106109a1576101008083540402835291602001916109cc565b820191906000526020600020905b8154815290600101906020018083116109af57829003601f168201915b5050505050905090565b60006109e1826125a0565b6069600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a27826116c4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8f90614801565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610ab76125eb565b73ffffffffffffffffffffffffffffffffffffffff161480610ae65750610ae581610ae06125eb565b612378565b5b610b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1c90614821565b60405180910390fd5b610b2f83836125f3565b505050565b6060600060ca5467ffffffffffffffff811115610b5457610b53614d4f565b5b604051908082528060200260200182016040528015610b8757816020015b6060815260200190600190039081610b725790505b509050600080600090505b60ca54811015610c99578460cf6000838152602001908152602001600020600001541415610c865760cf60008281526020019081526020016000206001018054610bdb90614bb8565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0790614bb8565b8015610c545780601f10610c2957610100808354040283529160200191610c54565b820191906000526020600020905b815481529060010190602001808311610c3757829003601f168201915b5050505050838381518110610c6c57610c6b614d20565b5b60200260200101819052508180610c8290614c1b565b9250505b8080610c9190614c1b565b915050610b92565b508192505050919050565b6060600060cb5467ffffffffffffffff811115610cc457610cc3614d4f565b5b604051908082528060200260200182016040528015610cf757816020015b6060815260200190600190039081610ce25790505b509050600080600090505b60cb54811015610e09578460d06000838152602001908152602001600020600001541415610de85760d060008281526020019081526020016000206001018054610d4b90614bb8565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7790614bb8565b8015610dc45780601f10610d9957610100808354040283529160200191610dc4565b820191906000526020600020905b815481529060010190602001808311610da757829003601f168201915b5050505050838381518110610ddc57610ddb614d20565b5b60200260200101819052505b8180610df390614c1b565b9250508080610e0190614c1b565b915050610d02565b508192505050919050565b6000609980549050905090565b60d2602052806000526040600020600091509050806000015490806001015490806002018054610e5090614bb8565b80601f0160208091040260200160405190810160405280929190818152602001828054610e7c90614bb8565b8015610ec95780601f10610e9e57610100808354040283529160200191610ec9565b820191906000526020600020905b815481529060010190602001808311610eac57829003601f168201915b5050505050905083565b600080600090505b60ca54811015610f3a57828051906020012060cf6000838152602001908152602001600020600101604051610f109190614574565b60405180910390201415610f275780915050610f40565b8080610f3290614c1b565b915050610edb565b50600090505b919050565b610f56610f506125eb565b826126ac565b610f95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8c906146c1565b60405180910390fd5b610fa0838383612741565b505050565b60ce602052806000526040600020600091509050806000018054610fc890614bb8565b80601f0160208091040260200160405190810160405280929190818152602001828054610ff490614bb8565b80156110415780601f1061101657610100808354040283529160200191611041565b820191906000526020600020905b81548152906001019060200180831161102457829003601f168201915b50505050509080600101805461105690614bb8565b80601f016020809104026020016040519081016040528092919081815260200182805461108290614bb8565b80156110cf5780601f106110a4576101008083540402835291602001916110cf565b820191906000526020600020905b8154815290600101906020018083116110b257829003601f168201915b5050505050908060020180546110e490614bb8565b80601f016020809104026020016040519081016040528092919081815260200182805461111090614bb8565b801561115d5780601f106111325761010080835404028352916020019161115d565b820191906000526020600020905b81548152906001019060200180831161114057829003601f168201915b5050505050905083565b6060600060ca5467ffffffffffffffff81111561118757611186614d4f565b5b6040519080825280602002602001820160405280156111ba57816020015b60608152602001906001900390816111a55790505b50905060005b60ca5481101561129a5760cf600082815260200190815260200160002060010180546111eb90614bb8565b80601f016020809104026020016040519081016040528092919081815260200182805461121790614bb8565b80156112645780601f1061123957610100808354040283529160200191611264565b820191906000526020600020905b81548152906001019060200180831161124757829003601f168201915b505050505082828151811061127c5761127b614d20565b5b6020026020010181905250808061129290614c1b565b9150506111c0565b508091505090565b60006112ad8361174b565b82106112ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e5906146e1565b60405180910390fd5b609760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b61136283838360405180602001604052806000815250611e9d565b505050565b60d060205280600052604060002060009150905080600001549080600101805461139090614bb8565b80601f01602080910402602001604051908101604052809291908181526020018280546113bc90614bb8565b80156114095780601f106113de57610100808354040283529160200191611409565b820191906000526020600020905b8154815290600101906020018083116113ec57829003601f168201915b5050505050908060020154905083565b6060600060cd5467ffffffffffffffff81111561143957611438614d4f565b5b60405190808252806020026020018201604052801561146c57816020015b60608152602001906001900390816114575790505b509050600080600090505b60cd5481101561159f578560d26000838152602001908152602001600020600001541480156114bb57508460d2600083815260200190815260200160002060010154145b1561157e5760d2600082815260200190815260200160002060020180546114e190614bb8565b80601f016020809104026020016040519081016040528092919081815260200182805461150d90614bb8565b801561155a5780601f1061152f5761010080835404028352916020019161155a565b820191906000526020600020905b81548152906001019060200180831161153d57829003601f168201915b505050505083838151811061157257611571614d20565b5b60200260200101819052505b818061158990614c1b565b925050808061159790614c1b565b915050611477565b50819250505092915050565b60006115b5610e14565b82106115f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ed90614841565b60405180910390fd5b6099828154811061160a57611609614d20565b5b90600052602060002001549050919050565b606060ce6000838152602001908152602001600020600101805461163f90614bb8565b80601f016020809104026020016040519081016040528092919081815260200182805461166b90614bb8565b80156116b85780601f1061168d576101008083540402835291602001916116b8565b820191906000526020600020905b81548152906001019060200180831161169b57829003601f168201915b50505050509050919050565b6000806116d083612a3b565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611742576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611739906147e1565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b3906147a1565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600060405180604001604052808381526020018481525060cf600060ca548152602001908152602001600020600082015181600001556020820151816001019080519060200190611855929190613909565b5090505060ca600081548092919061186c90614c1b565b919050555060ca54905092915050565b600060405180606001604052808581526020018481526020018381525060d2600060cd548152602001908152602001600020600082015181600001556020820151816001015560408201518160020190805190602001906118de929190613909565b5090505060cd60008154809291906118f590614c1b565b919050555060cd5490509392505050565b8160ce60008581526020019081526020016000206000019080519060200190611930929190613909565b508060ce6000858152602001908152602001600020600101908051906020019061195b929190613909565b50505050565b606060d06000838152602001908152602001600020600101805461198490614bb8565b80601f01602080910402602001604051908101604052809291908181526020018280546119b090614bb8565b80156119fd5780601f106119d2576101008083540402835291602001916119fd565b820191906000526020600020905b8154815290600101906020018083116119e057829003601f168201915b50505050509050919050565b606060668054611a1890614bb8565b80601f0160208091040260200160405190810160405280929190818152602001828054611a4490614bb8565b8015611a915780601f10611a6657610100808354040283529160200191611a91565b820191906000526020600020905b815481529060010190602001808311611a7457829003601f168201915b5050505050905090565b6060600060cb5467ffffffffffffffff811115611abb57611aba614d4f565b5b604051908082528060200260200182016040528015611aee57816020015b6060815260200190600190039081611ad95790505b50905060005b60cb54811015611bce5760d060008281526020019081526020016000206001018054611b1f90614bb8565b80601f0160208091040260200160405190810160405280929190818152602001828054611b4b90614bb8565b8015611b985780601f10611b6d57610100808354040283529160200191611b98565b820191906000526020600020905b815481529060010190602001808311611b7b57829003601f168201915b5050505050828281518110611bb057611baf614d20565b5b60200260200101819052508080611bc690614c1b565b915050611af4565b508091505090565b600080600090505b60cb54811015611c3d57828051906020012060d06000838152602001908152602001600020600101604051611c139190614574565b60405180910390201415611c2a5780915050611c43565b8080611c3590614c1b565b915050611bde565b50600090505b919050565b611c5a611c536125eb565b8383612a78565b5050565b8060d060008481526020019081526020016000206002016000828254611c849190614a78565b925050819055505050565b600080600090505b60cb54811015611d0c57828051906020012060d06000838152602001908152602001600020600101604051611ccc9190614574565b60405180910390201415611cf95760d0600082815260200190815260200160002060000154915050611d12565b8080611d0490614c1b565b915050611c97565b50600090505b919050565b600060c981905550600060ca81905550600060cb81905550600060cd8190555060005b60c954811015611d9d5760ce600082815260200190815260200160002060008082016000611d68919061398f565b600182016000611d78919061398f565b600282016000611d88919061398f565b50508080611d9590614c1b565b915050611d3a565b5060005b60ca54811015611dec5760cf6000828152602001908152602001600020600080820160009055600182016000611dd7919061398f565b50508080611de490614c1b565b915050611da1565b5060005b60cb54811015611e435760d06000828152602001908152602001600020600080820160009055600182016000611e26919061398f565b600282016000905550508080611e3b90614c1b565b915050611df0565b5060005b60cd54811015611e9a5760d260008281526020019081526020016000206000808201600090556001820160009055600282016000611e85919061398f565b50508080611e9290614c1b565b915050611e47565b50565b611eae611ea86125eb565b836126ac565b611eed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee4906146c1565b60405180910390fd5b611ef984848484612be5565b50505050565b8060d060008481526020019081526020016000206001019080519060200190611f29929190613909565b505050565b6060600060c95467ffffffffffffffff811115611f4e57611f4d614d4f565b5b604051908082528060200260200182016040528015611f8157816020015b6060815260200190600190039081611f6c5790505b50905060005b60c9548110156120615760ce60008281526020019081526020016000206001018054611fb290614bb8565b80601f0160208091040260200160405190810160405280929190818152602001828054611fde90614bb8565b801561202b5780601f106120005761010080835404028352916020019161202b565b820191906000526020600020905b81548152906001019060200180831161200e57829003601f168201915b505050505082828151811061204357612042614d20565b5b6020026020010181905250808061205990614c1b565b915050611f87565b508091505090565b8060cf60008481526020019081526020016000206001019080519060200190612093929190613909565b505050565b600060405180606001604052808481526020018381526020016040518060400160405280600581526020017f46616c736500000000000000000000000000000000000000000000000000000081525081525060ce600060c9548152602001908152602001600020600082015181600001908051906020019061211b929190613909565b506020820151816001019080519060200190612138929190613909565b506040820151816002019080519060200190612155929190613909565b5090505060c9600081548092919061216c90614c1b565b919050555060c954905092915050565b6060612187826125a0565b6000612191612c41565b905060008151116121b157604051806020016040528060008152506121dc565b806121bb84612c58565b6040516020016121cc92919061458b565b6040516020818303038152906040525b915050919050565b60006040518060600160405280848152602001858152602001600081525060d0600060cb54815260200190815260200160002060008201518160000155602082015181600101908051906020019061223d929190613909565b506040820151816002015590505060cb600081548092919061225e90614c1b565b919050555060005b82518110156122c35761229860cb5460cc5485848151811061228b5761228a614d20565b5b6020026020010151612d30565b60cc60008154809291906122ab90614c1b565b919050555080806122bb90614c1b565b915050612266565b5060cb5490509392505050565b606060cf600083815260200190815260200160002060010180546122f390614bb8565b80601f016020809104026020016040519081016040528092919081815260200182805461231f90614bb8565b801561236c5780601f106123415761010080835404028352916020019161236c565b820191906000526020600020905b81548152906001019060200180831161234f57829003601f168201915b50505050509050919050565b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60d160205280600052604060002060009150905080600001549080600101549080600201805461243b90614bb8565b80601f016020809104026020016040519081016040528092919081815260200182805461246790614bb8565b80156124b45780601f10612489576101008083540402835291602001916124b4565b820191906000526020600020905b81548152906001019060200180831161249757829003601f168201915b5050505050905083565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061258957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612599575061259882612da1565b5b9050919050565b6125a981612e0b565b6125e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125df906147e1565b60405180910390fd5b50565b600033905090565b816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16612666836116c4565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806126b8836116c4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806126fa57506126f98185612378565b5b8061273857508373ffffffffffffffffffffffffffffffffffffffff16612720846109d6565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612761826116c4565b73ffffffffffffffffffffffffffffffffffffffff16146127b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127ae90614721565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612827576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281e90614761565b60405180910390fd5b6128348383836001612e4c565b8273ffffffffffffffffffffffffffffffffffffffff16612854826116c4565b73ffffffffffffffffffffffffffffffffffffffff16146128aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a190614721565b60405180910390fd5b6069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612a368383836001612fac565b505050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ade90614781565b60405180910390fd5b80606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612bd89190614638565b60405180910390a3505050565b612bf0848484612741565b612bfc84848484612fb2565b612c3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3290614701565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606060006001612c6784613149565b01905060008167ffffffffffffffff811115612c8657612c85614d4f565b5b6040519080825280601f01601f191660200182016040528015612cb85781602001600182028036833780820191505090505b509050600082602001820190505b600115612d25578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612d0f57612d0e614c93565b5b0494506000851415612d2057612d25565b612cc6565b819350505050919050565b60405180606001604052808481526020018381526020018281525060d1600084815260200190815260200160002060008201518160000155602082015181600101556040820151816002019080519060200190612d8e929190613909565b50905050612d9c338361329c565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16612e2d83612a3b565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b612e58848484846134ba565b6001811115612e9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e9390614861565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415612ee457612edf816135e0565b612f23565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612f2257612f218582613629565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612f6657612f6181613796565b612fa5565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612fa457612fa38482613867565b5b5b5050505050565b50505050565b6000612fd38473ffffffffffffffffffffffffffffffffffffffff166138e6565b1561313c578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612ffc6125eb565b8786866040518563ffffffff1660e01b815260040161301e94939291906145ca565b602060405180830381600087803b15801561303857600080fd5b505af192505050801561306957506040513d601f19601f820116820180604052508101906130669190613de1565b60015b6130ec573d8060008114613099576040519150601f19603f3d011682016040523d82523d6000602084013e61309e565b606091505b506000815114156130e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130db90614701565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613141565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106131a7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161319d5761319c614c93565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106131e4576d04ee2d6d415b85acef810000000083816131da576131d9614c93565b5b0492506020810190505b662386f26fc10000831061321357662386f26fc10000838161320957613208614c93565b5b0492506010810190505b6305f5e100831061323c576305f5e100838161323257613231614c93565b5b0492506008810190505b612710831061326157612710838161325757613256614c93565b5b0492506004810190505b60648310613284576064838161327a57613279614c93565b5b0492506002810190505b600a8310613293576001810190505b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561330c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613303906147c1565b60405180910390fd5b61331581612e0b565b15613355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161334c90614741565b60405180910390fd5b613363600083836001612e4c565b61336c81612e0b565b156133ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133a390614741565b60405180910390fd5b6001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46134b6600083836001612fac565b5050565b60018111156135da57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461354e5780606860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546135469190614ace565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146135d95780606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546135d19190614a78565b925050819055505b5b50505050565b609980549050609a600083815260200190815260200160002081905550609981908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016136368461174b565b6136409190614ace565b9050600060986000848152602001908152602001600020549050818114613725576000609760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080609760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816098600083815260200190815260200160002081905550505b6098600084815260200190815260200160002060009055609760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016099805490506137aa9190614ace565b90506000609a60008481526020019081526020016000205490506000609983815481106137da576137d9614d20565b5b9060005260206000200154905080609983815481106137fc576137fb614d20565b5b906000526020600020018190555081609a600083815260200190815260200160002081905550609a600085815260200190815260200160002060009055609980548061384b5761384a614cf1565b5b6001900381819060005260206000200160009055905550505050565b60006138728361174b565b905081609760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806098600084815260200190815260200160002081905550505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461391590614bb8565b90600052602060002090601f016020900481019282613937576000855561397e565b82601f1061395057805160ff191683800117855561397e565b8280016001018555821561397e579182015b8281111561397d578251825591602001919060010190613962565b5b50905061398b91906139cf565b5090565b50805461399b90614bb8565b6000825580601f106139ad57506139cc565b601f0160209004906000526020600020908101906139cb91906139cf565b5b50565b5b808211156139e85760008160009055506001016139d0565b5090565b60006139ff6139fa8461493d565b614918565b90508083825260208201905082856020860282011115613a2257613a21614d83565b5b60005b85811015613a7057813567ffffffffffffffff811115613a4857613a47614d7e565b5b808601613a558982613bae565b85526020850194506020840193505050600181019050613a25565b5050509392505050565b6000613a8d613a8884614969565b614918565b905082815260208101848484011115613aa957613aa8614d88565b5b613ab4848285614b76565b509392505050565b6000613acf613aca8461499a565b614918565b905082815260208101848484011115613aeb57613aea614d88565b5b613af6848285614b76565b509392505050565b600081359050613b0d81615162565b92915050565b600082601f830112613b2857613b27614d7e565b5b8135613b388482602086016139ec565b91505092915050565b600081359050613b5081615179565b92915050565b600081359050613b6581615190565b92915050565b600081519050613b7a81615190565b92915050565b600082601f830112613b9557613b94614d7e565b5b8135613ba5848260208601613a7a565b91505092915050565b600082601f830112613bc357613bc2614d7e565b5b8135613bd3848260208601613abc565b91505092915050565b600081359050613beb816151a7565b92915050565b600060208284031215613c0757613c06614d92565b5b6000613c1584828501613afe565b91505092915050565b60008060408385031215613c3557613c34614d92565b5b6000613c4385828601613afe565b9250506020613c5485828601613afe565b9150509250929050565b600080600060608486031215613c7757613c76614d92565b5b6000613c8586828701613afe565b9350506020613c9686828701613afe565b9250506040613ca786828701613bdc565b9150509250925092565b60008060008060808587031215613ccb57613cca614d92565b5b6000613cd987828801613afe565b9450506020613cea87828801613afe565b9350506040613cfb87828801613bdc565b925050606085013567ffffffffffffffff811115613d1c57613d1b614d8d565b5b613d2887828801613b80565b91505092959194509250565b60008060408385031215613d4b57613d4a614d92565b5b6000613d5985828601613afe565b9250506020613d6a85828601613b41565b9150509250929050565b60008060408385031215613d8b57613d8a614d92565b5b6000613d9985828601613afe565b9250506020613daa85828601613bdc565b9150509250929050565b600060208284031215613dca57613dc9614d92565b5b6000613dd884828501613b56565b91505092915050565b600060208284031215613df757613df6614d92565b5b6000613e0584828501613b6b565b91505092915050565b600060208284031215613e2457613e23614d92565b5b600082013567ffffffffffffffff811115613e4257613e41614d8d565b5b613e4e84828501613bae565b91505092915050565b60008060408385031215613e6e57613e6d614d92565b5b600083013567ffffffffffffffff811115613e8c57613e8b614d8d565b5b613e9885828601613bae565b925050602083013567ffffffffffffffff811115613eb957613eb8614d8d565b5b613ec585828601613bae565b9150509250929050565b60008060408385031215613ee657613ee5614d92565b5b600083013567ffffffffffffffff811115613f0457613f03614d8d565b5b613f1085828601613bae565b9250506020613f2185828601613bdc565b9150509250929050565b600080600060608486031215613f4457613f43614d92565b5b600084013567ffffffffffffffff811115613f6257613f61614d8d565b5b613f6e86828701613bae565b9350506020613f7f86828701613bdc565b925050604084013567ffffffffffffffff811115613fa057613f9f614d8d565b5b613fac86828701613b13565b9150509250925092565b600060208284031215613fcc57613fcb614d92565b5b6000613fda84828501613bdc565b91505092915050565b60008060408385031215613ffa57613ff9614d92565b5b600061400885828601613bdc565b925050602083013567ffffffffffffffff81111561402957614028614d8d565b5b61403585828601613bae565b9150509250929050565b60008060006060848603121561405857614057614d92565b5b600061406686828701613bdc565b935050602084013567ffffffffffffffff81111561408757614086614d8d565b5b61409386828701613bae565b925050604084013567ffffffffffffffff8111156140b4576140b3614d8d565b5b6140c086828701613bae565b9150509250925092565b600080604083850312156140e1576140e0614d92565b5b60006140ef85828601613bdc565b925050602061410085828601613bdc565b9150509250929050565b60008060006060848603121561412357614122614d92565b5b600061413186828701613bdc565b935050602061414286828701613bdc565b925050604084013567ffffffffffffffff81111561416357614162614d8d565b5b61416f86828701613bae565b9150509250925092565b600061418583836142d8565b905092915050565b61419681614b02565b82525050565b60006141a7826149f0565b6141b18185614a1e565b9350836020820285016141c3856149cb565b8060005b858110156141ff57848403895281516141e08582614179565b94506141eb83614a11565b925060208a019950506001810190506141c7565b50829750879550505050505092915050565b61421a81614b14565b82525050565b600061422b826149fb565b6142358185614a2f565b9350614245818560208601614b85565b61424e81614d97565b840191505092915050565b6000815461426681614bb8565b6142708186614a40565b9450600182166000811461428b576001811461429c576142cf565b60ff198316865281860193506142cf565b6142a5856149db565b60005b838110156142c7578154818901526001820191506020810190506142a8565b838801955050505b50505092915050565b60006142e382614a06565b6142ed8185614a4b565b93506142fd818560208601614b85565b61430681614d97565b840191505092915050565b600061431c82614a06565b6143268185614a5c565b9350614336818560208601614b85565b61433f81614d97565b840191505092915050565b600061435582614a06565b61435f8185614a6d565b935061436f818560208601614b85565b80840191505092915050565b6000614388602d83614a5c565b915061439382614da8565b604082019050919050565b60006143ab602b83614a5c565b91506143b682614df7565b604082019050919050565b60006143ce603283614a5c565b91506143d982614e46565b604082019050919050565b60006143f1602583614a5c565b91506143fc82614e95565b604082019050919050565b6000614414601c83614a5c565b915061441f82614ee4565b602082019050919050565b6000614437602483614a5c565b915061444282614f0d565b604082019050919050565b600061445a601983614a5c565b915061446582614f5c565b602082019050919050565b600061447d602983614a5c565b915061448882614f85565b604082019050919050565b60006144a0602083614a5c565b91506144ab82614fd4565b602082019050919050565b60006144c3601883614a5c565b91506144ce82614ffd565b602082019050919050565b60006144e6602183614a5c565b91506144f182615026565b604082019050919050565b6000614509603d83614a5c565b915061451482615075565b604082019050919050565b600061452c602c83614a5c565b9150614537826150c4565b604082019050919050565b600061454f603583614a5c565b915061455a82615113565b604082019050919050565b61456e81614b6c565b82525050565b60006145808284614259565b915081905092915050565b6000614597828561434a565b91506145a3828461434a565b91508190509392505050565b60006020820190506145c4600083018461418d565b92915050565b60006080820190506145df600083018761418d565b6145ec602083018661418d565b6145f96040830185614565565b818103606083015261460b8184614220565b905095945050505050565b60006020820190508181036000830152614630818461419c565b905092915050565b600060208201905061464d6000830184614211565b92915050565b6000602082019050818103600083015261466d8184614311565b905092915050565b6000606082019050818103600083015261468f8186614311565b905081810360208301526146a38185614311565b905081810360408301526146b78184614311565b9050949350505050565b600060208201905081810360008301526146da8161437b565b9050919050565b600060208201905081810360008301526146fa8161439e565b9050919050565b6000602082019050818103600083015261471a816143c1565b9050919050565b6000602082019050818103600083015261473a816143e4565b9050919050565b6000602082019050818103600083015261475a81614407565b9050919050565b6000602082019050818103600083015261477a8161442a565b9050919050565b6000602082019050818103600083015261479a8161444d565b9050919050565b600060208201905081810360008301526147ba81614470565b9050919050565b600060208201905081810360008301526147da81614493565b9050919050565b600060208201905081810360008301526147fa816144b6565b9050919050565b6000602082019050818103600083015261481a816144d9565b9050919050565b6000602082019050818103600083015261483a816144fc565b9050919050565b6000602082019050818103600083015261485a8161451f565b9050919050565b6000602082019050818103600083015261487a81614542565b9050919050565b60006020820190506148966000830184614565565b92915050565b60006060820190506148b16000830186614565565b81810360208301526148c38185614311565b90506148d26040830184614565565b949350505050565b60006060820190506148ef6000830186614565565b6148fc6020830185614565565b818103604083015261490e8184614311565b9050949350505050565b6000614922614933565b905061492e8282614bea565b919050565b6000604051905090565b600067ffffffffffffffff82111561495857614957614d4f565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561498457614983614d4f565b5b61498d82614d97565b9050602081019050919050565b600067ffffffffffffffff8211156149b5576149b4614d4f565b5b6149be82614d97565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614a8382614b6c565b9150614a8e83614b6c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614ac357614ac2614c64565b5b828201905092915050565b6000614ad982614b6c565b9150614ae483614b6c565b925082821015614af757614af6614c64565b5b828203905092915050565b6000614b0d82614b4c565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614ba3578082015181840152602081019050614b88565b83811115614bb2576000848401525b50505050565b60006002820490506001821680614bd057607f821691505b60208210811415614be457614be3614cc2565b5b50919050565b614bf382614d97565b810181811067ffffffffffffffff82111715614c1257614c11614d4f565b5b80604052505050565b6000614c2682614b6c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c5957614c58614c64565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b61516b81614b02565b811461517657600080fd5b50565b61518281614b14565b811461518d57600080fd5b50565b61519981614b20565b81146151a457600080fd5b50565b6151b081614b6c565b81146151bb57600080fd5b5056fea264697066735822122035844669f37d9eb8bec71d7483a496d4816c1bb6726ccb7c6d5f94708b36092c64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2029,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2248,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 197,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 199,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 203,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 207,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 211,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 217,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1137,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 1302,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1306,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1309,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_allTokens",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1313,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1645,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 4208,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_dao_ids",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 4210,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_goal_ids",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 4212,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_ideas_ids",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 4214,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_smart_contract_ids",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 4216,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_ideas_vote_ids",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 4221,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_dao_uris",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_uint256,t_struct(dao_uri_struct)4180_storage)"
      },
      {
        "astId": 4226,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_goal_uris",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_uint256,t_struct(goal_uri_struct)4185_storage)"
      },
      {
        "astId": 4231,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_ideas_uris",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_uint256,t_struct(ideas_uri_struct)4192_storage)"
      },
      {
        "astId": 4236,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_smart_contracts_uris",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_uint256,t_struct(smart_contract_uri_struct)4199_storage)"
      },
      {
        "astId": 4241,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "all_goal_ideas_votes",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_uint256,t_struct(goal_ideas_votes_struct)4206_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(dao_uri_struct)4180_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.dao_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(dao_uri_struct)4180_storage"
      },
      "t_mapping(t_uint256,t_struct(goal_ideas_votes_struct)4206_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.goal_ideas_votes_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(goal_ideas_votes_struct)4206_storage"
      },
      "t_mapping(t_uint256,t_struct(goal_uri_struct)4185_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.goal_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(goal_uri_struct)4185_storage"
      },
      "t_mapping(t_uint256,t_struct(ideas_uri_struct)4192_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.ideas_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(ideas_uri_struct)4192_storage"
      },
      "t_mapping(t_uint256,t_struct(smart_contract_uri_struct)4199_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.smart_contract_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(smart_contract_uri_struct)4199_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(dao_uri_struct)4180_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.dao_uri_struct",
        "members": [
          {
            "astId": 4175,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "dao_wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4177,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "dao_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4179,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "finished",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(goal_ideas_votes_struct)4206_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.goal_ideas_votes_struct",
        "members": [
          {
            "astId": 4201,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "goal_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4203,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4205,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "wallet",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(goal_uri_struct)4185_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.goal_uri_struct",
        "members": [
          {
            "astId": 4182,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "dao_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4184,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "goal_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ideas_uri_struct)4192_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.ideas_uri_struct",
        "members": [
          {
            "astId": 4187,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "goal_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4189,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "ideas_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4191,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "donation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(smart_contract_uri_struct)4199_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.smart_contract_uri_struct",
        "members": [
          {
            "astId": 4194,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "smart_contract_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4196,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4198,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "smart_contract_uri",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}